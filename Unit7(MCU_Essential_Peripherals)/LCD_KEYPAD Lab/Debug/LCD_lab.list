
LCD_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000654  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800078c  0800078c  00010794  2**0
                  CONTENTS
  4 .ARM          00000000  0800078c  0800078c  00010794  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800078c  08000794  00010794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800078c  0800078c  0001078c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000790  08000790  00010790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000794  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000794  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010794  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000206b  00000000  00000000  000107bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000644  00000000  00000000  00012828  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  00012e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000e0  00000000  00000000  00012f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000233c  00000000  00000000  00013068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001566  00000000  00000000  000153a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008b74  00000000  00000000  0001690a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001f47e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000344  00000000  00000000  0001f4fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800076c 	.word	0x0800076c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800076c 	.word	0x0800076c

08000170 <GET_CRLH_POSITION>:

#include "gpio.h"


uint8_t GET_CRLH_POSITION(uint16_t PIN_NUMBER)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PIN_NUMBER)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <GET_CRLH_POSITION+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <GET_CRLH_POSITION+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <GET_CRLH_POSITION+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <GET_CRLH_POSITION+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <GET_CRLH_POSITION+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <GET_CRLH_POSITION+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <GET_CRLH_POSITION+0x7a>
 8000198:	e047      	b.n	800022a <GET_CRLH_POSITION+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <GET_CRLH_POSITION+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <GET_CRLH_POSITION+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <GET_CRLH_POSITION+0x8a>
 80001a6:	e040      	b.n	800022a <GET_CRLH_POSITION+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <GET_CRLH_POSITION+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <GET_CRLH_POSITION+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <GET_CRLH_POSITION+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <GET_CRLH_POSITION+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <GET_CRLH_POSITION+0x9a>
 80001c6:	e030      	b.n	800022a <GET_CRLH_POSITION+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <GET_CRLH_POSITION+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <GET_CRLH_POSITION+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <GET_CRLH_POSITION+0xaa>
 80001da:	e026      	b.n	800022a <GET_CRLH_POSITION+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <GET_CRLH_POSITION+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <GET_CRLH_POSITION+0xb6>
 80001e8:	e01f      	b.n	800022a <GET_CRLH_POSITION+0xba>
	{
		case GPIO_PIN0:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN1:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <GET_CRLH_POSITION+0xbc>
		break;
	}
	return 0;
 800022a:	2300      	movs	r3, #0

}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_Init>:
 * Note			-STM32F103x8 MCU has GPIO A,B,C,D,E Modules
			 But LQFP48 has only GPIO A,B, Part of C,D exported as external pins from the MCU
 */

void MCAL_GPIO_Init	(GPIO_Typedef *GPIOx , GPIO_PIN_CONFIG_t* PINconfig)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) configures pins from 0 to 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) configures pins from 8 to 15
	volatile uint32_t* configReg = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config =0;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]

	configReg = (PINconfig->GPIO_PIN_NO > 7) ? &GPIOx->CRH : &GPIOx->CRL;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b07      	cmp	r3, #7
 800024e:	d902      	bls.n	8000256 <MCAL_GPIO_Init+0x20>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3304      	adds	r3, #4
 8000254:	e000      	b.n	8000258 <MCAL_GPIO_Init+0x22>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	60bb      	str	r3, [r7, #8]

	(*configReg) &= ~(0xF << GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO ));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	b29b      	uxth	r3, r3
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff85 	bl	8000170 <GET_CRLH_POSITION>
 8000266:	4603      	mov	r3, r0
 8000268:	461a      	mov	r2, r3
 800026a:	230f      	movs	r3, #15
 800026c:	4093      	lsls	r3, r2
 800026e:	43da      	mvns	r2, r3
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	401a      	ands	r2, r3
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	601a      	str	r2, [r3, #0]


	//If pin is output

	if( (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 800027a:	683b      	ldr	r3, [r7, #0]
 800027c:	785b      	ldrb	r3, [r3, #1]
 800027e:	2b04      	cmp	r3, #4
 8000280:	d007      	beq.n	8000292 <MCAL_GPIO_Init+0x5c>
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	785b      	ldrb	r3, [r3, #1]
 8000286:	2b05      	cmp	r3, #5
 8000288:	d003      	beq.n	8000292 <MCAL_GPIO_Init+0x5c>
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	2b06      	cmp	r3, #6
 8000290:	d10e      	bne.n	80002b0 <MCAL_GPIO_Init+0x7a>
 	{
		PIN_config= ( (( (PINconfig->GPIO_MODE -4) <<2 ) | (PINconfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	785b      	ldrb	r3, [r3, #1]
 8000296:	3b04      	subs	r3, #4
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	b25a      	sxtb	r2, r3
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	789b      	ldrb	r3, [r3, #2]
 80002a0:	b25b      	sxtb	r3, r3
 80002a2:	4313      	orrs	r3, r2
 80002a4:	b25b      	sxtb	r3, r3
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	f003 030f 	and.w	r3, r3, #15
 80002ac:	73fb      	strb	r3, [r7, #15]
 80002ae:	e02c      	b.n	800030a <MCAL_GPIO_Init+0xd4>
	}

	//Pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if ( (PINconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PINconfig->GPIO_MODE == GPIO_MODE_AF_INPUT))
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	785b      	ldrb	r3, [r3, #1]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d003      	beq.n	80002c0 <MCAL_GPIO_Init+0x8a>
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	785b      	ldrb	r3, [r3, #1]
 80002bc:	2b08      	cmp	r3, #8
 80002be:	d107      	bne.n	80002d0 <MCAL_GPIO_Init+0x9a>
		{
			//Set CNF8[1:0] MODE8[1:0] 00
			PIN_config = (( ( (PINconfig->GPIO_MODE) <<2 ) | 0x0) & 0x0F);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	785b      	ldrb	r3, [r3, #1]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 030f 	and.w	r3, r3, #15
 80002cc:	73fb      	strb	r3, [r7, #15]
 80002ce:	e01c      	b.n	800030a <MCAL_GPIO_Init+0xd4>
		}
		else if (PINconfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	785b      	ldrb	r3, [r3, #1]
 80002d4:	2b08      	cmp	r3, #8
 80002d6:	d102      	bne.n	80002de <MCAL_GPIO_Init+0xa8>
		{
			PIN_config = (( (GPIO_MODE_INPUT_FLOATING <<2 ) | 0x0) & 0x0F);
 80002d8:	2304      	movs	r3, #4
 80002da:	73fb      	strb	r3, [r7, #15]
 80002dc:	e015      	b.n	800030a <MCAL_GPIO_Init+0xd4>

		}

		else
		{
			PIN_config = (( (GPIO_MODE_INPUT_PU <<2 ) | 0x0) & 0x0F);
 80002de:	2308      	movs	r3, #8
 80002e0:	73fb      	strb	r3, [r7, #15]
			if (PINconfig->GPIO_MODE == GPIO_MODE_INPUT_PU )
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	785b      	ldrb	r3, [r3, #1]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d107      	bne.n	80002fa <MCAL_GPIO_Init+0xc4>
			{
				//PxODR = 1 INPUT pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= (PINconfig->GPIO_PIN_NO);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	431a      	orrs	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	e007      	b.n	800030a <MCAL_GPIO_Init+0xd4>
			}
			else
			{
				//PxODR = 0 INPUT pull-down Table 20. Port bit configuration table
				GPIOx->ODR &= ~ (PINconfig->GPIO_PIN_NO);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	683a      	ldr	r2, [r7, #0]
 8000300:	7812      	ldrb	r2, [r2, #0]
 8000302:	43d2      	mvns	r2, r2
 8000304:	401a      	ands	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*configReg) |= ( (PIN_config) << GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO ));
 800030a:	7bfc      	ldrb	r4, [r7, #15]
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	b29b      	uxth	r3, r3
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff2c 	bl	8000170 <GET_CRLH_POSITION>
 8000318:	4603      	mov	r3, r0
 800031a:	fa04 f203 	lsl.w	r2, r4, r3
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	431a      	orrs	r2, r3
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	601a      	str	r2, [r3, #0]

}
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	bd90      	pop	{r4, r7, pc}

08000330 <MCAL_GPIO_WRITE_PORT>:
 * Note			-None
 */


void MCAL_GPIO_WRITE_PORT(GPIO_Typedef *GPIOx, uint8_t value)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR = ( uint32_t )value;
 800033c:	78fa      	ldrb	r2, [r7, #3]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	60da      	str	r2, [r3, #12]
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <MCAL_GPIO_WRITE_PIN>:
 * @Param [in]		-PIN Value
 * @Retval 		-None
 * Note			-None
 */
void MCAL_GPIO_WRITE_PIN 	(GPIO_Typedef *GPIOx, uint8_t PIN , uint8_t value)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
 8000358:	4613      	mov	r3, r2
 800035a:	70bb      	strb	r3, [r7, #2]
	if (value != (uint32_t)GPIO_PIN_RESET)
 800035c:	78bb      	ldrb	r3, [r7, #2]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d003      	beq.n	800036a <MCAL_GPIO_WRITE_PIN+0x1e>

		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		  GPIOx->BSRR = PIN ;
 8000362:	78fa      	ldrb	r2, [r7, #3]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	611a      	str	r2, [r3, #16]
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		  GPIOx->BRR = PIN ;
	}
}
 8000368:	e002      	b.n	8000370 <MCAL_GPIO_WRITE_PIN+0x24>
		  GPIOx->BRR = PIN ;
 800036a:	78fa      	ldrb	r2, [r7, #3]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	615a      	str	r2, [r3, #20]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr

0800037a <delay_ms>:
#include <STM32F103.h>
#include "../GPIO_DRIVER/gpio.h"



void delay_ms(uint32_t time) {
 800037a:	b480      	push	{r7}
 800037c:	b085      	sub	sp, #20
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	e00b      	b.n	80003a0 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 8000388:	2300      	movs	r3, #0
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	e002      	b.n	8000394 <delay_ms+0x1a>
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	3301      	adds	r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	2bfe      	cmp	r3, #254	; 0xfe
 8000398:	d9f9      	bls.n	800038e <delay_ms+0x14>
	for (i = 0; i < time; i++)
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	3301      	adds	r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fa      	ldr	r2, [r7, #12]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d3ef      	bcc.n	8000388 <delay_ms+0xe>
			;
}
 80003a8:	bf00      	nop
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
	...

080003b4 <LCD_GPIO_Init>:
 * @Retval 		-None
 * Note			-
 */


void LCD_GPIO_Init() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

	PinCfg.GPIO_PIN_NO = RS_SWITCH;
 80003b8:	4b4f      	ldr	r3, [pc, #316]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003be:	4b4e      	ldr	r3, [pc, #312]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003c0:	2204      	movs	r2, #4
 80003c2:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHZ;
 80003c4:	4b4c      	ldr	r3, [pc, #304]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003ca:	494b      	ldr	r1, [pc, #300]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003cc:	484b      	ldr	r0, [pc, #300]	; (80004fc <LCD_GPIO_Init+0x148>)
 80003ce:	f7ff ff32 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = RW_SWITCH;
 80003d2:	4b49      	ldr	r3, [pc, #292]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003d8:	4b47      	ldr	r3, [pc, #284]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003da:	2204      	movs	r2, #4
 80003dc:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED =GPIO_SPEED_10MHZ;
 80003de:	4b46      	ldr	r3, [pc, #280]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003e4:	4944      	ldr	r1, [pc, #272]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003e6:	4845      	ldr	r0, [pc, #276]	; (80004fc <LCD_GPIO_Init+0x148>)
 80003e8:	f7ff ff25 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = EN_SWITCH;
 80003ec:	4b42      	ldr	r3, [pc, #264]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003f2:	4b41      	ldr	r3, [pc, #260]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003f4:	2204      	movs	r2, #4
 80003f6:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80003f8:	4b3f      	ldr	r3, [pc, #252]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003fe:	493e      	ldr	r1, [pc, #248]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000400:	483e      	ldr	r0, [pc, #248]	; (80004fc <LCD_GPIO_Init+0x148>)
 8000402:	f7ff ff18 	bl	8000236 <MCAL_GPIO_Init>


	PinCfg.GPIO_PIN_NO = GPIO_PIN0;
 8000406:	4b3c      	ldr	r3, [pc, #240]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000408:	2201      	movs	r2, #1
 800040a:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800040c:	4b3a      	ldr	r3, [pc, #232]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800040e:	2204      	movs	r2, #4
 8000410:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000412:	4b39      	ldr	r3, [pc, #228]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000414:	2201      	movs	r2, #1
 8000416:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000418:	4937      	ldr	r1, [pc, #220]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800041a:	4838      	ldr	r0, [pc, #224]	; (80004fc <LCD_GPIO_Init+0x148>)
 800041c:	f7ff ff0b 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = GPIO_PIN1;
 8000420:	4b35      	ldr	r3, [pc, #212]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000422:	2202      	movs	r2, #2
 8000424:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000426:	4b34      	ldr	r3, [pc, #208]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000428:	2204      	movs	r2, #4
 800042a:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 800042c:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800042e:	2201      	movs	r2, #1
 8000430:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000432:	4931      	ldr	r1, [pc, #196]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000434:	4831      	ldr	r0, [pc, #196]	; (80004fc <LCD_GPIO_Init+0x148>)
 8000436:	f7ff fefe 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = GPIO_PIN2;
 800043a:	4b2f      	ldr	r3, [pc, #188]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800043c:	2204      	movs	r2, #4
 800043e:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000440:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000442:	2204      	movs	r2, #4
 8000444:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000446:	4b2c      	ldr	r3, [pc, #176]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000448:	2201      	movs	r2, #1
 800044a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800044c:	492a      	ldr	r1, [pc, #168]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800044e:	482b      	ldr	r0, [pc, #172]	; (80004fc <LCD_GPIO_Init+0x148>)
 8000450:	f7ff fef1 	bl	8000236 <MCAL_GPIO_Init>


	PinCfg.GPIO_PIN_NO = GPIO_PIN3;
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000456:	2208      	movs	r2, #8
 8000458:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800045a:	4b27      	ldr	r3, [pc, #156]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800045c:	2204      	movs	r2, #4
 800045e:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000460:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000462:	2201      	movs	r2, #1
 8000464:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000466:	4924      	ldr	r1, [pc, #144]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000468:	4824      	ldr	r0, [pc, #144]	; (80004fc <LCD_GPIO_Init+0x148>)
 800046a:	f7ff fee4 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = GPIO_PIN4;
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000470:	2210      	movs	r2, #16
 8000472:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000474:	4b20      	ldr	r3, [pc, #128]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000476:	2204      	movs	r2, #4
 8000478:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED= GPIO_SPEED_10MHZ;
 800047a:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800047c:	2201      	movs	r2, #1
 800047e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000482:	481e      	ldr	r0, [pc, #120]	; (80004fc <LCD_GPIO_Init+0x148>)
 8000484:	f7ff fed7 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = GPIO_PIN5;
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800048a:	2220      	movs	r2, #32
 800048c:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800048e:	4b1a      	ldr	r3, [pc, #104]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000490:	2204      	movs	r2, #4
 8000492:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <LCD_GPIO_Init+0x144>)
 8000496:	2201      	movs	r2, #1
 8000498:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800049a:	4917      	ldr	r1, [pc, #92]	; (80004f8 <LCD_GPIO_Init+0x144>)
 800049c:	4817      	ldr	r0, [pc, #92]	; (80004fc <LCD_GPIO_Init+0x148>)
 800049e:	f7ff feca 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = GPIO_PIN6;
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004a4:	2240      	movs	r2, #64	; 0x40
 80004a6:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a8:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004aa:	2204      	movs	r2, #4
 80004ac:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004ae:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004b4:	4910      	ldr	r1, [pc, #64]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004b6:	4811      	ldr	r0, [pc, #68]	; (80004fc <LCD_GPIO_Init+0x148>)
 80004b8:	f7ff febd 	bl	8000236 <MCAL_GPIO_Init>

	PinCfg.GPIO_PIN_NO = GPIO_PIN7;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	701a      	strb	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004c4:	2204      	movs	r2, #4
 80004c6:	705a      	strb	r2, [r3, #1]
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004ce:	490a      	ldr	r1, [pc, #40]	; (80004f8 <LCD_GPIO_Init+0x144>)
 80004d0:	480a      	ldr	r0, [pc, #40]	; (80004fc <LCD_GPIO_Init+0x148>)
 80004d2:	f7ff feb0 	bl	8000236 <MCAL_GPIO_Init>



	//MCAL_GPIO_WRITE_PIN (LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	4808      	ldr	r0, [pc, #32]	; (80004fc <LCD_GPIO_Init+0x148>)
 80004dc:	f7ff ff36 	bl	800034c <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	4805      	ldr	r0, [pc, #20]	; (80004fc <LCD_GPIO_Init+0x148>)
 80004e6:	f7ff ff31 	bl	800034c <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN (LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <LCD_GPIO_Init+0x148>)
 80004f0:	f7ff ff2c 	bl	800034c <MCAL_GPIO_WRITE_PIN>

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	2000001c 	.word	0x2000001c
 80004fc:	40010800 	.word	0x40010800

08000500 <LCD_kick>:
 * @Param [in]	-None
 * @Retval 		-None
 * Note			-
 */

void LCD_kick() {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2100      	movs	r1, #0
 8000508:	4806      	ldr	r0, [pc, #24]	; (8000524 <LCD_kick+0x24>)
 800050a:	f7ff ff1f 	bl	800034c <MCAL_GPIO_WRITE_PIN>
	delay_ms(50);
 800050e:	2032      	movs	r0, #50	; 0x32
 8000510:	f7ff ff33 	bl	800037a <delay_ms>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <LCD_kick+0x24>)
 800051a:	f7ff ff17 	bl	800034c <MCAL_GPIO_WRITE_PIN>
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800

08000528 <LCD_INIT>:
 * @Retval 		-None
 * Note			-
 */


void LCD_INIT() {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0

	delay_ms(20);
 800052c:	2014      	movs	r0, #20
 800052e:	f7ff ff24 	bl	800037a <delay_ms>

		//============================
	LCD_GPIO_Init(); //Sets all 8 pins output mode and also resets RS & RW
 8000532:	f7ff ff3f 	bl	80003b4 <LCD_GPIO_Init>


	delay_ms(15);
 8000536:	200f      	movs	r0, #15
 8000538:	f7ff ff1f 	bl	800037a <delay_ms>

	//8 bit mode
	LCD_clear_screen();
 800053c:	f000 f87a 	bl	8000634 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000540:	2038      	movs	r0, #56	; 0x38
 8000542:	f000 f80b 	bl	800055c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000546:	2006      	movs	r0, #6
 8000548:	f000 f808 	bl	800055c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 800054c:	2080      	movs	r0, #128	; 0x80
 800054e:	f000 f805 	bl	800055c <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 8000552:	200f      	movs	r0, #15
 8000554:	f000 f802 	bl	800055c <LCD_WRITE_COMMAND>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <LCD_WRITE_COMMAND>:
				• turn on the enable and then turn it off.(delay ~500ns)
				The LCD will magically perform the command.
 */


void LCD_WRITE_COMMAND(unsigned char command) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]

	//LCD_IsBusy();

	MCAL_GPIO_WRITE_PORT(LCD_CTRL, command);
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4619      	mov	r1, r3
 800056a:	480b      	ldr	r0, [pc, #44]	; (8000598 <LCD_WRITE_COMMAND+0x3c>)
 800056c:	f7ff fee0 	bl	8000330 <MCAL_GPIO_WRITE_PORT>


	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2100      	movs	r1, #0
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <LCD_WRITE_COMMAND+0x3c>)
 8000576:	f7ff fee9 	bl	800034c <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	4806      	ldr	r0, [pc, #24]	; (8000598 <LCD_WRITE_COMMAND+0x3c>)
 8000580:	f7ff fee4 	bl	800034c <MCAL_GPIO_WRITE_PIN>



	delay_ms(15);
 8000584:	200f      	movs	r0, #15
 8000586:	f7ff fef8 	bl	800037a <delay_ms>
	LCD_kick();
 800058a:	f7ff ffb9 	bl	8000500 <LCD_kick>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010800 	.word	0x40010800

0800059c <LCD_WRITE_CHAR>:
				• Write the command on D0...D7
				• turn on the enable and then turn it off.(delay ~500ns)
*/


void LCD_WRITE_CHAR(unsigned char character) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]

	//LCD_IsBusy();

	MCAL_GPIO_WRITE_PORT(LCD_CTRL, character);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4619      	mov	r1, r3
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <LCD_WRITE_CHAR+0x3c>)
 80005ac:	f7ff fec0 	bl	8000330 <MCAL_GPIO_WRITE_PORT>


	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2100      	movs	r1, #0
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <LCD_WRITE_CHAR+0x3c>)
 80005b6:	f7ff fec9 	bl	800034c <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2100      	movs	r1, #0
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <LCD_WRITE_CHAR+0x3c>)
 80005c0:	f7ff fec4 	bl	800034c <MCAL_GPIO_WRITE_PIN>


	delay_ms(15);
 80005c4:	200f      	movs	r0, #15
 80005c6:	f7ff fed8 	bl	800037a <delay_ms>
	LCD_kick();
 80005ca:	f7ff ff99 	bl	8000500 <LCD_kick>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40010800 	.word	0x40010800

080005dc <LCD_WRITE_STRING>:
 * @Param [in]		-String to display
 * @Retval 		-None
 * Note			-
 */
void LCD_WRITE_STRING(char *string)
 {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	int count = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  	while (*string > 0)
 80005e8:	e01c      	b.n	8000624 <LCD_WRITE_STRING+0x48>
	{
		count++;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	607a      	str	r2, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ffcf 	bl	800059c <LCD_WRITE_CHAR>
		if (count == 16)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b10      	cmp	r3, #16
 8000602:	d104      	bne.n	800060e <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	2002      	movs	r0, #2
 8000608:	f000 f81b 	bl	8000642 <LCD_GOTO_XY>
 800060c:	e00a      	b.n	8000624 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b20      	cmp	r3, #32
 8000612:	d107      	bne.n	8000624 <LCD_WRITE_STRING+0x48>
		 {
			LCD_clear_screen();
 8000614:	f000 f80e 	bl	8000634 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000618:	2100      	movs	r1, #0
 800061a:	2001      	movs	r0, #1
 800061c:	f000 f811 	bl	8000642 <LCD_GOTO_XY>
			count = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  	while (*string > 0)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1de      	bne.n	80005ea <LCD_WRITE_STRING+0xe>
		}
	}
}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <LCD_clear_screen>:
 * @Breif		- clears screen
 * @Param [in]		-None
 * @Retval 		-None
 * Note			-
 */
void LCD_clear_screen() {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ff8f 	bl	800055c <LCD_WRITE_COMMAND>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}

08000642 <LCD_GOTO_XY>:
 * @Param [in]	-row
 * @Param [in]	-column
 * @Retval 		-None
 * Note			-
 */
void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	4603      	mov	r3, r0
 800064a:	460a      	mov	r2, r1
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	4613      	mov	r3, r2
 8000650:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d108      	bne.n	800066a <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	2b0f      	cmp	r3, #15
 800065c:	d805      	bhi.n	800066a <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	3b80      	subs	r3, #128	; 0x80
 8000662:	b2db      	uxtb	r3, r3
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff79 	bl	800055c <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d108      	bne.n	8000682 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0) {
 8000670:	79bb      	ldrb	r3, [r7, #6]
 8000672:	2b0f      	cmp	r3, #15
 8000674:	d805      	bhi.n	8000682 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	3b40      	subs	r3, #64	; 0x40
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff6d 	bl	800055c <LCD_WRITE_COMMAND>
		}
	}
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <clock_init>:
#include "STM32F103C_Drivers/LCD_DRIVER/lcd.h"



void clock_init()
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <clock_init+0x18>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a03      	ldr	r2, [pc, #12]	; (80006a4 <clock_init+0x18>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB Bit 3 IOPBEN: IO port B clock enable
	//RCC_GPIOB_CLK_EN();
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000

080006a8 <main>:

int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	clock_init();
 80006ac:	f7ff ffee 	bl	800068c <clock_init>
	LCD_INIT();
 80006b0:	f7ff ff3a 	bl	8000528 <LCD_INIT>

	LCD_WRITE_STRING("Qamor");
 80006b4:	4805      	ldr	r0, [pc, #20]	; (80006cc <main+0x24>)
 80006b6:	f7ff ff91 	bl	80005dc <LCD_WRITE_STRING>
	delay_ms(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006be:	f7ff fe5c 	bl	800037a <delay_ms>
	LCD_clear_screen();
 80006c2:	f7ff ffb7 	bl	8000634 <LCD_clear_screen>


return 0;
 80006c6:	2300      	movs	r3, #0
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08000784 	.word	0x08000784

080006d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fe:	f000 f811 	bl	8000724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff ffd1 	bl	80006a8 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000714:	08000794 	.word	0x08000794
  ldr r2, =_sbss
 8000718:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800071c:	20000020 	.word	0x20000020

08000720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_2_IRQHandler>
	...

08000724 <__libc_init_array>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	2500      	movs	r5, #0
 8000728:	4e0c      	ldr	r6, [pc, #48]	; (800075c <__libc_init_array+0x38>)
 800072a:	4c0d      	ldr	r4, [pc, #52]	; (8000760 <__libc_init_array+0x3c>)
 800072c:	1ba4      	subs	r4, r4, r6
 800072e:	10a4      	asrs	r4, r4, #2
 8000730:	42a5      	cmp	r5, r4
 8000732:	d109      	bne.n	8000748 <__libc_init_array+0x24>
 8000734:	f000 f81a 	bl	800076c <_init>
 8000738:	2500      	movs	r5, #0
 800073a:	4e0a      	ldr	r6, [pc, #40]	; (8000764 <__libc_init_array+0x40>)
 800073c:	4c0a      	ldr	r4, [pc, #40]	; (8000768 <__libc_init_array+0x44>)
 800073e:	1ba4      	subs	r4, r4, r6
 8000740:	10a4      	asrs	r4, r4, #2
 8000742:	42a5      	cmp	r5, r4
 8000744:	d105      	bne.n	8000752 <__libc_init_array+0x2e>
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800074c:	4798      	blx	r3
 800074e:	3501      	adds	r5, #1
 8000750:	e7ee      	b.n	8000730 <__libc_init_array+0xc>
 8000752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000756:	4798      	blx	r3
 8000758:	3501      	adds	r5, #1
 800075a:	e7f2      	b.n	8000742 <__libc_init_array+0x1e>
 800075c:	0800078c 	.word	0x0800078c
 8000760:	0800078c 	.word	0x0800078c
 8000764:	0800078c 	.word	0x0800078c
 8000768:	08000790 	.word	0x08000790

0800076c <_init>:
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	bf00      	nop
 8000770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000772:	bc08      	pop	{r3}
 8000774:	469e      	mov	lr, r3
 8000776:	4770      	bx	lr

08000778 <_fini>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	bf00      	nop
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr
