
STM32_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001014  08001014  0001101c  2**0
                  CONTENTS
  4 .ARM          00000000  08001014  08001014  0001101c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001014  0800101c  0001101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001018  08001018  00011018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001101c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000000  0800101c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800101c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001101c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063a2  00000000  00000000  00011045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011a4  00000000  00000000  000173e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000300  00000000  00000000  00018590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000278  00000000  00000000  00018890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000037de  00000000  00000000  00018b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003d93  00000000  00000000  0001c2e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000d48c  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002d505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a10  00000000  00000000  0002d580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fdc 	.word	0x08000fdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000fdc 	.word	0x08000fdc

08000170 <EEPROM_Init>:
 */

#include <I2C_EEPROM_SLAVE/EEPROM.h>

void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0

	I2C_Config_t I2C_Config;

	// I2C Controller ACT AS A  MASTER

	I2C_Config.General_Call = I2C_GENERAL_CALL_ENABLE;
 8000176:	2340      	movs	r3, #64	; 0x40
 8000178:	60bb      	str	r3, [r7, #8]
	I2C_Config.ACK_Control = I2C_ACK_CONTROL_ENABLE;
 800017a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017e:	617b      	str	r3, [r7, #20]
	I2C_Config.Clock_Speed = I2C_CLOCK_SPEED_100KHZ;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <EEPROM_Init+0x38>)
 8000182:	603b      	str	r3, [r7, #0]
	I2C_Config.Mode = I2C_MODE_I2C;
 8000184:	2300      	movs	r3, #0
 8000186:	613b      	str	r3, [r7, #16]
	I2C_Config.Stretch_Mode = I2C_STRETCH_MODE_ENABLE;
 8000188:	2300      	movs	r3, #0
 800018a:	607b      	str	r3, [r7, #4]
	I2C_Config.P_Slave_CallBack = NULL;
 800018c:	2300      	movs	r3, #0
 800018e:	627b      	str	r3, [r7, #36]	; 0x24


	MCAL_I2C_GPIO_SET_PINS(I2C1);
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <EEPROM_Init+0x3c>)
 8000192:	f000 fcbb 	bl	8000b0c <MCAL_I2C_GPIO_SET_PINS>
	MCAL_I2C_INIT(I2C1, &I2C_Config);
 8000196:	463b      	mov	r3, r7
 8000198:	4619      	mov	r1, r3
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 fb9e 	bl	80008dc <MCAL_I2C_INIT>

}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_Write_NBytes>:



unsigned char EEPROM_Write_NBytes(unsigned int Memory_address , unsigned char *bytes , uint8_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1dfb      	adds	r3, r7, #7
 80001c4:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[256];
	buffer[0] = (uint8_t)(Memory_address>>8);   // Upper Byte Memory Address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	buffer[1] = (uint8_t)(Memory_address);		// Lower Byte Memory Address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]

	for( i =2 ; i<(Data_Length+2) ; i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001f0:	e011      	b.n	8000216 <EEPROM_Write_NBytes+0x66>
	{
		buffer[i]= bytes[i-2];
 80001f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	f107 0214 	add.w	r2, r7, #20
 800020a:	54d1      	strb	r1, [r2, r3]
	for( i =2 ; i<(Data_Length+2) ; i++)
 800020c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000210:	3301      	adds	r3, #1
 8000212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000216:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800021a:	1dfb      	adds	r3, r7, #7
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	3302      	adds	r3, #2
 8000220:	429a      	cmp	r2, r3
 8000222:	dbe6      	blt.n	80001f2 <EEPROM_Write_NBytes+0x42>
	}

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_Address, buffer, (Data_Length+2), With_STOP, START);
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	3302      	adds	r3, #2
 800022a:	b2d9      	uxtb	r1, r3
 800022c:	f107 0214 	add.w	r2, r7, #20
 8000230:	2300      	movs	r3, #0
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <EEPROM_Write_NBytes+0xa0>)
 800023e:	f000 fc97 	bl	8000b70 <MCAL_I2C_MASTER_TX>

	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40005400 	.word	0x40005400

08000254 <EEPROM_Read_Byte>:



unsigned char EEPROM_Read_Byte(unsigned int address, unsigned char *dataOut, uint8_t dataLen)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	4613      	mov	r3, r2
 8000260:	71fb      	strb	r3, [r7, #7]

	uint8_t buffer[2];
	buffer[0] = (uint8_t)(address>>8);   // upper Byte Memory Address
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b2db      	uxtb	r3, r3
 8000268:	753b      	strb	r3, [r7, #20]
	buffer[1] = (uint8_t)(address);		 // Lower Byte Memory Address
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	b2db      	uxtb	r3, r3
 800026e:	757b      	strb	r3, [r7, #21]

	// Write Address Only
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_Slave_Address, buffer, 2, Without_STOP, START);
 8000270:	f107 0214 	add.w	r2, r7, #20
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
 8000278:	2301      	movs	r3, #1
 800027a:	9300      	str	r3, [sp, #0]
 800027c:	2302      	movs	r3, #2
 800027e:	212a      	movs	r1, #42	; 0x2a
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000282:	f000 fc75 	bl	8000b70 <MCAL_I2C_MASTER_TX>
	// Read Data with Repeat Start
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_Slave_Address, dataOut, dataLen, With_STOP, Repeated_START);
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2300      	movs	r3, #0
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	4613      	mov	r3, r2
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <EEPROM_Read_Byte+0x54>)
 8000298:	f000 fcc2 	bl	8000c20 <MCAL_I2C_MASTER_RX>

	return 0;
 800029c:	2300      	movs	r3, #0

}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40005400 	.word	0x40005400

080002ac <EXTI0_IRQHandler>:
//0: No trigger request occurred
//1: selected trigger request occurred
//This bit is set when the selected edge event arrives on the external interrupt line. This bit is cleared by writing a ‘1’ into the bit.

void EXTI0_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<0;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[0]();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_IRQHandler+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	20000078 	.word	0x20000078

080002d0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[1]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x20>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	20000078 	.word	0x20000078

080002f4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[2]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI2_IRQHandler+0x20>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000078 	.word	0x20000078

08000318 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[3]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI3_IRQHandler+0x20>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4798      	blx	r3
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000078 	.word	0x20000078

0800033c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[4]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI4_IRQHandler+0x20>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4798      	blx	r3
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000078 	.word	0x20000078

08000360 <GET_CRLH_POSITION>:

GPIO_PIN_CONFIG_t PinConfig;


uint8_t GET_CRLH_POSITION(uint16_t PIN_NUMBER)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	80fb      	strh	r3, [r7, #6]
	switch (PIN_NUMBER)
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	2b80      	cmp	r3, #128	; 0x80
 800036e:	d042      	beq.n	80003f6 <GET_CRLH_POSITION+0x96>
 8000370:	2b80      	cmp	r3, #128	; 0x80
 8000372:	dc11      	bgt.n	8000398 <GET_CRLH_POSITION+0x38>
 8000374:	2b08      	cmp	r3, #8
 8000376:	d036      	beq.n	80003e6 <GET_CRLH_POSITION+0x86>
 8000378:	2b08      	cmp	r3, #8
 800037a:	dc06      	bgt.n	800038a <GET_CRLH_POSITION+0x2a>
 800037c:	2b02      	cmp	r3, #2
 800037e:	d02e      	beq.n	80003de <GET_CRLH_POSITION+0x7e>
 8000380:	2b04      	cmp	r3, #4
 8000382:	d02e      	beq.n	80003e2 <GET_CRLH_POSITION+0x82>
 8000384:	2b01      	cmp	r3, #1
 8000386:	d028      	beq.n	80003da <GET_CRLH_POSITION+0x7a>
 8000388:	e047      	b.n	800041a <GET_CRLH_POSITION+0xba>
 800038a:	2b20      	cmp	r3, #32
 800038c:	d02f      	beq.n	80003ee <GET_CRLH_POSITION+0x8e>
 800038e:	2b40      	cmp	r3, #64	; 0x40
 8000390:	d02f      	beq.n	80003f2 <GET_CRLH_POSITION+0x92>
 8000392:	2b10      	cmp	r3, #16
 8000394:	d029      	beq.n	80003ea <GET_CRLH_POSITION+0x8a>
 8000396:	e040      	b.n	800041a <GET_CRLH_POSITION+0xba>
 8000398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800039c:	d033      	beq.n	8000406 <GET_CRLH_POSITION+0xa6>
 800039e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003a2:	dc09      	bgt.n	80003b8 <GET_CRLH_POSITION+0x58>
 80003a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003a8:	d029      	beq.n	80003fe <GET_CRLH_POSITION+0x9e>
 80003aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ae:	d028      	beq.n	8000402 <GET_CRLH_POSITION+0xa2>
 80003b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003b4:	d021      	beq.n	80003fa <GET_CRLH_POSITION+0x9a>
 80003b6:	e030      	b.n	800041a <GET_CRLH_POSITION+0xba>
 80003b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003bc:	d027      	beq.n	800040e <GET_CRLH_POSITION+0xae>
 80003be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c2:	dc03      	bgt.n	80003cc <GET_CRLH_POSITION+0x6c>
 80003c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003c8:	d01f      	beq.n	800040a <GET_CRLH_POSITION+0xaa>
 80003ca:	e026      	b.n	800041a <GET_CRLH_POSITION+0xba>
 80003cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003d0:	d01f      	beq.n	8000412 <GET_CRLH_POSITION+0xb2>
 80003d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003d6:	d01e      	beq.n	8000416 <GET_CRLH_POSITION+0xb6>
 80003d8:	e01f      	b.n	800041a <GET_CRLH_POSITION+0xba>
	{
		case GPIO_PIN0:
		return 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	e01e      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN1:
		return 4;
 80003de:	2304      	movs	r3, #4
 80003e0:	e01c      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN2:
		return 8;
 80003e2:	2308      	movs	r3, #8
 80003e4:	e01a      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN3:
		return 12;
 80003e6:	230c      	movs	r3, #12
 80003e8:	e018      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN4:
		return 16;
 80003ea:	2310      	movs	r3, #16
 80003ec:	e016      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN5:
		return 20;
 80003ee:	2314      	movs	r3, #20
 80003f0:	e014      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN6:
		return 24;
 80003f2:	2318      	movs	r3, #24
 80003f4:	e012      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN7:
		return 28;
 80003f6:	231c      	movs	r3, #28
 80003f8:	e010      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN8:
		return 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	e00e      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN9:
		return 4;
 80003fe:	2304      	movs	r3, #4
 8000400:	e00c      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN10:
		return 8;
 8000402:	2308      	movs	r3, #8
 8000404:	e00a      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN11:
		return 12;
 8000406:	230c      	movs	r3, #12
 8000408:	e008      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN12:
		return 16;
 800040a:	2310      	movs	r3, #16
 800040c:	e006      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN13:
		return 20;
 800040e:	2314      	movs	r3, #20
 8000410:	e004      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN14:
		return 24;
 8000412:	2318      	movs	r3, #24
 8000414:	e002      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;

		case GPIO_PIN15:
		return 28;
 8000416:	231c      	movs	r3, #28
 8000418:	e000      	b.n	800041c <GET_CRLH_POSITION+0xbc>
		break;
	}
	return 0;
 800041a:	2300      	movs	r3, #0

}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr

08000426 <MCAL_GPIO_Init>:
 * Note			-STM32F103x8 MCU has GPIO A,B,C,D,E Modules
			 But LQFP48 has only GPIO A,B, Part of C,D exported as external pins from the MCU
 */

void MCAL_GPIO_Init	(GPIO_Typedef *GPIOx , GPIO_PIN_CONFIG_t* PINconfig)
{
 8000426:	b590      	push	{r4, r7, lr}
 8000428:	b085      	sub	sp, #20
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) configures pins from 0 to 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) configures pins from 8 to 15
	volatile uint32_t* configReg = NULL;
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_config =0;
 8000434:	2300      	movs	r3, #0
 8000436:	73fb      	strb	r3, [r7, #15]

	configReg = (PINconfig->GPIO_PIN_NO < GPIO_PIN8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	2bff      	cmp	r3, #255	; 0xff
 800043e:	d801      	bhi.n	8000444 <MCAL_GPIO_Init+0x1e>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	e001      	b.n	8000448 <MCAL_GPIO_Init+0x22>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3304      	adds	r3, #4
 8000448:	60bb      	str	r3, [r7, #8]

	(*configReg) &= ~(0xF << GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO ));
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff86 	bl	8000360 <GET_CRLH_POSITION>
 8000454:	4603      	mov	r3, r0
 8000456:	461a      	mov	r2, r3
 8000458:	230f      	movs	r3, #15
 800045a:	4093      	lsls	r3, r2
 800045c:	43da      	mvns	r2, r3
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	401a      	ands	r2, r3
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	601a      	str	r2, [r3, #0]

	//Pin is output

	if( (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	789b      	ldrb	r3, [r3, #2]
 800046c:	2b04      	cmp	r3, #4
 800046e:	d00b      	beq.n	8000488 <MCAL_GPIO_Init+0x62>
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	789b      	ldrb	r3, [r3, #2]
 8000474:	2b05      	cmp	r3, #5
 8000476:	d007      	beq.n	8000488 <MCAL_GPIO_Init+0x62>
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	789b      	ldrb	r3, [r3, #2]
 800047c:	2b07      	cmp	r3, #7
 800047e:	d003      	beq.n	8000488 <MCAL_GPIO_Init+0x62>
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	789b      	ldrb	r3, [r3, #2]
 8000484:	2b06      	cmp	r3, #6
 8000486:	d11c      	bne.n	80004c2 <MCAL_GPIO_Init+0x9c>
 	{
		PIN_config= ( (( (PINconfig->GPIO_MODE -4) <<2 ) | (PINconfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	789b      	ldrb	r3, [r3, #2]
 800048c:	3b04      	subs	r3, #4
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	b25a      	sxtb	r2, r3
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	78db      	ldrb	r3, [r3, #3]
 8000496:	b25b      	sxtb	r3, r3
 8000498:	4313      	orrs	r3, r2
 800049a:	b25b      	sxtb	r3, r3
 800049c:	b2db      	uxtb	r3, r3
 800049e:	f003 030f 	and.w	r3, r3, #15
 80004a2:	73fb      	strb	r3, [r7, #15]
		(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 80004a4:	7bfc      	ldrb	r4, [r7, #15]
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff58 	bl	8000360 <GET_CRLH_POSITION>
 80004b0:	4603      	mov	r3, r0
 80004b2:	fa04 f203 	lsl.w	r2, r4, r3
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	431a      	orrs	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	e056      	b.n	8000570 <MCAL_GPIO_Init+0x14a>


	//Pin is input
	else //Mode = 00: Input mode (reset state)
	{
		if ( (PINconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PINconfig->GPIO_MODE == GPIO_MODE_ANALOG))
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d003      	beq.n	80004d2 <MCAL_GPIO_Init+0xac>
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	789b      	ldrb	r3, [r3, #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d115      	bne.n	80004fe <MCAL_GPIO_Init+0xd8>
		{
			//Set CNF8[1:0] MODE8[1:0] 00
			PIN_config = (( ( (PINconfig->GPIO_MODE) <<2 ) | 0x0) & 0x0F);
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	f003 030f 	and.w	r3, r3, #15
 80004de:	73fb      	strb	r3, [r7, #15]
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 80004e0:	7bfc      	ldrb	r4, [r7, #15]
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff3a 	bl	8000360 <GET_CRLH_POSITION>
 80004ec:	4603      	mov	r3, r0
 80004ee:	fa04 f203 	lsl.w	r2, r4, r3
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	431a      	orrs	r2, r3
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	e038      	b.n	8000570 <MCAL_GPIO_Init+0x14a>

		}
		else if (PINconfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	2b08      	cmp	r3, #8
 8000504:	d110      	bne.n	8000528 <MCAL_GPIO_Init+0x102>
		{
			PIN_config = (( (GPIO_MODE_INPUT_FLOATING <<2 ) | 0x0) & 0x0F);
 8000506:	2304      	movs	r3, #4
 8000508:	73fb      	strb	r3, [r7, #15]
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 800050a:	7bfc      	ldrb	r4, [r7, #15]
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff25 	bl	8000360 <GET_CRLH_POSITION>
 8000516:	4603      	mov	r3, r0
 8000518:	fa04 f203 	lsl.w	r2, r4, r3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	431a      	orrs	r2, r3
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	e023      	b.n	8000570 <MCAL_GPIO_Init+0x14a>

		}

		else
		{
			PIN_config = (( (GPIO_MODE_INPUT_PU <<2 ) | 0x0) & 0x0F);
 8000528:	2308      	movs	r3, #8
 800052a:	73fb      	strb	r3, [r7, #15]
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 800052c:	7bfc      	ldrb	r4, [r7, #15]
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff14 	bl	8000360 <GET_CRLH_POSITION>
 8000538:	4603      	mov	r3, r0
 800053a:	fa04 f203 	lsl.w	r2, r4, r3
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	431a      	orrs	r2, r3
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	601a      	str	r2, [r3, #0]

			if (PINconfig->GPIO_MODE == GPIO_MODE_INPUT_PU )
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	789b      	ldrb	r3, [r3, #2]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d107      	bne.n	8000560 <MCAL_GPIO_Init+0x13a>
			{
				//PxODR = 1 INPUT pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |= (PINconfig->GPIO_PIN_NO);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	8812      	ldrh	r2, [r2, #0]
 8000558:	431a      	orrs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	e007      	b.n	8000570 <MCAL_GPIO_Init+0x14a>
			}
			else
			{
				//PxODR = 0 INPUT pull-down Table 20. Port bit configuration table
				GPIOx->ODR &= ~ (PINconfig->GPIO_PIN_NO);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	8812      	ldrh	r2, [r2, #0]
 8000568:	43d2      	mvns	r2, r2
 800056a:	401a      	ands	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	60da      	str	r2, [r3, #12]
			}

		}
	}
	(*configReg) |= ( (PIN_config) << GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO ));
 8000570:	7bfc      	ldrb	r4, [r7, #15]
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fef2 	bl	8000360 <GET_CRLH_POSITION>
 800057c:	4603      	mov	r3, r0
 800057e:	fa04 f203 	lsl.w	r2, r4, r3
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	431a      	orrs	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	601a      	str	r2, [r3, #0]
	//if pin is input


}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bd90      	pop	{r4, r7, pc}

08000594 <MCAL_GPIO_SET_PIN_OUTPUT>:

}


void MCAL_GPIO_SET_PIN_OUTPUT(GPIO_Typedef *GPIOx, uint16_t PIN, uint8_t MODE, uint8_t SPEED)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	4608      	mov	r0, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	461a      	mov	r2, r3
 80005a2:	4603      	mov	r3, r0
 80005a4:	807b      	strh	r3, [r7, #2]
 80005a6:	460b      	mov	r3, r1
 80005a8:	707b      	strb	r3, [r7, #1]
 80005aa:	4613      	mov	r3, r2
 80005ac:	703b      	strb	r3, [r7, #0]
    PinConfig.GPIO_PIN_NO = PIN;
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <MCAL_GPIO_SET_PIN_OUTPUT+0x3c>)
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	8013      	strh	r3, [r2, #0]
    PinConfig.GPIO_MODE = MODE;
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <MCAL_GPIO_SET_PIN_OUTPUT+0x3c>)
 80005b6:	787b      	ldrb	r3, [r7, #1]
 80005b8:	7093      	strb	r3, [r2, #2]
    PinConfig.GPIO_OUTPUT_SPEED = SPEED;
 80005ba:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <MCAL_GPIO_SET_PIN_OUTPUT+0x3c>)
 80005bc:	783b      	ldrb	r3, [r7, #0]
 80005be:	70d3      	strb	r3, [r2, #3]
    MCAL_GPIO_Init(GPIOx, &PinConfig);
 80005c0:	4903      	ldr	r1, [pc, #12]	; (80005d0 <MCAL_GPIO_SET_PIN_OUTPUT+0x3c>)
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f7ff ff2f 	bl	8000426 <MCAL_GPIO_Init>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000c8 	.word	0x200000c8

080005d4 <I2C_Get_FlagStatus>:
//-------------------------------------------------
// GENERIC APIs
//-------------------------------------------------

I2C_Flagstatus I2C_Get_FlagStatus(I2C_Typedef *I2Cx, Status Flag)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
    // vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
    uint32_t Flag_1 = 0, Flag_2 = 0, Last_Event;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
    I2C_Flagstatus Bit_Status = RESET;
 80005e6:	2300      	movs	r3, #0
 80005e8:	75fb      	strb	r3, [r7, #23]

    switch (Flag)
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d026      	beq.n	800063e <I2C_Get_FlagStatus+0x6a>
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d804      	bhi.n	80005fe <I2C_Get_FlagStatus+0x2a>
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00a      	beq.n	800060e <I2C_Get_FlagStatus+0x3a>
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d014      	beq.n	8000626 <I2C_Get_FlagStatus+0x52>
            Bit_Status = RESET;
        break;
    }

    default:
        break;
 80005fc:	e05c      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
    switch (Flag)
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d035      	beq.n	800066e <I2C_Get_FlagStatus+0x9a>
 8000602:	2b04      	cmp	r3, #4
 8000604:	d327      	bcc.n	8000656 <I2C_Get_FlagStatus+0x82>
 8000606:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <I2C_Get_FlagStatus+0xf0>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d03c      	beq.n	8000686 <I2C_Get_FlagStatus+0xb2>
        break;
 800060c:	e054      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
        if ((I2Cx->SR2) & (I2C_SR2_BUSY))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <I2C_Get_FlagStatus+0x4c>
            Bit_Status = SET;
 800061a:	2301      	movs	r3, #1
 800061c:	75fb      	strb	r3, [r7, #23]
        break;
 800061e:	e04b      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
            Bit_Status = RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	75fb      	strb	r3, [r7, #23]
        break;
 8000624:	e048      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
        if ((I2Cx->SR1) & (I2C_SR1_SB))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <I2C_Get_FlagStatus+0x64>
            Bit_Status = SET;
 8000632:	2301      	movs	r3, #1
 8000634:	75fb      	strb	r3, [r7, #23]
        break;
 8000636:	e03f      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
            Bit_Status = RESET;
 8000638:	2300      	movs	r3, #0
 800063a:	75fb      	strb	r3, [r7, #23]
        break;
 800063c:	e03c      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
        if ((I2Cx->SR1) & (I2C_SR1_ADDR))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <I2C_Get_FlagStatus+0x7c>
            Bit_Status = SET;
 800064a:	2301      	movs	r3, #1
 800064c:	75fb      	strb	r3, [r7, #23]
        break;
 800064e:	e033      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
            Bit_Status = RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	75fb      	strb	r3, [r7, #23]
        break;
 8000654:	e030      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
        if ((I2Cx->SR1) & (I2C_SR1_TXE))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800065e:	2b00      	cmp	r3, #0
 8000660:	d002      	beq.n	8000668 <I2C_Get_FlagStatus+0x94>
            Bit_Status = SET;
 8000662:	2301      	movs	r3, #1
 8000664:	75fb      	strb	r3, [r7, #23]
        break;
 8000666:	e027      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
            Bit_Status = RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	75fb      	strb	r3, [r7, #23]
        break;
 800066c:	e024      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
        if ((I2Cx->SR1) & (I2C_SR1_RXNE))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <I2C_Get_FlagStatus+0xac>
            Bit_Status = SET;
 800067a:	2301      	movs	r3, #1
 800067c:	75fb      	strb	r3, [r7, #23]
        break;
 800067e:	e01b      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
            Bit_Status = RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
        break;
 8000684:	e018      	b.n	80006b8 <I2C_Get_FlagStatus+0xe4>
        Flag_1 = Master_Transmitter_Event & (0x0000FFFF);
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	613b      	str	r3, [r7, #16]
        Flag_2 = Master_Transmitter_Event >> 16;
 800068a:	2307      	movs	r3, #7
 800068c:	60fb      	str	r3, [r7, #12]
        Last_Event = ((I2Cx->SR1 & Flag_1) | ((I2Cx->SR2 & Flag_2) << 16));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	401a      	ands	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6999      	ldr	r1, [r3, #24]
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	400b      	ands	r3, r1
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4313      	orrs	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
        if (Last_Event == Flag)
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d102      	bne.n	80006b2 <I2C_Get_FlagStatus+0xde>
            Bit_Status = SET;
 80006ac:	2301      	movs	r3, #1
 80006ae:	75fb      	strb	r3, [r7, #23]
        break;
 80006b0:	e001      	b.n	80006b6 <I2C_Get_FlagStatus+0xe2>
            Bit_Status = RESET;
 80006b2:	2300      	movs	r3, #0
 80006b4:	75fb      	strb	r3, [r7, #23]
        break;
 80006b6:	bf00      	nop
    }
    return Bit_Status;
 80006b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	371c      	adds	r7, #28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	00070080 	.word	0x00070080

080006c8 <I2C_Generate_Start>:

void I2C_Generate_Start(I2C_Typedef *I2Cx, START_Condition Start, Functional_State State)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
 80006d4:	4613      	mov	r3, r2
 80006d6:	70bb      	strb	r3, [r7, #2]
    /* Check the type of start (Start or Repeated Start) */
    if (Start != Repeated_START)
 80006d8:	78fb      	ldrb	r3, [r7, #3]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d007      	beq.n	80006ee <I2C_Generate_Start+0x26>
    {
        /* Check if the bus is idle */
        while (I2C_Get_FlagStatus(I2Cx, BUS_BUSY));
 80006de:	bf00      	nop
 80006e0:	2100      	movs	r1, #0
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff76 	bl	80005d4 <I2C_Get_FlagStatus>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1f8      	bne.n	80006e0 <I2C_Generate_Start+0x18>
        1: Repeated start generation
        In Slave mode:
        0: No Start generation
        1: Start generation when the bus is free
     */
    if (State != Disable)
 80006ee:	78bb      	ldrb	r3, [r7, #2]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d006      	beq.n	8000702 <I2C_Generate_Start+0x3a>
    {
        /* Generate a START condition */
        I2Cx->CR1 |= I2C_CR1_START;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	601a      	str	r2, [r3, #0]
    else
    {
        /* Disable the START condition generation */
        I2Cx->CR1 &= ~(I2C_CR1_START);
    }
}
 8000700:	e005      	b.n	800070e <I2C_Generate_Start+0x46>
        I2Cx->CR1 &= ~(I2C_CR1_START);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <I2C_Send_Address>:

void I2C_Send_Address(I2C_Typedef *I2Cx, uint16_t Device_Address, I2C_Direction Direction)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	807b      	strh	r3, [r7, #2]
 8000722:	4613      	mov	r3, r2
 8000724:	707b      	strb	r3, [r7, #1]
    /* Support 7-bit address mode only */
    if (Direction == Receiver)
 8000726:	787b      	ldrb	r3, [r7, #1]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d107      	bne.n	800073c <I2C_Send_Address+0x26>
    {
        /* Set the address bit 0 for read */
        I2Cx->DR = ((Device_Address << 1) | (0x01));
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	611a      	str	r2, [r3, #16]
    else if (Direction == Transmitter)
    {
        /* Reset the address bit 0 for write */
        I2Cx->DR = (Device_Address << 1);
    }
}
 800073a:	e007      	b.n	800074c <I2C_Send_Address+0x36>
    else if (Direction == Transmitter)
 800073c:	787b      	ldrb	r3, [r7, #1]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d104      	bne.n	800074c <I2C_Send_Address+0x36>
        I2Cx->DR = (Device_Address << 1);
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	611a      	str	r2, [r3, #16]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <I2C_Stop>:

void I2C_Stop(I2C_Typedef *I2Cx, Functional_State State)
{
 8000756:	b480      	push	{r7}
 8000758:	b083      	sub	sp, #12
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	460b      	mov	r3, r1
 8000760:	70fb      	strb	r3, [r7, #3]
    if (State == Enable)
 8000762:	78fb      	ldrb	r3, [r7, #3]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d106      	bne.n	8000776 <I2C_Stop+0x20>
    {
        /* Generate a stop condition, Enable stop bit */
        I2Cx->CR1 |= (I2C_CR1_STOP);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
    else
    {
        /* Disable the stop condition generation, Disable stop bit */
        I2Cx->CR1 &= ~(I2C_CR1_STOP);
    }
}
 8000774:	e005      	b.n	8000782 <I2C_Stop+0x2c>
        I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <I2C_ACKConfig>:

void I2C_ACKConfig(I2C_Typedef *I2Cx, Functional_State State)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	70fb      	strb	r3, [r7, #3]
    if (State == Enable)
 8000798:	78fb      	ldrb	r3, [r7, #3]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d106      	bne.n	80007ac <I2C_ACKConfig+0x20>
    {
        /* Enable Automatic ACK */
        I2Cx->CR1 |= (I2C_CR1_ACK);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
    else
    {
        /* Disable Automatic ACK */
        I2Cx->CR1 &= ~(I2C_CR1_ACK);
    }
}
 80007aa:	e005      	b.n	80007b8 <I2C_ACKConfig+0x2c>
        I2Cx->CR1 &= ~(I2C_CR1_ACK);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	601a      	str	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <I2C1_EV_IRQHandler>:
// IRQ Function Definitions
//-------------------------------------------------


void I2C1_EV_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
    // vuint32_t Dummy_Read = 0; // Volatile for compiler optimization

    /* Interrupt handling for both master and slave mode of the device */
    uint32_t Temp_1, Temp_2, Temp_3;

    Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN)); // Event interrupt enable
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007d2:	60fb      	str	r3, [r7, #12]
    Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN)); // Buffer interrupt enable
 80007d4:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007dc:	60bb      	str	r3, [r7, #8]
    Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));   // Stop detection (slave mode)
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	607b      	str	r3, [r7, #4]

    /* Handle Stop Condition Event */
    if (Temp_1 && Temp_3)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d00a      	beq.n	8000804 <I2C1_EV_IRQHandler+0x40>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <I2C1_EV_IRQHandler+0x40>
    {
        /* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
         * i have already read SR1 in Temp_3
         * then next statement i write to CR1
         */
        I2C1->CR1 |= 0x0000;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 80007f6:	4a2e      	ldr	r2, [pc, #184]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6013      	str	r3, [r2, #0]
        G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_STOP);
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <I2C1_EV_IRQHandler+0xf0>)
 80007fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000800:	2000      	movs	r0, #0
 8000802:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle Received address matched. */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR)); // ADDR
 8000804:	4b2a      	ldr	r3, [pc, #168]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	f003 0302 	and.w	r3, r3, #2
 800080c:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_3)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d00c      	beq.n	800082e <I2C1_EV_IRQHandler+0x6a>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d009      	beq.n	800082e <I2C1_EV_IRQHandler+0x6a>
         */
        // Dummy_Read  = I2C1->SR1;
        // Dummy_Read  = I2C1->SR2;

        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 800081a:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	d103      	bne.n	800082e <I2C1_EV_IRQHandler+0x6a>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_ADD_MATCHED);
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <I2C1_EV_IRQHandler+0xf0>)
 8000828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082a:	2001      	movs	r0, #1
 800082c:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE)); // TXE
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_2 && Temp_3)       // In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d015      	beq.n	800086a <I2C1_EV_IRQHandler+0xa6>
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d012      	beq.n	800086a <I2C1_EV_IRQHandler+0xa6>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00f      	beq.n	800086a <I2C1_EV_IRQHandler+0xa6>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 800084a:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d109      	bne.n	800086a <I2C1_EV_IRQHandler+0xa6>
        }
        else
        {
            /* Slave mode */
            /* Check if slave in transmit mode */
            if (I2C1->SR2 & (I2C_SR2_TRA)) // TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <I2C1_EV_IRQHandler+0xa6>
            {
                G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_REQ);
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <I2C1_EV_IRQHandler+0xf0>)
 8000864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000866:	2002      	movs	r0, #2
 8000868:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE)); // RXNE
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_2 && Temp_3)        // In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d015      	beq.n	80008a6 <I2C1_EV_IRQHandler+0xe2>
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d012      	beq.n	80008a6 <I2C1_EV_IRQHandler+0xe2>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00f      	beq.n	80008a6 <I2C1_EV_IRQHandler+0xe2>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <I2C1_EV_IRQHandler+0xe2>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            if (!(I2C1->SR2 & (I2C_SR2_TRA))) // TRA: Transmitter/receiver: 0: Data bytes received
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <I2C1_EV_IRQHandler+0xec>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	2b00      	cmp	r3, #0
 800089c:	d103      	bne.n	80008a6 <I2C1_EV_IRQHandler+0xe2>
            {
                G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_RCV);
 800089e:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <I2C1_EV_IRQHandler+0xf0>)
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	2003      	movs	r0, #3
 80008a4:	4798      	blx	r3
            }
        }
    }
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40005400 	.word	0x40005400
 80008b4:	2000001c 	.word	0x2000001c

080008b8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <MCAL_I2C_INIT>:
 * @retval 			- None
 * Note 			- Supported for I2C SM mode only
 * 					- Support only 7-bit address mode
 */
void MCAL_I2C_INIT(I2C_Typedef *I2Cx, I2C_Config_t *I2C_Config)
{
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
    uint16_t Temp_Register = 0, Freq_Range = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	82fb      	strh	r3, [r7, #22]
 80008ea:	2300      	movs	r3, #0
 80008ec:	82bb      	strh	r3, [r7, #20]
    uint32_t Pclk1 = 8000000;
 80008ee:	4b7e      	ldr	r3, [pc, #504]	; (8000ae8 <MCAL_I2C_INIT+0x20c>)
 80008f0:	613b      	str	r3, [r7, #16]
    uint16_t Result = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	81fb      	strh	r3, [r7, #14]

    /* 1. Enable the RCC Clock */
    if (I2Cx == I2C1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a7c      	ldr	r2, [pc, #496]	; (8000aec <MCAL_I2C_INIT+0x210>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d112      	bne.n	8000924 <MCAL_I2C_INIT+0x48>
    {
        /* If I2C1 Put all configurations in the global configuration */
        G_I2C_Config[I2C1_Index] = *I2C_Config;
 80008fe:	4a7c      	ldr	r2, [pc, #496]	; (8000af0 <MCAL_I2C_INIT+0x214>)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	4614      	mov	r4, r2
 8000904:	461d      	mov	r5, r3
 8000906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000908:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000912:	e884 0003 	stmia.w	r4, {r0, r1}

        /* Open the I2C1 RCC Clock */
        RCC_I2C1_CLK_EN();
 8000916:	4b77      	ldr	r3, [pc, #476]	; (8000af4 <MCAL_I2C_INIT+0x218>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a76      	ldr	r2, [pc, #472]	; (8000af4 <MCAL_I2C_INIT+0x218>)
 800091c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000920:	61d3      	str	r3, [r2, #28]
 8000922:	e016      	b.n	8000952 <MCAL_I2C_INIT+0x76>
    }
    else if (I2Cx == I2C2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a74      	ldr	r2, [pc, #464]	; (8000af8 <MCAL_I2C_INIT+0x21c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d112      	bne.n	8000952 <MCAL_I2C_INIT+0x76>
    {
        /* If I2C2 Put all configurations in the global configuration */
        G_I2C_Config[I2C2_Index] = *I2C_Config;
 800092c:	4b70      	ldr	r3, [pc, #448]	; (8000af0 <MCAL_I2C_INIT+0x214>)
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8000934:	4615      	mov	r5, r2
 8000936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000942:	e884 0003 	stmia.w	r4, {r0, r1}

        /* Open the I2C2 RCC Clock */
        RCC_I2C2_CLK_EN();
 8000946:	4b6b      	ldr	r3, [pc, #428]	; (8000af4 <MCAL_I2C_INIT+0x218>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a6a      	ldr	r2, [pc, #424]	; (8000af4 <MCAL_I2C_INIT+0x218>)
 800094c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000950:	61d3      	str	r3, [r2, #28]
    }

    /* ========================================================================================== */
    /* 2. Set I2C Mode */
    if (I2C_Config->Mode == I2C_MODE_I2C)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	691b      	ldr	r3, [r3, #16]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d17f      	bne.n	8000a5a <MCAL_I2C_INIT+0x17e>
        //Initialize Timing

        //I2C_CR2 -> Bits 5:0 FREQ[5:0]: Peripheral clock frequency

        /* 1. Get the I2Cx "CR2" Control register 2 Value */
        Temp_Register = I2Cx->CR2;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	82fb      	strh	r3, [r7, #22]

        /* 2. Clear frequency -> FREQ[5:0] bits */
        Temp_Register &= ~(I2C_CR2_FREQ_Msk); // (0x3FUL << 0)
 8000960:	8afb      	ldrh	r3, [r7, #22]
 8000962:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000966:	82fb      	strh	r3, [r7, #22]

        /* 3. Get Pclk1 frequency value */
        Pclk1 = MCAL_RCC_GET_PCLK1_FREQ();
 8000968:	f000 fa08 	bl	8000d7c <MCAL_RCC_GET_PCLK1_FREQ>
 800096c:	6138      	str	r0, [r7, #16]

        /* 4. Set frequency bits depending in Pclk1 value */
        Freq_Range = (uint16_t)(Pclk1 / 1000000);
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	4a62      	ldr	r2, [pc, #392]	; (8000afc <MCAL_I2C_INIT+0x220>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	82bb      	strh	r3, [r7, #20]

        /* 5. Move the configuration in the temp register to set it in the CR2 register */
        Temp_Register |= Freq_Range;
 800097a:	8afa      	ldrh	r2, [r7, #22]
 800097c:	8abb      	ldrh	r3, [r7, #20]
 800097e:	4313      	orrs	r3, r2
 8000980:	82fb      	strh	r3, [r7, #22]

        /* 6. Set the "CR2" register with our new value */
        I2Cx->CR2 = Temp_Register;
 8000982:	8afa      	ldrh	r2, [r7, #22]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]

        //Configure "I2C_CCR" Clock control register

        /* 7. Disable the selected I2C peripheral to configure time */
        I2Cx->CR1 &= ~(I2C_CR1_PE);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 0201 	bic.w	r2, r3, #1
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]

        /* 8. Put the temp register with zero ready to put data on it */
        Temp_Register = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	82fb      	strh	r3, [r7, #22]

        /* 9. Configure the speed in the standard mode / Fast Mode */
        if ((I2C_Config->Clock_Speed == I2C_CLOCK_SPEED_50KHZ) || (I2C_Config->Clock_Speed == I2C_CLOCK_SPEED_100KHZ))
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d004      	beq.n	80009ae <MCAL_I2C_INIT+0xd2>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a55      	ldr	r2, [pc, #340]	; (8000b00 <MCAL_I2C_INIT+0x224>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d112      	bne.n	80009d4 <MCAL_I2C_INIT+0xf8>
            /*
             * Tclk / 2 = CCR * Tpclk1
             * CCR = Tclk / (2 * Tpclk1)
             * CCR = Fpclk / (2 * I2C_Clk_Frequency)
             */
            Result = (uint16_t)(Pclk1 / (I2C_Config->Clock_Speed << 1));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ba:	81fb      	strh	r3, [r7, #14]

            /* 12. Move the configuration in the temp register to set it in the I2C_CCR register */
            Temp_Register |= Result;
 80009bc:	8afa      	ldrh	r2, [r7, #22]
 80009be:	89fb      	ldrh	r3, [r7, #14]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	82fb      	strh	r3, [r7, #22]

            /* 13. Set the "I2C_CCR" register with our new value */
            I2Cx->CCR = Temp_Register;
 80009c4:	8afa      	ldrh	r2, [r7, #22]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	61da      	str	r2, [r3, #28]
             * For instance: in Sm mode, the maximum allowed SCL rise time is 1000 ns.
             * If, in the I2C_CR2 register, the value of FREQ[5:0] bits is equal to 0x08 and TPCLK1 = 125 ns
             * therefore the TRISE[5:0] bits must be programmed with 09h.
             * (1000 ns / 125 ns = 8 + 1)
			 */
            I2Cx->TRISE = Freq_Range + 1;
 80009ca:	8abb      	ldrh	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	621a      	str	r2, [r3, #32]
        /* ========================================================================================== */

        //Configure "I2C_CR1" CTRL register

        /* 1. Get the I2C CR1 value */
        Temp_Register = I2Cx->CR1;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	82fb      	strh	r3, [r7, #22]

        /* 2. Set All configuration to the temp register  */
        Temp_Register |= (uint16_t)(I2C_Config->ACK_Control | I2C_Config->General_Call | I2C_Config->Mode | I2C_Config->Stretch_Mode);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4313      	orrs	r3, r2
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	8afb      	ldrh	r3, [r7, #22]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	82fb      	strh	r3, [r7, #22]

        /* 3. Set the "I2C_CR1" register with our new value */
        I2Cx->CR1 = Temp_Register;
 8000a04:	8afa      	ldrh	r2, [r7, #22]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
        /* ========================================================================================== */

        //Configure "I2C_OAR" Own address registers

        /* 1. Put the temp register with zero ready to put data on it */
        Temp_Register = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	82fb      	strh	r3, [r7, #22]

        /* 2. Check the Slave_Address type & Configure depends on it */
        if (I2C_Config->Slave_Address.Enable_Dual_Address == 1)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d10d      	bne.n	8000a32 <MCAL_I2C_INIT+0x156>
        {
            /* 1. Enable the Dual addressing mode */
            Temp_Register = I2C_OAR2_ENDUAL;
 8000a16:	2301      	movs	r3, #1
 8000a18:	82fb      	strh	r3, [r7, #22]
            /* 2. Put the input Second address form the user to the register */
            /*
             * Bits 7:1 ADD2[7:1]: Interface address
             * 		bits 7:1 of address in dual addressing mode
             */
            Temp_Register |= I2C_Config->Slave_Address.Slave_Second_Address << I2C_OAR2_ADD2_Pos; // Shifting with the first bit in the register
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	7f5b      	ldrb	r3, [r3, #29]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	b21a      	sxth	r2, r3
 8000a22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b21b      	sxth	r3, r3
 8000a2a:	82fb      	strh	r3, [r7, #22]

            /* 3. Set the "I2C_OAR2" register with our new value */
            I2Cx->OAR2 = Temp_Register;
 8000a2c:	8afa      	ldrh	r2, [r7, #22]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60da      	str	r2, [r3, #12]
        }


        /* 4. Put the temp register with zero ready to put data on it */
        Temp_Register = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	82fb      	strh	r3, [r7, #22]

        /* 5. Put the input First address form the user to the register */
        Temp_Register |= I2C_Config->Slave_Address.Slave_First_Address << 1;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	7f1b      	ldrb	r3, [r3, #28]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	82fb      	strh	r3, [r7, #22]

        /* 6. Configure ADDMODE Addressing mode (slave mode) */
        Temp_Register |= I2C_Config->Slave_Address.Slave_Address_Mode;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	8afb      	ldrh	r3, [r7, #22]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	82fb      	strh	r3, [r7, #22]

        /* 7. Set the "I2C_OAR1" register with our new value */
        I2Cx->OAR1 = Temp_Register;
 8000a54:	8afa      	ldrh	r2, [r7, #22]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	609a      	str	r2, [r3, #8]
        /* Not support I2C_MODE_SMBUS*/
    }

    /* ========================================================================================== */
    /* 3. Interrupt mode (Slave Mode) ==> Check the callback pointer != NULL */
    if (I2C_Config->P_Slave_CallBack != NULL) // That enable slave IRQ states mode
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d038      	beq.n	8000ad4 <MCAL_I2C_INIT+0x1f8>
    {
        /* 1. Enable IRQ */
        I2Cx->CR2 |= (I2C_CR2_ITERREN); // Error interrupt enable
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	605a      	str	r2, [r3, #4]
        I2Cx->CR2 |= (I2C_CR2_ITEVTEN); // Event interrupt enable
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	605a      	str	r2, [r3, #4]
        I2Cx->CR2 |= (I2C_CR2_ITBUFEN); // Buffer interrupt enable
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	605a      	str	r2, [r3, #4]

        /* 2. Enable IRQ in NVIC */
        if (I2Cx == I2C1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <MCAL_I2C_INIT+0x210>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d10c      	bne.n	8000aa8 <MCAL_I2C_INIT+0x1cc>
        {
        	NVIC_IRQ31_I2C1_EV_ENABLE;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MCAL_I2C_INIT+0x228>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <MCAL_I2C_INIT+0x228>)
 8000a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a98:	6013      	str	r3, [r2, #0]
        	NVIC_IRQ32_I2C1_ER_ENABLE;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MCAL_I2C_INIT+0x22c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a1a      	ldr	r2, [pc, #104]	; (8000b08 <MCAL_I2C_INIT+0x22c>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e00f      	b.n	8000ac8 <MCAL_I2C_INIT+0x1ec>
        }
        else if (I2Cx == I2C2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MCAL_I2C_INIT+0x21c>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d10b      	bne.n	8000ac8 <MCAL_I2C_INIT+0x1ec>
        {
        	NVIC_IRQ33_I2C2_EV_ENABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MCAL_I2C_INIT+0x22c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <MCAL_I2C_INIT+0x22c>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	6013      	str	r3, [r2, #0]
        	NVIC_IRQ34_I2C2_ER_ENABLE;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MCAL_I2C_INIT+0x22c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <MCAL_I2C_INIT+0x22c>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6013      	str	r3, [r2, #0]
        }

        /* 3. Put the status registers with zero */
        I2Cx->SR1 = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
        I2Cx->SR2 = 0;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
    }

    /* 4. Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ae8:	007a1200 	.word	0x007a1200
 8000aec:	40005400 	.word	0x40005400
 8000af0:	2000001c 	.word	0x2000001c
 8000af4:	40021000 	.word	0x40021000
 8000af8:	40005800 	.word	0x40005800
 8000afc:	431bde83 	.word	0x431bde83
 8000b00:	000186a0 	.word	0x000186a0
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000e104 	.word	0xe000e104

08000b0c <MCAL_I2C_GPIO_SET_PINS>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for I2C SM MODE only
 */
void MCAL_I2C_GPIO_SET_PINS(I2C_Typedef *I2Cx)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    /* Depending the recommendation in data sheet -> Table 27. I2C 	*/
    /*  "I2C pin-out"    "Configuration"     "GPIO configuration" 	*/
    if (I2Cx == I2C1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <MCAL_I2C_GPIO_SET_PINS+0x58>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d10c      	bne.n	8000b36 <MCAL_I2C_GPIO_SET_PINS+0x2a>
    {
        /* PB6 : I2C1_SCL */
        MCAL_GPIO_SET_PIN_OUTPUT(GPIOB, GPIO_PIN6,GPIO_MODE_OUTPUT_AF_OD, GPIO_SPEED_10MHZ);
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	2207      	movs	r2, #7
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MCAL_I2C_GPIO_SET_PINS+0x5c>)
 8000b24:	f7ff fd36 	bl	8000594 <MCAL_GPIO_SET_PIN_OUTPUT>
        /* PB7 : I2C1_SDA */
        MCAL_GPIO_SET_PIN_OUTPUT(GPIOB, GPIO_PIN7,GPIO_MODE_OUTPUT_AF_OD, GPIO_SPEED_10MHZ);
 8000b28:	2301      	movs	r3, #1
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	2180      	movs	r1, #128	; 0x80
 8000b2e:	480e      	ldr	r0, [pc, #56]	; (8000b68 <MCAL_I2C_GPIO_SET_PINS+0x5c>)
 8000b30:	f7ff fd30 	bl	8000594 <MCAL_GPIO_SET_PIN_OUTPUT>
        MCAL_GPIO_SET_PIN_OUTPUT(GPIOB, GPIO_PIN10,GPIO_MODE_OUTPUT_AF_OD, GPIO_SPEED_10MHZ);

        /* PB11 : I2C2_SDA */
        MCAL_GPIO_SET_PIN_OUTPUT(GPIOB, GPIO_PIN11,GPIO_MODE_OUTPUT_AF_OD, GPIO_SPEED_10MHZ);
    }
}
 8000b34:	e011      	b.n	8000b5a <MCAL_I2C_GPIO_SET_PINS+0x4e>
    else if (I2Cx == I2C2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <MCAL_I2C_GPIO_SET_PINS+0x60>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10d      	bne.n	8000b5a <MCAL_I2C_GPIO_SET_PINS+0x4e>
        MCAL_GPIO_SET_PIN_OUTPUT(GPIOB, GPIO_PIN10,GPIO_MODE_OUTPUT_AF_OD, GPIO_SPEED_10MHZ);
 8000b3e:	2301      	movs	r3, #1
 8000b40:	2207      	movs	r2, #7
 8000b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MCAL_I2C_GPIO_SET_PINS+0x5c>)
 8000b48:	f7ff fd24 	bl	8000594 <MCAL_GPIO_SET_PIN_OUTPUT>
        MCAL_GPIO_SET_PIN_OUTPUT(GPIOB, GPIO_PIN11,GPIO_MODE_OUTPUT_AF_OD, GPIO_SPEED_10MHZ);
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	2207      	movs	r2, #7
 8000b50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MCAL_I2C_GPIO_SET_PINS+0x5c>)
 8000b56:	f7ff fd1d 	bl	8000594 <MCAL_GPIO_SET_PIN_OUTPUT>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40005400 	.word	0x40005400
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40005800 	.word	0x40005800

08000b70 <MCAL_I2C_MASTER_TX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_MASTER_TX(I2C_Typedef *I2Cx, uint16_t Device_Address, uint8_t *pTxData, uint8_t Data_Length, STOP_Condition Stop, START_Condition Start)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	817b      	strh	r3, [r7, #10]
 8000b80:	4613      	mov	r3, r2
 8000b82:	727b      	strb	r3, [r7, #9]
    int i = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
    /* TODO Support timeout (configure timer working for specific duration rise interrupt)
     * TODO Timer_interrupt(){flag =}
     * TODO so any code exist in while (check flag || any polling conditions)
     */
    /* 1. Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master */
    I2C_Generate_Start(I2Cx, Start, Enable);
 8000b88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fd99 	bl	80006c8 <I2C_Generate_Start>

    /* 2. Wait for EV5 */
    /* EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address. */
    while (!(I2C_Get_FlagStatus(I2Cx, SB)))
 8000b96:	bf00      	nop
 8000b98:	2101      	movs	r1, #1
 8000b9a:	68f8      	ldr	r0, [r7, #12]
 8000b9c:	f7ff fd1a 	bl	80005d4 <I2C_Get_FlagStatus>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0f8      	beq.n	8000b98 <MCAL_I2C_MASTER_TX+0x28>
        ;

    /* 3. Writing DR register with Address, Send Address */
    I2C_Send_Address(I2Cx, Device_Address, Transmitter);
 8000ba6:	897b      	ldrh	r3, [r7, #10]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	68f8      	ldr	r0, [r7, #12]
 8000bae:	f7ff fdb2 	bl	8000716 <I2C_Send_Address>

    /* 4. Wait for EV6 */
    /* EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2. */
    while (!(I2C_Get_FlagStatus(I2Cx, ADDR)))
 8000bb2:	bf00      	nop
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f7ff fd0c 	bl	80005d4 <I2C_Get_FlagStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f8      	beq.n	8000bb4 <MCAL_I2C_MASTER_TX+0x44>
        ;

    /* 5. Wait for EV8_1 */
    /* EV8_1: TxE=1, shift register empty, data register empty, write Data1 in DR. */
    /* Check for TRA: Transmitter/receiver, BUSY: Bus busy, MSL: Master/slave, TxE Flags */
    while (!(I2C_Get_FlagStatus(I2Cx, Master_Transmitter_Event)))
 8000bc2:	bf00      	nop
 8000bc4:	4915      	ldr	r1, [pc, #84]	; (8000c1c <MCAL_I2C_MASTER_TX+0xac>)
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f7ff fd04 	bl	80005d4 <I2C_Get_FlagStatus>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d0f8      	beq.n	8000bc4 <MCAL_I2C_MASTER_TX+0x54>
        ;

    /* Loop inside the data ready to send it */
    for (i = 0; i < Data_Length; ++i)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e011      	b.n	8000bfc <MCAL_I2C_MASTER_TX+0x8c>
    {
        /* 6. Write in the DR register the data to be sent */
        I2Cx->DR = pTxData[i];
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	611a      	str	r2, [r3, #16]

        /* 7. Wait for EV8 */
        /* EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register. */
        while (!(I2C_Get_FlagStatus(I2Cx, TXE)))
 8000be6:	bf00      	nop
 8000be8:	2103      	movs	r1, #3
 8000bea:	68f8      	ldr	r0, [r7, #12]
 8000bec:	f7ff fcf2 	bl	80005d4 <I2C_Get_FlagStatus>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f8      	beq.n	8000be8 <MCAL_I2C_MASTER_TX+0x78>
    for (i = 0; i < Data_Length; ++i)
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	7a7b      	ldrb	r3, [r7, #9]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dbe9      	blt.n	8000bd8 <MCAL_I2C_MASTER_TX+0x68>
        /* 8. Wait for EV8 */
        /* EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition. */
    }

    /* 9. Send Stop Condition */
    if (Stop == With_STOP)
 8000c04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d103      	bne.n	8000c14 <MCAL_I2C_MASTER_TX+0xa4>
    {
        I2C_Stop(I2Cx, Enable);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff fda1 	bl	8000756 <I2C_Stop>
    }
}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	00070080 	.word	0x00070080

08000c20 <MCAL_I2C_MASTER_RX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_MASTER_RX(I2C_Typedef *I2Cx, uint16_t Device_Address, uint8_t *pRxData, uint8_t Data_Length, STOP_Condition Stop, START_Condition Start)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	817b      	strh	r3, [r7, #10]
 8000c30:	4613      	mov	r3, r2
 8000c32:	727b      	strb	r3, [r7, #9]
    int i = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

    uint8_t index = I2Cx == I2C1 ? I2C1_Index : I2C2_Index;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4a34      	ldr	r2, [pc, #208]	; (8000d0c <MCAL_I2C_MASTER_RX+0xec>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	74fb      	strb	r3, [r7, #19]
    /* TODO Support timeout (configure timer working for specific duration rise interrupt)
     * TODO Timer_interrupt(){flag =}
     * TODO so any code exist in while (check flag || any polling conditions)
     */
    /* 1. Set the start bit in the I2C_CR1 register to generate a start condition from this will start as master */
    I2C_Generate_Start(I2Cx, Start, Enable);
 8000c48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4619      	mov	r1, r3
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fd39 	bl	80006c8 <I2C_Generate_Start>

    /* 2. Wait for EV5 */
    /* EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address. */
    while (!(I2C_Get_FlagStatus(I2Cx, SB)))
 8000c56:	bf00      	nop
 8000c58:	2101      	movs	r1, #1
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff fcba 	bl	80005d4 <I2C_Get_FlagStatus>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f8      	beq.n	8000c58 <MCAL_I2C_MASTER_RX+0x38>
        ;

    /* 3. Writing DR register with Address, Send Address */
    I2C_Send_Address(I2Cx, Device_Address, Receiver);
 8000c66:	897b      	ldrh	r3, [r7, #10]
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f7ff fd52 	bl	8000716 <I2C_Send_Address>

    /* 4. Wait for EV6 */
    /* EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2. */
    while (!(I2C_Get_FlagStatus(I2Cx, ADDR)))
 8000c72:	bf00      	nop
 8000c74:	2102      	movs	r1, #2
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fcac 	bl	80005d4 <I2C_Get_FlagStatus>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f8      	beq.n	8000c74 <MCAL_I2C_MASTER_RX+0x54>
        ;

    /* 5. Enable Automatic ACK */
    /* To get ready to send ACK */
    I2C_ACKConfig(I2Cx, Enable);
 8000c82:	2101      	movs	r1, #1
 8000c84:	68f8      	ldr	r0, [r7, #12]
 8000c86:	f7ff fd81 	bl	800078c <I2C_ACKConfig>

    /* 6. Check if there is Data length available */
    if (Data_Length)
 8000c8a:	7a7b      	ldrb	r3, [r7, #9]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d018      	beq.n	8000cc2 <MCAL_I2C_MASTER_RX+0xa2>
    {
        /* 7. Loop inside the data to read it till length become zero */
        for (i = Data_Length; i > 1; i--)
 8000c90:	7a7b      	ldrb	r3, [r7, #9]
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e012      	b.n	8000cbc <MCAL_I2C_MASTER_RX+0x9c>
        {
            /* 8. Wait for EV7 */
            /* EV7: RxNE=1 cleared by reading DR register */
            while (!(I2C_Get_FlagStatus(I2Cx, RXNE)))
 8000c96:	bf00      	nop
 8000c98:	2104      	movs	r1, #4
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff fc9a 	bl	80005d4 <I2C_Get_FlagStatus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f8      	beq.n	8000c98 <MCAL_I2C_MASTER_RX+0x78>
                ;

            /* 9. Read the data in the DR register */
            *pRxData = I2Cx->DR;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	701a      	strb	r2, [r3, #0]

            /* 10. Go to next address */
            pRxData++;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	607b      	str	r3, [r7, #4]
        for (i = Data_Length; i > 1; i--)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	dce9      	bgt.n	8000c96 <MCAL_I2C_MASTER_RX+0x76>
    /* To generate the non-acknowledge pulse after the last received data byte, the ACK bit
        must be cleared just after reading the second last data byte (after second last RxNE
        event).
     */
    /* Send ---- > NACK */
    I2C_ACKConfig(I2Cx, Disable);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff fd61 	bl	800078c <I2C_ACKConfig>

    /* 12. Send Stop Condition */
    if (Stop == With_STOP)
 8000cca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d103      	bne.n	8000cda <MCAL_I2C_MASTER_RX+0xba>
    {
        I2C_Stop(I2Cx, Enable);
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f7ff fd3e 	bl	8000756 <I2C_Stop>
    }

    /* 13. Re-Enable the automatic ACK */
    if (G_I2C_Config[index].ACK_Control == I2C_ACK_CONTROL_ENABLE)
 8000cda:	7cfa      	ldrb	r2, [r7, #19]
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <MCAL_I2C_MASTER_RX+0xf0>)
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3314      	adds	r3, #20
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf0:	d104      	bne.n	8000cfc <MCAL_I2C_MASTER_RX+0xdc>
        I2C_ACKConfig(I2Cx, Enable);
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fd49 	bl	800078c <I2C_ACKConfig>
    else
        I2C_ACKConfig(I2Cx, Disable);
}
 8000cfa:	e003      	b.n	8000d04 <MCAL_I2C_MASTER_RX+0xe4>
        I2C_ACKConfig(I2Cx, Disable);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff fd44 	bl	800078c <I2C_ACKConfig>
}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	2000001c 	.word	0x2000001c

08000d14 <MCAL_RCC_GET_SYSCLK_FREQ>:
const uint8_t AHB_Prescalar[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8};//Shift 1 right == division by 2



uint32_t MCAL_RCC_GET_SYSCLK_FREQ()
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/

	switch ((RCC->CFGR >> 2 ) & 0b11)
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MCAL_RCC_GET_SYSCLK_FREQ+0x34>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	f003 0303 	and.w	r3, r3, #3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d006      	beq.n	8000d34 <MCAL_RCC_GET_SYSCLK_FREQ+0x20>
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d302      	bcc.n	8000d30 <MCAL_RCC_GET_SYSCLK_FREQ+0x1c>
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d004      	beq.n	8000d38 <MCAL_RCC_GET_SYSCLK_FREQ+0x24>
 8000d2e:	e005      	b.n	8000d3c <MCAL_RCC_GET_SYSCLK_FREQ+0x28>
	{
		case 0:
			return HSI_CLK;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MCAL_RCC_GET_SYSCLK_FREQ+0x38>)
 8000d32:	e004      	b.n	8000d3e <MCAL_RCC_GET_SYSCLK_FREQ+0x2a>
			break;
		case 1:
			return HSE_CLK;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MCAL_RCC_GET_SYSCLK_FREQ+0x3c>)
 8000d36:	e002      	b.n	8000d3e <MCAL_RCC_GET_SYSCLK_FREQ+0x2a>
			break;
		case 2:
			return 16000000;
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <MCAL_RCC_GET_SYSCLK_FREQ+0x3c>)
 8000d3a:	e000      	b.n	8000d3e <MCAL_RCC_GET_SYSCLK_FREQ+0x2a>

			break;

		default:
			return 0;
 8000d3c:	2300      	movs	r3, #0
			break;

		}
		return 0;
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	007a1200 	.word	0x007a1200
 8000d50:	00f42400 	.word	0x00f42400

08000d54 <MCAL_RCC_GET_HCLK_FREQ>:

uint32_t MCAL_RCC_GET_HCLK_FREQ()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GET_SYSCLK_FREQ() >> AHB_Prescalar[( (RCC->CFGR >> 4) & 0b111)] );
 8000d58:	f7ff ffdc 	bl	8000d14 <MCAL_RCC_GET_SYSCLK_FREQ>
 8000d5c:	4601      	mov	r1, r0
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <MCAL_RCC_GET_HCLK_FREQ+0x20>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <MCAL_RCC_GET_HCLK_FREQ+0x24>)
 8000d6a:	5cd3      	ldrb	r3, [r2, r3]
 8000d6c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000d70:	4618      	mov	r0, r3
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000
 8000d78:	08001004 	.word	0x08001004

08000d7c <MCAL_RCC_GET_PCLK1_FREQ>:
uint32_t MCAL_RCC_GET_PCLK1_FREQ()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	return ( MCAL_RCC_GET_HCLK_FREQ() >> APB_Prescalar[( (RCC->CFGR >> 8) & 0b111)] );
 8000d80:	f7ff ffe8 	bl	8000d54 <MCAL_RCC_GET_HCLK_FREQ>
 8000d84:	4601      	mov	r1, r0
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <MCAL_RCC_GET_PCLK1_FREQ+0x20>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	0a1b      	lsrs	r3, r3, #8
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <MCAL_RCC_GET_PCLK1_FREQ+0x24>)
 8000d92:	5cd3      	ldrb	r3, [r2, r3]
 8000d94:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	08000ffc 	.word	0x08000ffc

08000da4 <SPI1_IRQHandler>:
//-------------------------------------------------
// IRQ
//-------------------------------------------------

void SPI1_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;

	irq_src.TXE =  (SPI1->SR & (1<<1) >> 1 );
 8000daa:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <SPI1_IRQHandler+0x50>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	793b      	ldrb	r3, [r7, #4]
 8000db6:	f362 0300 	bfi	r3, r2, #0, #1
 8000dba:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE =  (SPI1->SR & (1<<0) >> 0 );
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <SPI1_IRQHandler+0x50>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	793b      	ldrb	r3, [r7, #4]
 8000dc8:	f362 0341 	bfi	r3, r2, #1, #1
 8000dcc:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI =  (SPI1->SR & (1<<4) >> 4 );
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <SPI1_IRQHandler+0x50>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	793b      	ldrb	r3, [r7, #4]
 8000dda:	f362 0382 	bfi	r3, r2, #2, #1
 8000dde:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_SPI_IRQ_CALLBACK(irq_src);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SPI1_IRQHandler+0x54>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	7938      	ldrb	r0, [r7, #4]
 8000de8:	4798      	blx	r3
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40013000 	.word	0x40013000
 8000df8:	2000006c 	.word	0x2000006c

08000dfc <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;

	irq_src.TXE = (SPI2->SR & (1<<1) >> 1 );
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <SPI2_IRQHandler+0x50>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	793b      	ldrb	r3, [r7, #4]
 8000e0e:	f362 0300 	bfi	r3, r2, #0, #1
 8000e12:	713b      	strb	r3, [r7, #4]
 	irq_src.RXNE = (SPI2->SR & (1<<0) >> 0 );
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SPI2_IRQHandler+0x50>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	793b      	ldrb	r3, [r7, #4]
 8000e20:	f362 0341 	bfi	r3, r2, #1, #1
 8000e24:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (SPI2->SR & (1<<4) >> 4 );
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <SPI2_IRQHandler+0x50>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	793b      	ldrb	r3, [r7, #4]
 8000e32:	f362 0382 	bfi	r3, r2, #2, #1
 8000e36:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_SPI_IRQ_CALLBACK(irq_src);
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SPI2_IRQHandler+0x54>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	7938      	ldrb	r0, [r7, #4]
 8000e40:	4798      	blx	r3
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40003800 	.word	0x40003800
 8000e50:	2000006c 	.word	0x2000006c

08000e54 <USART1_IRQHandler>:
	while( !(USARTx->SR & 1<< 6));
}

//ISR
void USART1_IRQHandler (void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <USART1_IRQHandler+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	4798      	blx	r3
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000074 	.word	0x20000074

08000e68 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 8000e6c:	4b02      	ldr	r3, [pc, #8]	; (8000e78 <USART2_IRQHandler+0x10>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	4798      	blx	r3

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000074 	.word	0x20000074

08000e7c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <USART3_IRQHandler+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	4798      	blx	r3

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000074 	.word	0x20000074

08000e90 <clock_init>:
#include "I2C_EEPROM_SLAVE/EEPROM.h"


void clock_init()

{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <clock_init+0x30>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <clock_init+0x30>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
	//Enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <clock_init+0x30>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <clock_init+0x30>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <clock_init+0x30>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <clock_init+0x30>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6193      	str	r3, [r2, #24]

}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <main>:



int main ()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

	//Test case 1


	clock_init();
 8000eca:	f7ff ffe1 	bl	8000e90 <clock_init>

	//Test case 1
	uint8_t ch1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000ece:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <main+0x78>)
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed8:	6018      	str	r0, [r3, #0]
 8000eda:	3304      	adds	r3, #4
 8000edc:	8019      	strh	r1, [r3, #0]
 8000ede:	3302      	adds	r3, #2
 8000ee0:	0c0a      	lsrs	r2, r1, #16
 8000ee2:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7]= {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_Init();
 8000eee:	f7ff f93f 	bl	8000170 <EEPROM_Init>
	EEPROM_Write_NBytes(0xAF, ch1, 7);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	20af      	movs	r0, #175	; 0xaf
 8000efc:	f7ff f958 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xAF, ch2, 7);
 8000f00:	463b      	mov	r3, r7
 8000f02:	2207      	movs	r2, #7
 8000f04:	4619      	mov	r1, r3
 8000f06:	20af      	movs	r0, #175	; 0xaf
 8000f08:	f7ff f9a4 	bl	8000254 <EEPROM_Read_Byte>


	//Test case 2
	ch1[0] = 0xA;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000f10:	230b      	movs	r3, #11
 8000f12:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000f14:	230c      	movs	r3, #12
 8000f16:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8000f18:	230d      	movs	r3, #13
 8000f1a:	72fb      	strb	r3, [r7, #11]

	EEPROM_Write_NBytes(0xFFF, ch1, 4);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	2204      	movs	r2, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f28:	f7ff f942 	bl	80001b0 <EEPROM_Write_NBytes>
	EEPROM_Read_Byte(0xFFF, ch2, 4);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f36:	f7ff f98d 	bl	8000254 <EEPROM_Read_Byte>

	while(1)
 8000f3a:	e7fe      	b.n	8000f3a <main+0x76>
 8000f3c:	08000ff4 	.word	0x08000ff4

08000f40 <Reset_Handler>:
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
 8000f42:	4685      	mov	sp, r0
 8000f44:	f3af 8000 	nop.w
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:
 8000f52:	58d4      	ldr	r4, [r2, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:
 8000f58:	18c4      	adds	r4, r0, r3
 8000f5a:	428c      	cmp	r4, r1
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
 8000f62:	2300      	movs	r3, #0
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:
 8000f6a:	42a2      	cmp	r2, r4
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>
 8000f6e:	f000 f811 	bl	8000f94 <__libc_init_array>
 8000f72:	f7ff ffa7 	bl	8000ec4 <main>

08000f76 <LoopForever>:
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
 8000f78:	20002800 	.word	0x20002800
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000000 	.word	0x20000000
 8000f84:	0800101c 	.word	0x0800101c
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	200000cc 	.word	0x200000cc

08000f90 <ADC1_2_IRQHandler>:
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <__libc_init_array>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	2500      	movs	r5, #0
 8000f98:	4e0c      	ldr	r6, [pc, #48]	; (8000fcc <__libc_init_array+0x38>)
 8000f9a:	4c0d      	ldr	r4, [pc, #52]	; (8000fd0 <__libc_init_array+0x3c>)
 8000f9c:	1ba4      	subs	r4, r4, r6
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	d109      	bne.n	8000fb8 <__libc_init_array+0x24>
 8000fa4:	f000 f81a 	bl	8000fdc <_init>
 8000fa8:	2500      	movs	r5, #0
 8000faa:	4e0a      	ldr	r6, [pc, #40]	; (8000fd4 <__libc_init_array+0x40>)
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <__libc_init_array+0x44>)
 8000fae:	1ba4      	subs	r4, r4, r6
 8000fb0:	10a4      	asrs	r4, r4, #2
 8000fb2:	42a5      	cmp	r5, r4
 8000fb4:	d105      	bne.n	8000fc2 <__libc_init_array+0x2e>
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fbc:	4798      	blx	r3
 8000fbe:	3501      	adds	r5, #1
 8000fc0:	e7ee      	b.n	8000fa0 <__libc_init_array+0xc>
 8000fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc6:	4798      	blx	r3
 8000fc8:	3501      	adds	r5, #1
 8000fca:	e7f2      	b.n	8000fb2 <__libc_init_array+0x1e>
 8000fcc:	08001014 	.word	0x08001014
 8000fd0:	08001014 	.word	0x08001014
 8000fd4:	08001014 	.word	0x08001014
 8000fd8:	08001018 	.word	0x08001018

08000fdc <_init>:
 8000fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fde:	bf00      	nop
 8000fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe2:	bc08      	pop	{r3}
 8000fe4:	469e      	mov	lr, r3
 8000fe6:	4770      	bx	lr

08000fe8 <_fini>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr
