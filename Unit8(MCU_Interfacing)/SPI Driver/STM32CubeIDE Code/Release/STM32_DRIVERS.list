
STM32_DRIVERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080009f0  080009f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a14  08000a1c  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a14  08000a14  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000000  08000a1c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08000a1c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f34  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000133d  00000000  00000000  00017979  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000134a  00000000  00000000  00018cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002b8  00000000  00000000  0001a000  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000258  00000000  00000000  0001a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000264a  00000000  00000000  0001a510  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001249  00000000  00000000  0001cb5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001dda3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f0  00000000  00000000  0001de20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009d8 	.word	0x080009d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009d8 	.word	0x080009d8

08000170 <EXTI0_IRQHandler>:
//1: selected trigger request occurred
//This bit is set when the selected edge event arrives on the external interrupt line. This bit is cleared by writing a ‘1’ into the bit.

void EXTI0_IRQHandler(void)
{
	EXTI->PR |= 1<<0;
 8000170:	4a03      	ldr	r2, [pc, #12]	; (8000180 <EXTI0_IRQHandler+0x10>)
 8000172:	6953      	ldr	r3, [r2, #20]
 8000174:	f043 0301 	orr.w	r3, r3, #1
 8000178:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[0]();
 800017a:	4b02      	ldr	r3, [pc, #8]	; (8000184 <EXTI0_IRQHandler+0x14>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4718      	bx	r3
 8000180:	40010400 	.word	0x40010400
 8000184:	20000078 	.word	0x20000078

08000188 <EXTI1_IRQHandler>:
}
void EXTI1_IRQHandler(void)
{
	EXTI->PR |= 1<<1;
 8000188:	4a03      	ldr	r2, [pc, #12]	; (8000198 <EXTI1_IRQHandler+0x10>)
 800018a:	6953      	ldr	r3, [r2, #20]
 800018c:	f043 0302 	orr.w	r3, r3, #2
 8000190:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[1]();
 8000192:	4b02      	ldr	r3, [pc, #8]	; (800019c <EXTI1_IRQHandler+0x14>)
 8000194:	685b      	ldr	r3, [r3, #4]
 8000196:	4718      	bx	r3
 8000198:	40010400 	.word	0x40010400
 800019c:	20000078 	.word	0x20000078

080001a0 <EXTI2_IRQHandler>:
}
void EXTI2_IRQHandler(void)
{
	EXTI->PR |= 1<<2;
 80001a0:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <EXTI2_IRQHandler+0x10>)
 80001a2:	6953      	ldr	r3, [r2, #20]
 80001a4:	f043 0304 	orr.w	r3, r3, #4
 80001a8:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[2]();
 80001aa:	4b02      	ldr	r3, [pc, #8]	; (80001b4 <EXTI2_IRQHandler+0x14>)
 80001ac:	689b      	ldr	r3, [r3, #8]
 80001ae:	4718      	bx	r3
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000078 	.word	0x20000078

080001b8 <EXTI3_IRQHandler>:
}
void EXTI3_IRQHandler(void)
{
	EXTI->PR |= 1<<3;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <EXTI3_IRQHandler+0x10>)
 80001ba:	6953      	ldr	r3, [r2, #20]
 80001bc:	f043 0308 	orr.w	r3, r3, #8
 80001c0:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[3]();
 80001c2:	4b02      	ldr	r3, [pc, #8]	; (80001cc <EXTI3_IRQHandler+0x14>)
 80001c4:	68db      	ldr	r3, [r3, #12]
 80001c6:	4718      	bx	r3
 80001c8:	40010400 	.word	0x40010400
 80001cc:	20000078 	.word	0x20000078

080001d0 <EXTI4_IRQHandler>:
}
void EXTI4_IRQHandler(void)
{
	EXTI->PR |= 1<<4;
 80001d0:	4a03      	ldr	r2, [pc, #12]	; (80001e0 <EXTI4_IRQHandler+0x10>)
 80001d2:	6953      	ldr	r3, [r2, #20]
 80001d4:	f043 0310 	orr.w	r3, r3, #16
 80001d8:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[4]();
 80001da:	4b02      	ldr	r3, [pc, #8]	; (80001e4 <EXTI4_IRQHandler+0x14>)
 80001dc:	691b      	ldr	r3, [r3, #16]
 80001de:	4718      	bx	r3
 80001e0:	40010400 	.word	0x40010400
 80001e4:	20000078 	.word	0x20000078

080001e8 <GET_CRLH_POSITION>:
GPIO_PIN_CONFIG_t PinConfig;


uint8_t GET_CRLH_POSITION(uint16_t PIN_NUMBER)
{
	switch (PIN_NUMBER)
 80001e8:	2880      	cmp	r0, #128	; 0x80
 80001ea:	d031      	beq.n	8000250 <GET_CRLH_POSITION+0x68>
 80001ec:	d810      	bhi.n	8000210 <GET_CRLH_POSITION+0x28>
 80001ee:	2808      	cmp	r0, #8
 80001f0:	d02a      	beq.n	8000248 <GET_CRLH_POSITION+0x60>
 80001f2:	d805      	bhi.n	8000200 <GET_CRLH_POSITION+0x18>
 80001f4:	2802      	cmp	r0, #2
 80001f6:	d018      	beq.n	800022a <GET_CRLH_POSITION+0x42>
 80001f8:	2804      	cmp	r0, #4
 80001fa:	d023      	beq.n	8000244 <GET_CRLH_POSITION+0x5c>
	{
		case GPIO_PIN0:
		return 0;
 80001fc:	2000      	movs	r0, #0
		return 28;
		break;
	}
	return 0;

}
 80001fe:	4770      	bx	lr
	switch (PIN_NUMBER)
 8000200:	2820      	cmp	r0, #32
 8000202:	d01d      	beq.n	8000240 <GET_CRLH_POSITION+0x58>
 8000204:	2840      	cmp	r0, #64	; 0x40
 8000206:	d021      	beq.n	800024c <GET_CRLH_POSITION+0x64>
 8000208:	2810      	cmp	r0, #16
 800020a:	d1f7      	bne.n	80001fc <GET_CRLH_POSITION+0x14>
		return 16;
 800020c:	2010      	movs	r0, #16
 800020e:	4770      	bx	lr
	switch (PIN_NUMBER)
 8000210:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000214:	d0fa      	beq.n	800020c <GET_CRLH_POSITION+0x24>
 8000216:	d80a      	bhi.n	800022e <GET_CRLH_POSITION+0x46>
 8000218:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800021c:	d012      	beq.n	8000244 <GET_CRLH_POSITION+0x5c>
 800021e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000222:	d011      	beq.n	8000248 <GET_CRLH_POSITION+0x60>
 8000224:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000228:	d1e8      	bne.n	80001fc <GET_CRLH_POSITION+0x14>
		return 4;
 800022a:	2004      	movs	r0, #4
 800022c:	4770      	bx	lr
	switch (PIN_NUMBER)
 800022e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000232:	d00b      	beq.n	800024c <GET_CRLH_POSITION+0x64>
 8000234:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000238:	d00a      	beq.n	8000250 <GET_CRLH_POSITION+0x68>
 800023a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800023e:	d1dd      	bne.n	80001fc <GET_CRLH_POSITION+0x14>
		return 20;
 8000240:	2014      	movs	r0, #20
 8000242:	4770      	bx	lr
		return 8;
 8000244:	2008      	movs	r0, #8
 8000246:	4770      	bx	lr
		return 12;
 8000248:	200c      	movs	r0, #12
 800024a:	4770      	bx	lr
		return 24;
 800024c:	2018      	movs	r0, #24
 800024e:	4770      	bx	lr
		return 28;
 8000250:	201c      	movs	r0, #28
 8000252:	4770      	bx	lr

08000254 <MCAL_GPIO_Init>:
 * Note			-STM32F103x8 MCU has GPIO A,B,C,D,E Modules
			 But LQFP48 has only GPIO A,B, Part of C,D exported as external pins from the MCU
 */

void MCAL_GPIO_Init	(GPIO_Typedef *GPIOx , GPIO_PIN_CONFIG_t* PINconfig)
{
 8000254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//Port configuration register low (GPIOx_CRL) (x=A..G) configures pins from 0 to 7
	//Port configuration register high (GPIOx_CRH) (x=A..G) configures pins from 8 to 15
	volatile uint32_t* configReg = NULL;
	uint8_t PIN_config =0;

	configReg = (PINconfig->GPIO_PIN_NO < GPIO_PIN8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000256:	880e      	ldrh	r6, [r1, #0]
{
 8000258:	4605      	mov	r5, r0
	configReg = (PINconfig->GPIO_PIN_NO < GPIO_PIN8) ? &GPIOx->CRL : &GPIOx->CRH;
 800025a:	2eff      	cmp	r6, #255	; 0xff
 800025c:	bf95      	itete	ls
 800025e:	6803      	ldrls	r3, [r0, #0]
 8000260:	6843      	ldrhi	r3, [r0, #4]
 8000262:	4602      	movls	r2, r0
 8000264:	1d02      	addhi	r2, r0, #4

	(*configReg) &= ~(0xF << GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO ));
 8000266:	4630      	mov	r0, r6
 8000268:	f7ff ffbe 	bl	80001e8 <GET_CRLH_POSITION>
 800026c:	240f      	movs	r4, #15
 800026e:	4084      	lsls	r4, r0
 8000270:	ea23 0304 	bic.w	r3, r3, r4
 8000274:	6013      	str	r3, [r2, #0]

	//Pin is output

	if( (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PINconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 8000276:	788c      	ldrb	r4, [r1, #2]
 8000278:	1f27      	subs	r7, r4, #4
 800027a:	b2fb      	uxtb	r3, r7
 800027c:	2b03      	cmp	r3, #3
 800027e:	d80a      	bhi.n	8000296 <MCAL_GPIO_Init+0x42>
 	{
		PIN_config= ( (( (PINconfig->GPIO_MODE -4) <<2 ) | (PINconfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 8000280:	78cb      	ldrb	r3, [r1, #3]
		(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 8000282:	6814      	ldr	r4, [r2, #0]
		PIN_config= ( (( (PINconfig->GPIO_MODE -4) <<2 ) | (PINconfig->GPIO_OUTPUT_SPEED)) & 0x0F);
 8000284:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 8000288:	f003 030f 	and.w	r3, r3, #15

		}
		else if (PINconfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
		{
			PIN_config = (( (GPIO_MODE_INPUT_FLOATING <<2 ) | 0x0) & 0x0F);
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 800028c:	fa03 f100 	lsl.w	r1, r3, r0
 8000290:	4321      	orrs	r1, r4
 8000292:	6011      	str	r1, [r2, #0]
 8000294:	e007      	b.n	80002a6 <MCAL_GPIO_Init+0x52>
		if ( (PINconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PINconfig->GPIO_MODE == GPIO_MODE_ANALOG))
 8000296:	2c01      	cmp	r4, #1
 8000298:	d80a      	bhi.n	80002b0 <MCAL_GPIO_Init+0x5c>
			PIN_config = (( ( (PINconfig->GPIO_MODE) <<2 ) | 0x0) & 0x0F);
 800029a:	00a4      	lsls	r4, r4, #2
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 800029c:	6811      	ldr	r1, [r2, #0]
			PIN_config = (( ( (PINconfig->GPIO_MODE) <<2 ) | 0x0) & 0x0F);
 800029e:	b2e3      	uxtb	r3, r4
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 80002a0:	4084      	lsls	r4, r0
 80002a2:	430c      	orrs	r4, r1
 80002a4:	6014      	str	r4, [r2, #0]
				GPIOx->ODR &= ~ (PINconfig->GPIO_PIN_NO);
			}

		}
	}
	(*configReg) |= ( (PIN_config) << GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO ));
 80002a6:	6811      	ldr	r1, [r2, #0]
 80002a8:	4083      	lsls	r3, r0
 80002aa:	430b      	orrs	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
	//if pin is input


}
 80002ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (PINconfig->GPIO_MODE == GPIO_MODE_AF_INPUT) //Consider it as input floating
 80002b0:	2c08      	cmp	r4, #8
 80002b2:	d102      	bne.n	80002ba <MCAL_GPIO_Init+0x66>
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 80002b4:	6814      	ldr	r4, [r2, #0]
 80002b6:	2304      	movs	r3, #4
 80002b8:	e7e8      	b.n	800028c <MCAL_GPIO_Init+0x38>
			(*configReg) |= (  ( PIN_config ) << (GET_CRLH_POSITION(PINconfig->GPIO_PIN_NO )));
 80002ba:	2308      	movs	r3, #8
 80002bc:	6817      	ldr	r7, [r2, #0]
 80002be:	fa03 f100 	lsl.w	r1, r3, r0
 80002c2:	4339      	orrs	r1, r7
 80002c4:	6011      	str	r1, [r2, #0]
				GPIOx->ODR |= (PINconfig->GPIO_PIN_NO);
 80002c6:	68e9      	ldr	r1, [r5, #12]
			if (PINconfig->GPIO_MODE == GPIO_MODE_INPUT_PU )
 80002c8:	2c02      	cmp	r4, #2
				GPIOx->ODR |= (PINconfig->GPIO_PIN_NO);
 80002ca:	bf0c      	ite	eq
 80002cc:	430e      	orreq	r6, r1
				GPIOx->ODR &= ~ (PINconfig->GPIO_PIN_NO);
 80002ce:	ea21 0606 	bicne.w	r6, r1, r6
 80002d2:	60ee      	str	r6, [r5, #12]
 80002d4:	e7e7      	b.n	80002a6 <MCAL_GPIO_Init+0x52>

080002d6 <MCAL_GPIO_WRITE_PIN>:
 * @Retval 		-None
 * Note			-None
 */
void MCAL_GPIO_WRITE_PIN (GPIO_Typedef *GPIOx, uint16_t PIN , uint8_t value)
{
	if (value != GPIO_PIN_RESET)
 80002d6:	b10a      	cbz	r2, 80002dc <MCAL_GPIO_WRITE_PIN+0x6>
	{
		//Bits 15:0 BRy: Port x Reset bit y (y= 0 .. 15)
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx->ODR &= ~(PIN) ;
 80002d8:	60c1      	str	r1, [r0, #12]
		// OR
		//GPIOx->BRR = (uint32_t)PIN ;

	}
}
 80002da:	4770      	bx	lr
		GPIOx->ODR &= ~(PIN) ;
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	ea23 0101 	bic.w	r1, r3, r1
 80002e2:	e7f9      	b.n	80002d8 <MCAL_GPIO_WRITE_PIN+0x2>

080002e4 <I2C1_EV_IRQHandler>:
// IRQ Function Definitions
//-------------------------------------------------


void I2C1_EV_IRQHandler(void)
{
 80002e4:	b570      	push	{r4, r5, r6, lr}
    // vuint32_t Dummy_Read = 0; // Volatile for compiler optimization

    /* Interrupt handling for both master and slave mode of the device */
    uint32_t Temp_1, Temp_2, Temp_3;

    Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN)); // Event interrupt enable
 80002e6:	4c1f      	ldr	r4, [pc, #124]	; (8000364 <I2C1_EV_IRQHandler+0x80>)
 80002e8:	6865      	ldr	r5, [r4, #4]
    Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN)); // Buffer interrupt enable
 80002ea:	6866      	ldr	r6, [r4, #4]
    Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));   // Stop detection (slave mode)

    /* Handle Stop Condition Event */
    if (Temp_1 && Temp_3)
 80002ec:	f415 7500 	ands.w	r5, r5, #512	; 0x200
    Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN)); // Buffer interrupt enable
 80002f0:	f406 6680 	and.w	r6, r6, #1024	; 0x400
    Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));   // Stop detection (slave mode)
 80002f4:	6963      	ldr	r3, [r4, #20]
    if (Temp_1 && Temp_3)
 80002f6:	d007      	beq.n	8000308 <I2C1_EV_IRQHandler+0x24>
 80002f8:	06db      	lsls	r3, r3, #27
 80002fa:	d505      	bpl.n	8000308 <I2C1_EV_IRQHandler+0x24>
    {
        /* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
         * i have already read SR1 in Temp_3
         * then next statement i write to CR1
         */
        I2C1->CR1 |= 0x0000;
 80002fc:	6823      	ldr	r3, [r4, #0]
        G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_STOP);
 80002fe:	2000      	movs	r0, #0
        I2C1->CR1 |= 0x0000;
 8000300:	6023      	str	r3, [r4, #0]
        G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_STOP);
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <I2C1_EV_IRQHandler+0x84>)
 8000304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000306:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle Received address matched. */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR)); // ADDR
 8000308:	6963      	ldr	r3, [r4, #20]
    if (Temp_1 && Temp_3)
 800030a:	b145      	cbz	r5, 800031e <I2C1_EV_IRQHandler+0x3a>
 800030c:	0798      	lsls	r0, r3, #30
 800030e:	d506      	bpl.n	800031e <I2C1_EV_IRQHandler+0x3a>
         */
        // Dummy_Read  = I2C1->SR1;
        // Dummy_Read  = I2C1->SR2;

        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000310:	69a3      	ldr	r3, [r4, #24]
 8000312:	07d9      	lsls	r1, r3, #31
 8000314:	d403      	bmi.n	800031e <I2C1_EV_IRQHandler+0x3a>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_ADD_MATCHED);
 8000316:	4b14      	ldr	r3, [pc, #80]	; (8000368 <I2C1_EV_IRQHandler+0x84>)
 8000318:	2001      	movs	r0, #1
 800031a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031c:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE)); // TXE
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <I2C1_EV_IRQHandler+0x80>)
 8000320:	695a      	ldr	r2, [r3, #20]
    if (Temp_1 && Temp_2 && Temp_3)       // In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000322:	b165      	cbz	r5, 800033e <I2C1_EV_IRQHandler+0x5a>
 8000324:	b15e      	cbz	r6, 800033e <I2C1_EV_IRQHandler+0x5a>
 8000326:	0612      	lsls	r2, r2, #24
 8000328:	d509      	bpl.n	800033e <I2C1_EV_IRQHandler+0x5a>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 800032a:	699a      	ldr	r2, [r3, #24]
 800032c:	07d4      	lsls	r4, r2, #31
 800032e:	d406      	bmi.n	800033e <I2C1_EV_IRQHandler+0x5a>
        }
        else
        {
            /* Slave mode */
            /* Check if slave in transmit mode */
            if (I2C1->SR2 & (I2C_SR2_TRA)) // TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	0758      	lsls	r0, r3, #29
 8000334:	d503      	bpl.n	800033e <I2C1_EV_IRQHandler+0x5a>
            {
                G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_REQ);
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <I2C1_EV_IRQHandler+0x84>)
 8000338:	2002      	movs	r0, #2
 800033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033c:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE)); // RXNE
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <I2C1_EV_IRQHandler+0x80>)
 8000340:	695a      	ldr	r2, [r3, #20]
    if (Temp_1 && Temp_2 && Temp_3)        // In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000342:	b175      	cbz	r5, 8000362 <I2C1_EV_IRQHandler+0x7e>
 8000344:	b16e      	cbz	r6, 8000362 <I2C1_EV_IRQHandler+0x7e>
 8000346:	0651      	lsls	r1, r2, #25
 8000348:	d50b      	bpl.n	8000362 <I2C1_EV_IRQHandler+0x7e>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 800034a:	699a      	ldr	r2, [r3, #24]
 800034c:	07d2      	lsls	r2, r2, #31
 800034e:	d408      	bmi.n	8000362 <I2C1_EV_IRQHandler+0x7e>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            if (!(I2C1->SR2 & (I2C_SR2_TRA))) // TRA: Transmitter/receiver: 0: Data bytes received
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	075b      	lsls	r3, r3, #29
 8000354:	d405      	bmi.n	8000362 <I2C1_EV_IRQHandler+0x7e>
            {
                G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_RCV);
            }
        }
    }
}
 8000356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_RCV);
 800035a:	4b03      	ldr	r3, [pc, #12]	; (8000368 <I2C1_EV_IRQHandler+0x84>)
 800035c:	2003      	movs	r0, #3
 800035e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000360:	4718      	bx	r3
}
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	40005400 	.word	0x40005400
 8000368:	2000001c 	.word	0x2000001c

0800036c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
}
 800036c:	4770      	bx	lr

0800036e <I2C2_EV_IRQHandler>:
 800036e:	4770      	bx	lr

08000370 <I2C2_ER_IRQHandler>:
 8000370:	4770      	bx	lr
	...

08000374 <MCAL_RCC_GET_SYSCLK_FREQ>:
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable*/

	switch ((RCC->CFGR >> 2 ) & 0b11)
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <MCAL_RCC_GET_SYSCLK_FREQ+0x18>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800037c:	2b03      	cmp	r3, #3
 800037e:	bf1a      	itte	ne
 8000380:	4a03      	ldrne	r2, [pc, #12]	; (8000390 <MCAL_RCC_GET_SYSCLK_FREQ+0x1c>)
 8000382:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
 8000386:	2000      	moveq	r0, #0
			return 0;
			break;

		}
		return 0;
}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	08000a08 	.word	0x08000a08

08000394 <MCAL_RCC_GET_HCLK_FREQ>:

uint32_t MCAL_RCC_GET_HCLK_FREQ()
{
 8000394:	b508      	push	{r3, lr}
	return ( MCAL_RCC_GET_SYSCLK_FREQ() >> AHB_Prescalar[( (RCC->CFGR >> 4) & 0b111)] );
 8000396:	f7ff ffed 	bl	8000374 <MCAL_RCC_GET_SYSCLK_FREQ>
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <MCAL_RCC_GET_HCLK_FREQ+0x18>)
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <MCAL_RCC_GET_HCLK_FREQ+0x1c>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80003a4:	5cd3      	ldrb	r3, [r2, r3]

}
 80003a6:	40d8      	lsrs	r0, r3
 80003a8:	bd08      	pop	{r3, pc}
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	080009f0 	.word	0x080009f0

080003b4 <MCAL_RCC_GET_PCLK1_FREQ>:
uint32_t MCAL_RCC_GET_PCLK1_FREQ()
{
 80003b4:	b508      	push	{r3, lr}
	return ( MCAL_RCC_GET_HCLK_FREQ() >> APB_Prescalar[( (RCC->CFGR >> 8) & 0b111)] );
 80003b6:	f7ff ffed 	bl	8000394 <MCAL_RCC_GET_HCLK_FREQ>
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <MCAL_RCC_GET_PCLK1_FREQ+0x18>)
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <MCAL_RCC_GET_PCLK1_FREQ+0x1c>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80003c4:	5cd3      	ldrb	r3, [r2, r3]

}
 80003c6:	40d8      	lsrs	r0, r3
 80003c8:	bd08      	pop	{r3, pc}
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000
 80003d0:	08000a00 	.word	0x08000a00

080003d4 <MCAL_RCC_GET_PCLK2_FREQ>:
uint32_t MCAL_RCC_GET_PCLK2_FREQ()
{
 80003d4:	b508      	push	{r3, lr}
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return ( MCAL_RCC_GET_HCLK_FREQ() >> APB_Prescalar[( (RCC->CFGR >> 11) & 0b111)] );
 80003d6:	f7ff ffdd 	bl	8000394 <MCAL_RCC_GET_HCLK_FREQ>
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <MCAL_RCC_GET_PCLK2_FREQ+0x18>)
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <MCAL_RCC_GET_PCLK2_FREQ+0x1c>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80003e4:	5cd3      	ldrb	r3, [r2, r3]


}
 80003e6:	40d8      	lsrs	r0, r3
 80003e8:	bd08      	pop	{r3, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	08000a00 	.word	0x08000a00

080003f4 <MCAL_SPI_INIT>:
{
	//Safety for regs
	uint16_t tmpreg_CR1=0;
	uint16_t tmpreg_CR2=0;

	if (SPIx == SPI1)
 80003f4:	4b20      	ldr	r3, [pc, #128]	; (8000478 <MCAL_SPI_INIT+0x84>)
{
 80003f6:	b510      	push	{r4, lr}
	if (SPIx == SPI1)
 80003f8:	4298      	cmp	r0, r3
 80003fa:	d12a      	bne.n	8000452 <MCAL_SPI_INIT+0x5e>
	{
		Global_SPI_Config[SPI1_INDEX] = SPI_Config;
 80003fc:	4b1f      	ldr	r3, [pc, #124]	; (800047c <MCAL_SPI_INIT+0x88>)
		RCC_SPI1_CLK_EN();
 80003fe:	4a20      	ldr	r2, [pc, #128]	; (8000480 <MCAL_SPI_INIT+0x8c>)
		Global_SPI_Config[SPI1_INDEX] = SPI_Config;
 8000400:	6019      	str	r1, [r3, #0]
		RCC_SPI1_CLK_EN();
 8000402:	6993      	ldr	r3, [r2, #24]
 8000404:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000408:	6193      	str	r3, [r2, #24]

	//Master or slave
	tmpreg_CR1 |= SPI_Config->DEVICE_MODE;

	//Communication mode
	tmpreg_CR1 |= SPI_Config->COMM_MODE;
 800040a:	884a      	ldrh	r2, [r1, #2]
 800040c:	880b      	ldrh	r3, [r1, #0]
	{
		tmpreg_CR1 |= SPI_Config->NSS;
	}

	// SPI BaudRate prescalar
	tmpreg_CR1 |= SPI_Config->SPI_BAUDRATE_PRESCALAR;
 800040e:	89cc      	ldrh	r4, [r1, #14]
	tmpreg_CR1 |= SPI_Config->COMM_MODE;
 8000410:	4313      	orrs	r3, r2
	tmpreg_CR1 |= SPI_Config->DATA_SZ;
 8000412:	88ca      	ldrh	r2, [r1, #6]
	tmpreg_CR1 |= SPI_Config->COMM_MODE;
 8000414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	tmpreg_CR1 |= SPI_Config->DATA_SZ;
 8000418:	4313      	orrs	r3, r2
	tmpreg_CR1 |= SPI_Config->CLK_POLARITY;
 800041a:	890a      	ldrh	r2, [r1, #8]
 800041c:	4313      	orrs	r3, r2
	tmpreg_CR1 |= SPI_Config->CLK_PHASE;
 800041e:	894a      	ldrh	r2, [r1, #10]
 8000420:	4313      	orrs	r3, r2
	tmpreg_CR1 |= SPI_Config->FRAME_FORMAT;
 8000422:	888a      	ldrh	r2, [r1, #4]
 8000424:	4313      	orrs	r3, r2
	if (SPI_Config->NSS == SPI_NSS_HW_MASTER_SSO_ENABLE)
 8000426:	898a      	ldrh	r2, [r1, #12]


	// SPI_IRQ_ ENABLE/DISABLE
	if (SPI_Config->IRQ_ENABLE !=  SPI_IRQ_ENABLE_NONE)
 8000428:	8a09      	ldrh	r1, [r1, #16]
	if (SPI_Config->NSS == SPI_NSS_HW_MASTER_SSO_ENABLE)
 800042a:	2a04      	cmp	r2, #4
		tmpreg_CR1 |= SPI_Config->NSS;
 800042c:	bf18      	it	ne
 800042e:	4313      	orrne	r3, r2
	tmpreg_CR1 |= SPI_Config->SPI_BAUDRATE_PRESCALAR;
 8000430:	ea43 0304 	orr.w	r3, r3, r4
		tmpreg_CR2 &= SPI_Config->NSS;
 8000434:	bf18      	it	ne
 8000436:	2200      	movne	r2, #0
	if (SPI_Config->IRQ_ENABLE !=  SPI_IRQ_ENABLE_NONE)
 8000438:	b141      	cbz	r1, 800044c <MCAL_SPI_INIT+0x58>
	{
		tmpreg_CR2 |= SPI_Config->IRQ_ENABLE;
 800043a:	430a      	orrs	r2, r1
		if (SPIx == SPI1)
 800043c:	490e      	ldr	r1, [pc, #56]	; (8000478 <MCAL_SPI_INIT+0x84>)
 800043e:	4288      	cmp	r0, r1
 8000440:	d112      	bne.n	8000468 <MCAL_SPI_INIT+0x74>
		{
			NVIC_IRQ35_SPI1_ENABLE;
 8000442:	4c10      	ldr	r4, [pc, #64]	; (8000484 <MCAL_SPI_INIT+0x90>)
 8000444:	6821      	ldr	r1, [r4, #0]
 8000446:	f041 0108 	orr.w	r1, r1, #8
		}
		else if(SPIx == SPI2)
		{
			NVIC_IRQ36_SPI2_ENABLE;
 800044a:	6021      	str	r1, [r4, #0]
		}

	}

	SPIx->CR1 = tmpreg_CR1;
 800044c:	6003      	str	r3, [r0, #0]
	SPIx->CR2 = tmpreg_CR2;
 800044e:	6042      	str	r2, [r0, #4]


	//SPIx->I2SCFGR &= ~(1<<11);
	//SPIx->CRCPR = 0x0;

}
 8000450:	bd10      	pop	{r4, pc}
	else if(SPIx == SPI2)
 8000452:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <MCAL_SPI_INIT+0x94>)
 8000454:	4298      	cmp	r0, r3
 8000456:	d1d8      	bne.n	800040a <MCAL_SPI_INIT+0x16>
		Global_SPI_Config[SPI2_INDEX] = SPI_Config;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <MCAL_SPI_INIT+0x88>)
		RCC_SPI2_CLK_EN();
 800045a:	4a09      	ldr	r2, [pc, #36]	; (8000480 <MCAL_SPI_INIT+0x8c>)
		Global_SPI_Config[SPI2_INDEX] = SPI_Config;
 800045c:	6059      	str	r1, [r3, #4]
		RCC_SPI2_CLK_EN();
 800045e:	69d3      	ldr	r3, [r2, #28]
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	e7d0      	b.n	800040a <MCAL_SPI_INIT+0x16>
		else if(SPIx == SPI2)
 8000468:	4907      	ldr	r1, [pc, #28]	; (8000488 <MCAL_SPI_INIT+0x94>)
 800046a:	4288      	cmp	r0, r1
 800046c:	d1ee      	bne.n	800044c <MCAL_SPI_INIT+0x58>
			NVIC_IRQ36_SPI2_ENABLE;
 800046e:	4c05      	ldr	r4, [pc, #20]	; (8000484 <MCAL_SPI_INIT+0x90>)
 8000470:	6821      	ldr	r1, [r4, #0]
 8000472:	f041 0110 	orr.w	r1, r1, #16
 8000476:	e7e8      	b.n	800044a <MCAL_SPI_INIT+0x56>
 8000478:	40013000 	.word	0x40013000
 800047c:	2000006c 	.word	0x2000006c
 8000480:	40021000 	.word	0x40021000
 8000484:	e000e104 	.word	0xe000e104
 8000488:	40003800 	.word	0x40003800

0800048c <MCAL_SPI_GPIO_SET_PINS>:
 */
void MCAL_SPI_GPIO_SET_PINS(SPI_Typedef* SPIx)
{
	GPIO_PIN_CONFIG_t PinCfg;

	if (SPIx == SPI1)
 800048c:	4b4d      	ldr	r3, [pc, #308]	; (80005c4 <MCAL_SPI_GPIO_SET_PINS+0x138>)
{
 800048e:	b513      	push	{r0, r1, r4, lr}
	if (SPIx == SPI1)
 8000490:	4298      	cmp	r0, r3
 8000492:	d149      	bne.n	8000528 <MCAL_SPI_GPIO_SET_PINS+0x9c>
		//PA4:SPI1_NSS
		//PA5:SPI1_SCK
		//PA6:SPI_MISO
		//PA7:SPI_MOSI

		if (Global_SPI_Config[SPI1_INDEX]->DEVICE_MODE == SPI_DEVICE_MODE_MASTER)
 8000494:	4b4c      	ldr	r3, [pc, #304]	; (80005c8 <MCAL_SPI_GPIO_SET_PINS+0x13c>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	881a      	ldrh	r2, [r3, #0]
 800049a:	2a04      	cmp	r2, #4
 800049c:	d120      	bne.n	80004e0 <MCAL_SPI_GPIO_SET_PINS+0x54>
		{
			//PA4:SPI1_NSS
			switch (Global_SPI_Config[SPI1_INDEX]->NSS)
 800049e:	899b      	ldrh	r3, [r3, #12]
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	d105      	bne.n	80004b0 <MCAL_SPI_GPIO_SET_PINS+0x24>
				MCAL_GPIO_Init(GPIOA, &PinCfg);
				break;

				case SPI_NSS_HW_MASTER_SSO_ENABLE:
				//Hardware master/ NSS output enabled Alternate function push-pull
				PinCfg.GPIO_PIN_NO = GPIO_PIN4;
 80004a4:	4b49      	ldr	r3, [pc, #292]	; (80005cc <MCAL_SPI_GPIO_SET_PINS+0x140>)
				PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
				PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004a6:	a901      	add	r1, sp, #4
 80004a8:	4849      	ldr	r0, [pc, #292]	; (80005d0 <MCAL_SPI_GPIO_SET_PINS+0x144>)
				PinCfg.GPIO_PIN_NO = GPIO_PIN4;
 80004aa:	9301      	str	r3, [sp, #4]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004ac:	f7ff fed2 	bl	8000254 <MCAL_GPIO_Init>
					break;
			}

			//PA5:SPI1_SCK
			//Master Alternate function push-pull
			PinCfg.GPIO_PIN_NO = GPIO_PIN5;
 80004b0:	4b48      	ldr	r3, [pc, #288]	; (80005d4 <MCAL_SPI_GPIO_SET_PINS+0x148>)
			PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004b2:	a901      	add	r1, sp, #4
 80004b4:	4846      	ldr	r0, [pc, #280]	; (80005d0 <MCAL_SPI_GPIO_SET_PINS+0x144>)
			PinCfg.GPIO_PIN_NO = GPIO_PIN5;
 80004b6:	9301      	str	r3, [sp, #4]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004b8:	f7ff fecc 	bl	8000254 <MCAL_GPIO_Init>

			//PA6:SPI_MISO
			//Supported only (Full Duplex) master: Input floating
			PinCfg.GPIO_PIN_NO = GPIO_PIN6;
 80004bc:	2340      	movs	r3, #64	; 0x40
 80004be:	f8ad 3004 	strh.w	r3, [sp, #4]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80004c2:	2301      	movs	r3, #1
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004c4:	a901      	add	r1, sp, #4
 80004c6:	4842      	ldr	r0, [pc, #264]	; (80005d0 <MCAL_SPI_GPIO_SET_PINS+0x144>)
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80004c8:	f88d 3006 	strb.w	r3, [sp, #6]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004cc:	f7ff fec2 	bl	8000254 <MCAL_GPIO_Init>

			//PA7:SPI_MOSI
			//Supported only (Full Duplex) master: Alternate function push-pull
			PinCfg.GPIO_PIN_NO = GPIO_PIN7;
 80004d0:	4b41      	ldr	r3, [pc, #260]	; (80005d8 <MCAL_SPI_GPIO_SET_PINS+0x14c>)
 80004d2:	9301      	str	r3, [sp, #4]

			//PA7:SPI_MOSI
			//Supported only (Full Duplex) slave: Input floating
			PinCfg.GPIO_PIN_NO = GPIO_PIN7;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004d4:	483e      	ldr	r0, [pc, #248]	; (80005d0 <MCAL_SPI_GPIO_SET_PINS+0x144>)
 80004d6:	a901      	add	r1, sp, #4

			//PB15:SPI_MOSI
			//Supported only (Full Duplex) slave: Input floating
			PinCfg.GPIO_PIN_NO = GPIO_PIN15;
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80004d8:	f7ff febc 	bl	8000254 <MCAL_GPIO_Init>
		}

	}
}
 80004dc:	b002      	add	sp, #8
 80004de:	bd10      	pop	{r4, pc}
		else if (Global_SPI_Config[SPI1_INDEX]->DEVICE_MODE == SPI_DEVICE_MODE_SLAVE)
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	d1fb      	bne.n	80004dc <MCAL_SPI_GPIO_SET_PINS+0x50>
			if (Global_SPI_Config[SPI1_INDEX]->NSS == SPI_NSS_HW_SLAVE )
 80004e4:	899b      	ldrh	r3, [r3, #12]
 80004e6:	b94b      	cbnz	r3, 80004fc <MCAL_SPI_GPIO_SET_PINS+0x70>
				PinCfg.GPIO_PIN_NO = GPIO_PIN4;
 80004e8:	2310      	movs	r3, #16
 80004ea:	f8ad 3004 	strh.w	r3, [sp, #4]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80004ee:	2301      	movs	r3, #1
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004f0:	a901      	add	r1, sp, #4
 80004f2:	4837      	ldr	r0, [pc, #220]	; (80005d0 <MCAL_SPI_GPIO_SET_PINS+0x144>)
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80004f4:	f88d 3006 	strb.w	r3, [sp, #6]
				MCAL_GPIO_Init(GPIOA, &PinCfg);
 80004f8:	f7ff feac 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN5;
 80004fc:	2320      	movs	r3, #32
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80004fe:	2401      	movs	r4, #1
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000500:	a901      	add	r1, sp, #4
 8000502:	4833      	ldr	r0, [pc, #204]	; (80005d0 <MCAL_SPI_GPIO_SET_PINS+0x144>)
			PinCfg.GPIO_PIN_NO = GPIO_PIN5;
 8000504:	f8ad 3004 	strh.w	r3, [sp, #4]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000508:	f88d 4006 	strb.w	r4, [sp, #6]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 800050c:	f7ff fea2 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN6;
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <MCAL_SPI_GPIO_SET_PINS+0x150>)
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000512:	a901      	add	r1, sp, #4
 8000514:	482e      	ldr	r0, [pc, #184]	; (80005d0 <MCAL_SPI_GPIO_SET_PINS+0x144>)
			PinCfg.GPIO_PIN_NO = GPIO_PIN6;
 8000516:	9301      	str	r3, [sp, #4]
			MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000518:	f7ff fe9c 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN7;
 800051c:	2380      	movs	r3, #128	; 0x80
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 800051e:	f88d 4006 	strb.w	r4, [sp, #6]
			PinCfg.GPIO_PIN_NO = GPIO_PIN7;
 8000522:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000526:	e7d5      	b.n	80004d4 <MCAL_SPI_GPIO_SET_PINS+0x48>
	else if(SPIx == SPI2)
 8000528:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <MCAL_SPI_GPIO_SET_PINS+0x154>)
 800052a:	4298      	cmp	r0, r3
 800052c:	d1d6      	bne.n	80004dc <MCAL_SPI_GPIO_SET_PINS+0x50>
		if (Global_SPI_Config[SPI2_INDEX]->DEVICE_MODE == SPI_DEVICE_MODE_MASTER)
 800052e:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <MCAL_SPI_GPIO_SET_PINS+0x13c>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	881a      	ldrh	r2, [r3, #0]
 8000534:	2a04      	cmp	r2, #4
 8000536:	d11e      	bne.n	8000576 <MCAL_SPI_GPIO_SET_PINS+0xea>
			switch (Global_SPI_Config[SPI2_INDEX]->NSS)
 8000538:	899b      	ldrh	r3, [r3, #12]
 800053a:	2b04      	cmp	r3, #4
 800053c:	d105      	bne.n	800054a <MCAL_SPI_GPIO_SET_PINS+0xbe>
				PinCfg.GPIO_PIN_NO = GPIO_PIN12;
 800053e:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <MCAL_SPI_GPIO_SET_PINS+0x158>)
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000540:	a901      	add	r1, sp, #4
 8000542:	4829      	ldr	r0, [pc, #164]	; (80005e8 <MCAL_SPI_GPIO_SET_PINS+0x15c>)
				PinCfg.GPIO_PIN_NO = GPIO_PIN12;
 8000544:	9301      	str	r3, [sp, #4]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000546:	f7ff fe85 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN13;
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <MCAL_SPI_GPIO_SET_PINS+0x160>)
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800054c:	a901      	add	r1, sp, #4
 800054e:	4826      	ldr	r0, [pc, #152]	; (80005e8 <MCAL_SPI_GPIO_SET_PINS+0x15c>)
			PinCfg.GPIO_PIN_NO = GPIO_PIN13;
 8000550:	9301      	str	r3, [sp, #4]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000552:	f7ff fe7f 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN14;
 8000556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800055a:	f8ad 3004 	strh.w	r3, [sp, #4]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 800055e:	2301      	movs	r3, #1
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000560:	a901      	add	r1, sp, #4
 8000562:	4821      	ldr	r0, [pc, #132]	; (80005e8 <MCAL_SPI_GPIO_SET_PINS+0x15c>)
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000564:	f88d 3006 	strb.w	r3, [sp, #6]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000568:	f7ff fe74 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN15;
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <MCAL_SPI_GPIO_SET_PINS+0x164>)
 800056e:	9301      	str	r3, [sp, #4]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000570:	a901      	add	r1, sp, #4
 8000572:	481d      	ldr	r0, [pc, #116]	; (80005e8 <MCAL_SPI_GPIO_SET_PINS+0x15c>)
 8000574:	e7b0      	b.n	80004d8 <MCAL_SPI_GPIO_SET_PINS+0x4c>
		else if (Global_SPI_Config[SPI2_INDEX]->DEVICE_MODE == SPI_DEVICE_MODE_SLAVE)
 8000576:	2a00      	cmp	r2, #0
 8000578:	d1b0      	bne.n	80004dc <MCAL_SPI_GPIO_SET_PINS+0x50>
			if (Global_SPI_Config[SPI2_INDEX]->NSS == SPI_NSS_HW_SLAVE )
 800057a:	899b      	ldrh	r3, [r3, #12]
 800057c:	b953      	cbnz	r3, 8000594 <MCAL_SPI_GPIO_SET_PINS+0x108>
				PinCfg.GPIO_PIN_NO = GPIO_PIN12;
 800057e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000582:	f8ad 3004 	strh.w	r3, [sp, #4]
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000586:	2301      	movs	r3, #1
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000588:	a901      	add	r1, sp, #4
 800058a:	4817      	ldr	r0, [pc, #92]	; (80005e8 <MCAL_SPI_GPIO_SET_PINS+0x15c>)
				PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 800058c:	f88d 3006 	strb.w	r3, [sp, #6]
				MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000590:	f7ff fe60 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN13;
 8000594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 8000598:	2401      	movs	r4, #1
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 800059a:	a901      	add	r1, sp, #4
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <MCAL_SPI_GPIO_SET_PINS+0x15c>)
			PinCfg.GPIO_PIN_NO = GPIO_PIN13;
 800059e:	f8ad 3004 	strh.w	r3, [sp, #4]
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80005a2:	f88d 4006 	strb.w	r4, [sp, #6]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80005a6:	f7ff fe55 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN14;
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MCAL_SPI_GPIO_SET_PINS+0x168>)
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80005ac:	a901      	add	r1, sp, #4
 80005ae:	480e      	ldr	r0, [pc, #56]	; (80005e8 <MCAL_SPI_GPIO_SET_PINS+0x15c>)
			PinCfg.GPIO_PIN_NO = GPIO_PIN14;
 80005b0:	9301      	str	r3, [sp, #4]
			MCAL_GPIO_Init(GPIOB, &PinCfg);
 80005b2:	f7ff fe4f 	bl	8000254 <MCAL_GPIO_Init>
			PinCfg.GPIO_PIN_NO = GPIO_PIN15;
 80005b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
			PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLOATING;
 80005ba:	f88d 4006 	strb.w	r4, [sp, #6]
			PinCfg.GPIO_PIN_NO = GPIO_PIN15;
 80005be:	f8ad 3004 	strh.w	r3, [sp, #4]
 80005c2:	e7d5      	b.n	8000570 <MCAL_SPI_GPIO_SET_PINS+0xe4>
 80005c4:	40013000 	.word	0x40013000
 80005c8:	2000006c 	.word	0x2000006c
 80005cc:	01060010 	.word	0x01060010
 80005d0:	40010800 	.word	0x40010800
 80005d4:	01060020 	.word	0x01060020
 80005d8:	01060080 	.word	0x01060080
 80005dc:	01060040 	.word	0x01060040
 80005e0:	40003800 	.word	0x40003800
 80005e4:	01061000 	.word	0x01061000
 80005e8:	40010c00 	.word	0x40010c00
 80005ec:	01062000 	.word	0x01062000
 80005f0:	01068000 	.word	0x01068000
 80005f4:	01064000 	.word	0x01064000

080005f8 <MCAL_SPI_TX_RX>:
}

void MCAL_SPI_TX_RX (SPI_Typedef* SPIx,uint16_t* pTX_Buffer,  Polling_Mechanism PollingEn)
{

	if ( PollingEn == Polling_enable)
 80005f8:	b912      	cbnz	r2, 8000600 <MCAL_SPI_TX_RX+0x8>
			while( !((SPIx->SR ) &  SPI_SR_TXE) );
 80005fa:	6883      	ldr	r3, [r0, #8]
 80005fc:	079b      	lsls	r3, r3, #30
 80005fe:	d5fc      	bpl.n	80005fa <MCAL_SPI_TX_RX+0x2>
		SPIx->DR = *pTX_Buffer;
 8000600:	880b      	ldrh	r3, [r1, #0]
 8000602:	60c3      	str	r3, [r0, #12]

	if ( PollingEn == Polling_enable)
 8000604:	b912      	cbnz	r2, 800060c <MCAL_SPI_TX_RX+0x14>
		while( !((SPIx->SR) & SPI_SR_RXNE) );
 8000606:	6883      	ldr	r3, [r0, #8]
 8000608:	07db      	lsls	r3, r3, #31
 800060a:	d5fc      	bpl.n	8000606 <MCAL_SPI_TX_RX+0xe>
	*pTX_Buffer = SPIx->DR;
 800060c:	68c3      	ldr	r3, [r0, #12]
 800060e:	800b      	strh	r3, [r1, #0]





}
 8000610:	4770      	bx	lr
	...

08000614 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
	S_IRQ_SRC irq_src;

	irq_src.TXE =  (SPI1->SR & (1<<1) >> 1 );
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <SPI1_IRQHandler+0x20>)
 800061a:	689a      	ldr	r2, [r3, #8]
 800061c:	f362 0000 	bfi	r0, r2, #0, #1
	irq_src.RXNE =  (SPI1->SR & (1<<0) >> 0 );
 8000620:	689a      	ldr	r2, [r3, #8]
	irq_src.ERRI =  (SPI1->SR & (1<<4) >> 4 );
 8000622:	689b      	ldr	r3, [r3, #8]
	irq_src.RXNE =  (SPI1->SR & (1<<0) >> 0 );
 8000624:	f362 0041 	bfi	r0, r2, #1, #1
	irq_src.ERRI =  (SPI1->SR & (1<<4) >> 4 );
 8000628:	f363 0082 	bfi	r0, r3, #2, #1

	Global_SPI_Config[SPI1_INDEX]->P_SPI_IRQ_CALLBACK(irq_src);
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <SPI1_IRQHandler+0x24>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4718      	bx	r3
 8000634:	40013000 	.word	0x40013000
 8000638:	2000006c 	.word	0x2000006c

0800063c <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
	S_IRQ_SRC irq_src;

	irq_src.TXE = (SPI2->SR & (1<<1) >> 1 );
 800063c:	f04f 0000 	mov.w	r0, #0
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <SPI2_IRQHandler+0x20>)
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	f362 0000 	bfi	r0, r2, #0, #1
 	irq_src.RXNE = (SPI2->SR & (1<<0) >> 0 );
 8000648:	689a      	ldr	r2, [r3, #8]
	irq_src.ERRI = (SPI2->SR & (1<<4) >> 4 );
 800064a:	689b      	ldr	r3, [r3, #8]
 	irq_src.RXNE = (SPI2->SR & (1<<0) >> 0 );
 800064c:	f362 0041 	bfi	r0, r2, #1, #1
	irq_src.ERRI = (SPI2->SR & (1<<4) >> 4 );
 8000650:	f363 0082 	bfi	r0, r3, #2, #1

	Global_SPI_Config[SPI2_INDEX]->P_SPI_IRQ_CALLBACK(irq_src);
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <SPI2_IRQHandler+0x24>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	4718      	bx	r3
 800065c:	40003800 	.word	0x40003800
 8000660:	2000006c 	.word	0x2000006c

08000664 <MCAL_UART_INIT>:

void MCAL_UART_INIT (USART_Typedef* USARTx, UART_Config_t* UART_Config)
{
	uint32_t pclk, BRR;
	//G_UART_Config = *UART_Config;
	Global_UART_Config = UART_Config;
 8000664:	4b39      	ldr	r3, [pc, #228]	; (800074c <MCAL_UART_INIT+0xe8>)
{
 8000666:	b570      	push	{r4, r5, r6, lr}
	Global_UART_Config = UART_Config;
 8000668:	6019      	str	r1, [r3, #0]


	//EN the clk for given USART peripheral
	if (USARTx == USART1)
 800066a:	4b39      	ldr	r3, [pc, #228]	; (8000750 <MCAL_UART_INIT+0xec>)
{
 800066c:	4604      	mov	r4, r0
	if (USARTx == USART1)
 800066e:	4298      	cmp	r0, r3
{
 8000670:	460d      	mov	r5, r1
	if (USARTx == USART1)
 8000672:	d144      	bne.n	80006fe <MCAL_UART_INIT+0x9a>
		RCC_USART1_CLK_EN();
 8000674:	4a37      	ldr	r2, [pc, #220]	; (8000754 <MCAL_UART_INIT+0xf0>)
 8000676:	6993      	ldr	r3, [r2, #24]
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6193      	str	r3, [r2, #24]
	else if (USARTx == USART3)
		RCC_USART3_CLK_EN();

	//En the USART module Bit 13 UE: USART enable

	USARTx->CR1 |= 1<<13;
 800067e:	68e3      	ldr	r3, [r4, #12]
 8000680:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000684:	60e3      	str	r3, [r4, #12]

	//EN USART TX and RX according to the USART_MODE config
	USARTx->CR1 |= UART_Config->USART_MODE;
 8000686:	68e2      	ldr	r2, [r4, #12]
 8000688:	782b      	ldrb	r3, [r5, #0]
 800068a:	4313      	orrs	r3, r2
 800068c:	60e3      	str	r3, [r4, #12]

	//Payload width
	USARTx->CR1 |= UART_Config->Payload_length;
 800068e:	68e2      	ldr	r2, [r4, #12]
 8000690:	7a2b      	ldrb	r3, [r5, #8]
 8000692:	4313      	orrs	r3, r2
 8000694:	60e3      	str	r3, [r4, #12]

	//configuration of parity ctrl bit fields
	USARTx->CR1 |= UART_Config->Parity;
 8000696:	68e2      	ldr	r2, [r4, #12]
 8000698:	7a6b      	ldrb	r3, [r5, #9]
 800069a:	4313      	orrs	r3, r2
 800069c:	60e3      	str	r3, [r4, #12]

	//configure the no. of stop bits
	USARTx->CR2 |= UART_Config->StopBits;
 800069e:	6922      	ldr	r2, [r4, #16]
 80006a0:	7aab      	ldrb	r3, [r5, #10]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	6123      	str	r3, [r4, #16]

	//configuration of hw flowctrl
	USARTx->CR3 |= UART_Config->FlowCTRL;
 80006a6:	6962      	ldr	r2, [r4, #20]
 80006a8:	7aeb      	ldrb	r3, [r5, #11]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	6163      	str	r3, [r4, #20]

	//configuration of BRR (BAUDRATE REG)
	//PCLK1 for USART 2, 3
	//PCLK2 for USART 1

	if (USARTx == USART1)
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MCAL_UART_INIT+0xec>)
 80006b0:	429c      	cmp	r4, r3
 80006b2:	d135      	bne.n	8000720 <MCAL_UART_INIT+0xbc>
	{
		pclk = MCAL_RCC_GET_PCLK2_FREQ();
 80006b4:	f7ff fe8e 	bl	80003d4 <MCAL_RCC_GET_PCLK2_FREQ>
	}

	if (USARTx == USART2)
	{
		pclk = MCAL_RCC_GET_PCLK1_FREQ();
 80006b8:	4606      	mov	r6, r0
	}
	BRR = UART_BRR_REG(pclk, UART_Config->BaudRate);
 80006ba:	2319      	movs	r3, #25
 80006bc:	4373      	muls	r3, r6
 80006be:	6869      	ldr	r1, [r5, #4]
 80006c0:	010a      	lsls	r2, r1, #4
 80006c2:	0089      	lsls	r1, r1, #2
 80006c4:	fbb6 f2f2 	udiv	r2, r6, r2
 80006c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80006cc:	2164      	movs	r1, #100	; 0x64
 80006ce:	fb01 3312 	mls	r3, r1, r2, r3
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d8:	f003 030f 	and.w	r3, r3, #15
 80006dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
	USARTx->BRR =BRR;
 80006e0:	60a3      	str	r3, [r4, #8]

	//ENABLE/DISABLE
	//USART1 CR1
	if (UART_Config->IRQ_ENABLE != UART_IRQ_ENABLE_NONE)
 80006e2:	7b2b      	ldrb	r3, [r5, #12]
 80006e4:	b153      	cbz	r3, 80006fc <MCAL_UART_INIT+0x98>
	{
		USARTx->CR1 |= (UART_Config->IRQ_ENABLE);
 80006e6:	68e2      	ldr	r2, [r4, #12]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	60e3      	str	r3, [r4, #12]

		// EN NVIC for USARTx IRQ
		if (USARTx == USART1)
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MCAL_UART_INIT+0xec>)
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d11c      	bne.n	800072c <MCAL_UART_INIT+0xc8>
		{
			NVIC_IRQ37_USART1_ENABLE;
 80006f2:	4a19      	ldr	r2, [pc, #100]	; (8000758 <MCAL_UART_INIT+0xf4>)
 80006f4:	6813      	ldr	r3, [r2, #0]
 80006f6:	f043 0320 	orr.w	r3, r3, #32
		}

		else if (USARTx == USART3)
		{

			NVIC_IRQ39_USART3_ENABLE;
 80006fa:	6013      	str	r3, [r2, #0]
		}
	}
}
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
	else if (USARTx == USART2)
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <MCAL_UART_INIT+0xf8>)
 8000700:	4298      	cmp	r0, r3
 8000702:	d105      	bne.n	8000710 <MCAL_UART_INIT+0xac>
		RCC_USART2_CLK_EN();
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <MCAL_UART_INIT+0xf0>)
 8000706:	69d3      	ldr	r3, [r2, #28]
 8000708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		RCC_USART3_CLK_EN();
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	e7b6      	b.n	800067e <MCAL_UART_INIT+0x1a>
	else if (USARTx == USART3)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MCAL_UART_INIT+0xfc>)
 8000712:	4298      	cmp	r0, r3
 8000714:	d1b3      	bne.n	800067e <MCAL_UART_INIT+0x1a>
		RCC_USART3_CLK_EN();
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MCAL_UART_INIT+0xf0>)
 8000718:	69d3      	ldr	r3, [r2, #28]
 800071a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800071e:	e7f5      	b.n	800070c <MCAL_UART_INIT+0xa8>
	if (USARTx == USART2)
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MCAL_UART_INIT+0xf8>)
 8000722:	429c      	cmp	r4, r3
 8000724:	d1c9      	bne.n	80006ba <MCAL_UART_INIT+0x56>
		pclk = MCAL_RCC_GET_PCLK1_FREQ();
 8000726:	f7ff fe45 	bl	80003b4 <MCAL_RCC_GET_PCLK1_FREQ>
 800072a:	e7c5      	b.n	80006b8 <MCAL_UART_INIT+0x54>
		else if (USARTx == USART2)
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MCAL_UART_INIT+0xf8>)
 800072e:	429c      	cmp	r4, r3
 8000730:	d104      	bne.n	800073c <MCAL_UART_INIT+0xd8>
			NVIC_IRQ38_USART2_ENABLE;
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <MCAL_UART_INIT+0xf4>)
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073a:	e7de      	b.n	80006fa <MCAL_UART_INIT+0x96>
		else if (USARTx == USART3)
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MCAL_UART_INIT+0xfc>)
 800073e:	429c      	cmp	r4, r3
 8000740:	d1dc      	bne.n	80006fc <MCAL_UART_INIT+0x98>
			NVIC_IRQ39_USART3_ENABLE;
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <MCAL_UART_INIT+0xf4>)
 8000744:	6813      	ldr	r3, [r2, #0]
 8000746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074a:	e7d6      	b.n	80006fa <MCAL_UART_INIT+0x96>
 800074c:	20000074 	.word	0x20000074
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000
 8000758:	e000e104 	.word	0xe000e104
 800075c:	40004400 	.word	0x40004400
 8000760:	40004800 	.word	0x40004800

08000764 <MCAL_UART_GPIO_SET_PINS>:
 */

void MCAL_UART_GPIO_SET_PINS(USART_Typedef* USARTx)
{
	GPIO_PIN_CONFIG_t PinCfg;
	if (USARTx == USART1)
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MCAL_UART_GPIO_SET_PINS+0x7c>)
{
 8000766:	b513      	push	{r0, r1, r4, lr}
	if (USARTx == USART1)
 8000768:	4298      	cmp	r0, r3
 800076a:	d114      	bne.n	8000796 <MCAL_UART_GPIO_SET_PINS+0x32>
 		//PA9 TX
 		//PA10 RX
 		//PA11 CTS
 		//PA12 RTS

		PinCfg.GPIO_PIN_NO = GPIO_PIN9;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MCAL_UART_GPIO_SET_PINS+0x80>)
 800076e:	ac02      	add	r4, sp, #8
 8000770:	f844 3d04 	str.w	r3, [r4, #-4]!
		PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000774:	4621      	mov	r1, r4
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <MCAL_UART_GPIO_SET_PINS+0x84>)
 8000778:	f7ff fd6c 	bl	8000254 <MCAL_GPIO_Init>

		PinCfg.GPIO_PIN_NO = GPIO_PIN10;
 800077c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000780:	f8ad 3004 	strh.w	r3, [sp, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000784:	2308      	movs	r3, #8
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(GPIOA, &PinCfg);

		PinCfg.GPIO_PIN_NO = GPIO_PIN3;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000786:	4621      	mov	r1, r4
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <MCAL_UART_GPIO_SET_PINS+0x84>)
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800078a:	f88d 3006 	strb.w	r3, [sp, #6]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
		MCAL_GPIO_Init(GPIOB, &PinCfg);

		PinCfg.GPIO_PIN_NO = GPIO_PIN11;
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 800078e:	f7ff fd61 	bl	8000254 <MCAL_GPIO_Init>

		}
	}


}
 8000792:	b002      	add	sp, #8
 8000794:	bd10      	pop	{r4, pc}
	else if (USARTx == USART2)
 8000796:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MCAL_UART_GPIO_SET_PINS+0x88>)
 8000798:	4298      	cmp	r0, r3
 800079a:	d10b      	bne.n	80007b4 <MCAL_UART_GPIO_SET_PINS+0x50>
		PinCfg.GPIO_PIN_NO = GPIO_PIN2;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MCAL_UART_GPIO_SET_PINS+0x8c>)
 800079e:	ac02      	add	r4, sp, #8
 80007a0:	f844 3d04 	str.w	r3, [r4, #-4]!
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80007a4:	4621      	mov	r1, r4
 80007a6:	4810      	ldr	r0, [pc, #64]	; (80007e8 <MCAL_UART_GPIO_SET_PINS+0x84>)
 80007a8:	f7ff fd54 	bl	8000254 <MCAL_GPIO_Init>
		PinCfg.GPIO_PIN_NO = GPIO_PIN3;
 80007ac:	2308      	movs	r3, #8
 80007ae:	f8ad 3004 	strh.w	r3, [sp, #4]
 80007b2:	e7e8      	b.n	8000786 <MCAL_UART_GPIO_SET_PINS+0x22>
	else if (USARTx == USART3)
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MCAL_UART_GPIO_SET_PINS+0x90>)
 80007b6:	4298      	cmp	r0, r3
 80007b8:	d1eb      	bne.n	8000792 <MCAL_UART_GPIO_SET_PINS+0x2e>
		PinCfg.GPIO_PIN_NO = GPIO_PIN10;
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MCAL_UART_GPIO_SET_PINS+0x94>)
 80007bc:	ac02      	add	r4, sp, #8
 80007be:	f844 3d04 	str.w	r3, [r4, #-4]!
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007c2:	4621      	mov	r1, r4
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MCAL_UART_GPIO_SET_PINS+0x98>)
 80007c6:	f7ff fd45 	bl	8000254 <MCAL_GPIO_Init>
		PinCfg.GPIO_PIN_NO = GPIO_PIN11;
 80007ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007ce:	f8ad 3004 	strh.w	r3, [sp, #4]
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80007d2:	2308      	movs	r3, #8
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007d4:	4621      	mov	r1, r4
		PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80007d6:	f88d 3006 	strb.w	r3, [sp, #6]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <MCAL_UART_GPIO_SET_PINS+0x98>)
 80007dc:	e7d7      	b.n	800078e <MCAL_UART_GPIO_SET_PINS+0x2a>
 80007de:	bf00      	nop
 80007e0:	40013800 	.word	0x40013800
 80007e4:	01060200 	.word	0x01060200
 80007e8:	40010800 	.word	0x40010800
 80007ec:	40004400 	.word	0x40004400
 80007f0:	01060004 	.word	0x01060004
 80007f4:	40004800 	.word	0x40004800
 80007f8:	01060400 	.word	0x01060400
 80007fc:	40010c00 	.word	0x40010c00

08000800 <MCAL_UART_SEND_DATA>:
			When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
 */
void MCAL_UART_SEND_DATA (USART_Typedef* USARTx, uint16_t* pTX_Buffer, enum Polling_Mechanism PollingEn)
{
	//Wait until TXE flag is set
	if ( PollingEn == ENABLE)
 8000800:	b912      	cbnz	r2, 8000808 <MCAL_UART_SEND_DATA+0x8>
		while( !(USARTx->SR & (1<< 7) ));
 8000802:	6803      	ldr	r3, [r0, #0]
 8000804:	061b      	lsls	r3, r3, #24
 8000806:	d5fc      	bpl.n	8000802 <MCAL_UART_SEND_DATA+0x2>
	{
		USARTx->DR = (*pTX_Buffer & (uint16_t) 0x01FF);
	}
	else
	{
		USARTx->DR = (*pTX_Buffer & (uint8_t) 0xFF);
 8000808:	780b      	ldrb	r3, [r1, #0]
 800080a:	6043      	str	r3, [r0, #4]
	}



}
 800080c:	4770      	bx	lr
	...

08000810 <MCAL_UART_RECEIVE_DATA>:


void MCAL_UART_RECEIVE_DATA (USART_Typedef* USARTx, uint16_t* pTX_Buffer, enum Polling_Mechanism PollingEn)
{
	//Wait until RXNE flag is set
	if ( PollingEn == ENABLE)
 8000810:	b912      	cbnz	r2, 8000818 <MCAL_UART_RECEIVE_DATA+0x8>
		while( !(USARTx->SR & 1<<5));
 8000812:	6803      	ldr	r3, [r0, #0]
 8000814:	069b      	lsls	r3, r3, #26
 8000816:	d5fc      	bpl.n	8000812 <MCAL_UART_RECEIVE_DATA+0x2>
	}
	else
	{

		//this is 8 bits
		if (Global_UART_Config->Parity == UART_PARITY_NONE)
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MCAL_UART_RECEIVE_DATA+0x20>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	7a5b      	ldrb	r3, [r3, #9]
 800081e:	b91b      	cbnz	r3, 8000828 <MCAL_UART_RECEIVE_DATA+0x18>
		{
			//No parity so all 8 bits are considred data
			 *((uint16_t*)pTX_Buffer) =  (USARTx->DR & (uint8_t) 0xFF);
 8000820:	6843      	ldr	r3, [r0, #4]
 8000822:	b2db      	uxtb	r3, r3
		}
		else
		{
			// Parity is used, so 7bits will be of user data and 1 bits is parity
			 *((uint16_t*)pTX_Buffer) = (USARTx->DR & (uint8_t) 0x7F);
 8000824:	800b      	strh	r3, [r1, #0]
		}
	}
	}
 8000826:	4770      	bx	lr
			 *((uint16_t*)pTX_Buffer) = (USARTx->DR & (uint8_t) 0x7F);
 8000828:	6843      	ldr	r3, [r0, #4]
 800082a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800082e:	e7f9      	b.n	8000824 <MCAL_UART_RECEIVE_DATA+0x14>
 8000830:	20000074 	.word	0x20000074

08000834 <USART1_IRQHandler>:
}

//ISR
void USART1_IRQHandler (void)
{
	Global_UART_Config->P_IRQ_CALLBACK();
 8000834:	4b01      	ldr	r3, [pc, #4]	; (800083c <USART1_IRQHandler+0x8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	4718      	bx	r3
 800083c:	20000074 	.word	0x20000074

08000840 <USART2_IRQHandler>:
 8000840:	f7ff bff8 	b.w	8000834 <USART1_IRQHandler>

08000844 <USART3_IRQHandler>:
 8000844:	f7ff bff6 	b.w	8000834 <USART1_IRQHandler>

08000848 <USART_IRQ_CallBack>:
	}
#endif
}

void USART_IRQ_CallBack(void)
{
 8000848:	b538      	push	{r3, r4, r5, lr}
	#ifdef MCU_ACT_AS_MASTER
	MCAL_UART_RECEIVE_DATA(USART1, &key, DISABLE);
 800084a:	4c0f      	ldr	r4, [pc, #60]	; (8000888 <USART_IRQ_CallBack+0x40>)
 800084c:	4d0f      	ldr	r5, [pc, #60]	; (800088c <USART_IRQ_CallBack+0x44>)
 800084e:	4621      	mov	r1, r4
 8000850:	4628      	mov	r0, r5
 8000852:	2201      	movs	r2, #1
 8000854:	f7ff ffdc 	bl	8000810 <MCAL_UART_RECEIVE_DATA>
	MCAL_UART_SEND_DATA(USART1, &key, ENABLE);
 8000858:	4621      	mov	r1, r4
 800085a:	4628      	mov	r0, r5
 800085c:	2200      	movs	r2, #0

	//Send to SPI
	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN4, 0);
 800085e:	f5a5 5540 	sub.w	r5, r5, #12288	; 0x3000
	MCAL_UART_SEND_DATA(USART1, &key, ENABLE);
 8000862:	f7ff ffcd 	bl	8000800 <MCAL_UART_SEND_DATA>
	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN4, 0);
 8000866:	4628      	mov	r0, r5
 8000868:	2200      	movs	r2, #0
 800086a:	2110      	movs	r1, #16
 800086c:	f7ff fd33 	bl	80002d6 <MCAL_GPIO_WRITE_PIN>
	MCAL_SPI_TX_RX(SPI1, &key, Polling_enable);
 8000870:	4621      	mov	r1, r4
 8000872:	2200      	movs	r2, #0
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <USART_IRQ_CallBack+0x48>)
 8000876:	f7ff febf 	bl	80005f8 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN4, 1);
 800087a:	4628      	mov	r0, r5
	#endif
}
 800087c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN4, 1);
 8000880:	2201      	movs	r2, #1
 8000882:	2110      	movs	r1, #16
 8000884:	f7ff bd27 	b.w	80002d6 <MCAL_GPIO_WRITE_PIN>
 8000888:	200000c8 	.word	0x200000c8
 800088c:	40013800 	.word	0x40013800
 8000890:	40013000 	.word	0x40013000

08000894 <clock_init>:
void clock_init()

{

	//Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <clock_init+0x1c>)
 8000896:	699a      	ldr	r2, [r3, #24]
 8000898:	f042 0204 	orr.w	r2, r2, #4
 800089c:	619a      	str	r2, [r3, #24]
	//Enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 800089e:	699a      	ldr	r2, [r3, #24]
 80008a0:	f042 0208 	orr.w	r2, r2, #8
 80008a4:	619a      	str	r2, [r3, #24]
	RCC_AFIO_CLK_EN();
 80008a6:	699a      	ldr	r2, [r3, #24]
 80008a8:	f042 0201 	orr.w	r2, r2, #1
 80008ac:	619a      	str	r2, [r3, #24]

}
 80008ae:	4770      	bx	lr
 80008b0:	40021000 	.word	0x40021000

080008b4 <main>:



int main(void)
{
 80008b4:	b500      	push	{lr}
 80008b6:	b08d      	sub	sp, #52	; 0x34
	clock_init();
 80008b8:	f7ff ffec 	bl	8000894 <clock_init>
	// =================== UART INIT =====================
	UART_Config_t UART ;
	UART.BaudRate = UART_BaudRate_115200 ;
	UART.FlowCTRL = UART_FLOWCTRL_NONE ;
	UART.IRQ_ENABLE = UART_IRQ_ENABLE_RXNEIE ;
	UART.USART_MODE = UART_MODE_RX_TX ;
 80008bc:	230c      	movs	r3, #12
	UART.BaudRate = UART_BaudRate_115200 ;
 80008be:	2400      	movs	r4, #0
	UART.USART_MODE = UART_MODE_RX_TX ;
 80008c0:	f88d 3004 	strb.w	r3, [sp, #4]
	UART.BaudRate = UART_BaudRate_115200 ;
 80008c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80008c8:	e9cd 3402 	strd	r3, r4, [sp, #8]
	UART.FlowCTRL = UART_FLOWCTRL_NONE ;
 80008cc:	2320      	movs	r3, #32
 80008ce:	f88d 3010 	strb.w	r3, [sp, #16]
	UART.Parity = UART_PARITY_NONE ;
	UART.Payload_length = UART_PayloadLength_8B ;
	UART.StopBits = UART_StopBit_1 ;
	UART.P_IRQ_CALLBACK = USART_IRQ_CallBack ;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <main+0x6c>)

	MCAL_UART_INIT(USART1, &UART);
 80008d4:	a901      	add	r1, sp, #4
 80008d6:	4813      	ldr	r0, [pc, #76]	; (8000924 <main+0x70>)
	UART.P_IRQ_CALLBACK = USART_IRQ_CallBack ;
 80008d8:	9305      	str	r3, [sp, #20]
	MCAL_UART_INIT(USART1, &UART);
 80008da:	f7ff fec3 	bl	8000664 <MCAL_UART_INIT>
	MCAL_UART_GPIO_SET_PINS(USART1);
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <main+0x70>)
 80008e0:	f7ff ff40 	bl	8000764 <MCAL_UART_GPIO_SET_PINS>
	SPI.COMM_MODE = SPI_DIRECTION_2LINES;


	#ifdef MCU_ACT_AS_MASTER

	SPI.DEVICE_MODE = SPI_DEVICE_MODE_MASTER;
 80008e4:	2304      	movs	r3, #4
	SPI.CLK_PHASE = SPI_CLKPHASE_2EDGE_FIRST_DATA_CAPTURE_EDGE;
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <main+0x74>)
	SPI.COMM_MODE = SPI_DIRECTION_2LINES;
 80008e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
	SPI.CLK_PHASE = SPI_CLKPHASE_2EDGE_FIRST_DATA_CAPTURE_EDGE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <main+0x78>)
	SPI.IRQ_ENABLE = SPI_IRQ_ENABLE_NONE;
	SPI.NSS = SPI_NSS_SW_InternalSoft_set;
	SPI.P_SPI_IRQ_CALLBACK = NULL;

	// configure SS on PA4 by GPIO
    PinConfig.GPIO_PIN_NO = GPIO_PIN4;
 80008ee:	a90c      	add	r1, sp, #48	; 0x30
	SPI.CLK_PHASE = SPI_CLKPHASE_2EDGE_FIRST_DATA_CAPTURE_EDGE;
 80008f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    PinConfig.GPIO_PIN_NO = GPIO_PIN4;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <main+0x7c>)
    PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
    PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
    MCAL_GPIO_Init(GPIOA, &PinConfig);
 80008f6:	480f      	ldr	r0, [pc, #60]	; (8000934 <main+0x80>)
    PinConfig.GPIO_PIN_NO = GPIO_PIN4;
 80008f8:	f841 3d30 	str.w	r3, [r1, #-48]!
	SPI.SPI_BAUDRATE_PRESCALAR = SPI_BAUDRATE_PRESCALAR_8;
 80008fc:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
	SPI.P_SPI_IRQ_CALLBACK = NULL;
 8000900:	940b      	str	r4, [sp, #44]	; 0x2c
    MCAL_GPIO_Init(GPIOA, &PinConfig);
 8000902:	f7ff fca7 	bl	8000254 <MCAL_GPIO_Init>


	// Force the Slave Select (HIGH) for idle Mode
	MCAL_GPIO_WRITE_PIN(GPIOA, GPIO_PIN4, 1);
 8000906:	2201      	movs	r2, #1
 8000908:	2110      	movs	r1, #16
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <main+0x80>)
 800090c:	f7ff fce3 	bl	80002d6 <MCAL_GPIO_WRITE_PIN>
	SPI.P_SPI_IRQ_CALLBACK = SPI_IRQ_CallBack;

	#endif


	MCAL_SPI_INIT(SPI1, &SPI);
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <main+0x84>)
 8000912:	a906      	add	r1, sp, #24
 8000914:	f7ff fd6e 	bl	80003f4 <MCAL_SPI_INIT>
	MCAL_SPI_GPIO_SET_PINS(SPI1);
 8000918:	4807      	ldr	r0, [pc, #28]	; (8000938 <main+0x84>)
 800091a:	f7ff fdb7 	bl	800048c <MCAL_SPI_GPIO_SET_PINS>
 800091e:	e7fe      	b.n	800091e <main+0x6a>
 8000920:	08000849 	.word	0x08000849
 8000924:	40013800 	.word	0x40013800
 8000928:	00010002 	.word	0x00010002
 800092c:	00100300 	.word	0x00100300
 8000930:	01040010 	.word	0x01040010
 8000934:	40010800 	.word	0x40010800
 8000938:	40013000 	.word	0x40013000

0800093c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800093e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000940:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <LoopForever+0x6>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	; (800097c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <LoopForever+0xe>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	; (8000988 <LoopForever+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800096a:	f000 f811 	bl	8000990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096e:	f7ff ffa1 	bl	80008b4 <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   r0, =_estack
 8000974:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000980:	08000a1c 	.word	0x08000a1c
  ldr r2, =_sbss
 8000984:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000988:	200000cc 	.word	0x200000cc

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <__libc_init_array>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	2500      	movs	r5, #0
 8000994:	4e0c      	ldr	r6, [pc, #48]	; (80009c8 <__libc_init_array+0x38>)
 8000996:	4c0d      	ldr	r4, [pc, #52]	; (80009cc <__libc_init_array+0x3c>)
 8000998:	1ba4      	subs	r4, r4, r6
 800099a:	10a4      	asrs	r4, r4, #2
 800099c:	42a5      	cmp	r5, r4
 800099e:	d109      	bne.n	80009b4 <__libc_init_array+0x24>
 80009a0:	f000 f81a 	bl	80009d8 <_init>
 80009a4:	2500      	movs	r5, #0
 80009a6:	4e0a      	ldr	r6, [pc, #40]	; (80009d0 <__libc_init_array+0x40>)
 80009a8:	4c0a      	ldr	r4, [pc, #40]	; (80009d4 <__libc_init_array+0x44>)
 80009aa:	1ba4      	subs	r4, r4, r6
 80009ac:	10a4      	asrs	r4, r4, #2
 80009ae:	42a5      	cmp	r5, r4
 80009b0:	d105      	bne.n	80009be <__libc_init_array+0x2e>
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009b8:	4798      	blx	r3
 80009ba:	3501      	adds	r5, #1
 80009bc:	e7ee      	b.n	800099c <__libc_init_array+0xc>
 80009be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009c2:	4798      	blx	r3
 80009c4:	3501      	adds	r5, #1
 80009c6:	e7f2      	b.n	80009ae <__libc_init_array+0x1e>
 80009c8:	08000a14 	.word	0x08000a14
 80009cc:	08000a14 	.word	0x08000a14
 80009d0:	08000a14 	.word	0x08000a14
 80009d4:	08000a18 	.word	0x08000a18

080009d8 <_init>:
 80009d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009da:	bf00      	nop
 80009dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009de:	bc08      	pop	{r3}
 80009e0:	469e      	mov	lr, r3
 80009e2:	4770      	bx	lr

080009e4 <_fini>:
 80009e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e6:	bf00      	nop
 80009e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ea:	bc08      	pop	{r3}
 80009ec:	469e      	mov	lr, r3
 80009ee:	4770      	bx	lr
