
MasteringEmbeddedSystems.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001214  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001370  08001370  00011378  2**0
                  CONTENTS
  4 .ARM          00000000  08001370  08001370  00011378  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001370  08001378  00011378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001370  08001370  00011370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001374  08001374  00011374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000580  20000000  08001378  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08001378  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d51  00000000  00000000  000113a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001276  00000000  00000000  000180f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001774  00000000  00000000  00019368  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000390  00000000  00000000  0001aae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000308  00000000  00000000  0001ae70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00004405  00000000  00000000  0001b178  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003df2  00000000  00000000  0001f57d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000134ab  00000000  00000000  0002336f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003681a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c1c  00000000  00000000  00036898  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800132c 	.word	0x0800132c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800132c 	.word	0x0800132c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <BusFault_Handler>:

#include "CortexMX_OS_Porting.h"


void BusFault_Handler()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <BusFault_Handler+0x4>

08000222 <HardFault_Handler>:
}
void HardFault_Handler()
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <HardFault_Handler+0x4>

08000228 <UsageFault_Handler>:

}
void UsageFault_Handler()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <UsageFault_Handler+0x4>

0800022e <MemManage_Handler>:
}
void MemManage_Handler()
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <MemManage_Handler+0x4>

08000234 <SVC_Handler>:



__attribute ((naked)) void SVC_Handler ()
{
	__asm ("tst lr, #4 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 b9ff 	b.w	8000644 <OS_SVC>
			"ITE EQ \n\t" // To execute Thumb instructions conditionally, you can either use an IT instruction, or a conditional branch instruction.
			"mrseq r0,MSP \n\t "
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_init>:


void HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	//x count = 1 ms
	//x = 8000 count

	//	decrease PenSV  interrupt priority to be  smaller than or equal  SySTICK Timer
	//SysTICK have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15) ;
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <trigger_OS_PendSV>:
void trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk ;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:

void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//Initialize clock tree (RCC-> Systick timer & CPU ) 8MHz
	//8 Mhz
	//1 count = 0.125 us
	//x count = 1 ms
	//x = 8000 count
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:

unsigned char SysTick_led ;

void SysTick_Handler()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTick_led ^=1 ;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]

	//Update waiting Time
	Update_WaitingTime();
 800029a:	f000 fa13 	bl	80006c4 <Update_WaitingTime>

	//Determine pCurrent and pNext
	OS_Decision();
 800029e:	f000 f959 	bl	8000554 <OS_Decision>

	//Switch Context and Restore
	trigger_OS_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <trigger_OS_PendSV>

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000c0 	.word	0x200000c0

080002b0 <FIFO_init>:


/* *********************************** */

Buffer_status FIFO_init (FIFO_Buf_t* fifo, element_type* buff , unsigned int length)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]

	if(!buff )
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_init+0x16>
		return FIFO_NULL;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_init+0x3a>

	fifo->base = buff ;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base ;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base ;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter=0;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e8:	2300      	movs	r3, #0

}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_enqueue>:

/* *********************************** */

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo, element_type item){
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]

	/* fifo null*/

	if (!fifo->base || !fifo->length)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030e:	2303      	movs	r3, #3
 8000310:	e02d      	b.n	800036e <FIFO_enqueue+0x7a>


	/* fifo full */
	if ((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685a      	ldr	r2, [r3, #4]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	429a      	cmp	r2, r3
 800031c:	d107      	bne.n	800032e <FIFO_enqueue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800032a:	2301      	movs	r3, #1
 800032c:	e01f      	b.n	800036e <FIFO_enqueue+0x7a>

	*(fifo->tail)=item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]


	/* circular enqueue */
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68d2      	ldr	r2, [r2, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6912      	ldr	r2, [r2, #16]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	e004      	b.n	800036c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800036c:	2300      	movs	r3, #0

}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <FIFO_dequeue>:


/* *********************************** */
Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	/* check fifo valid */
	if (!fifo->base || !fifo->length)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <FIFO_dequeue+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000392:	2303      	movs	r3, #3
 8000394:	e028      	b.n	80003e8 <FIFO_dequeue+0x70>

	/* fifo empty */
	if (fifo->head == fifo->tail)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e020      	b.n	80003e8 <FIFO_dequeue+0x70>



	*item = *(fifo->head);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]

	/* circular dequeue */
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length )) - 4 ))
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68d2      	ldr	r2, [r2, #12]
 80003c2:	4611      	mov	r1, r2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6912      	ldr	r2, [r2, #16]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	3a04      	subs	r2, #4
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d104      	bne.n	80003dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	e004      	b.n	80003e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	1d1a      	adds	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <bubbleSort>:
//-------------------------------------------------


// perform the bubble sort
void bubbleSort()
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
	int size = OS_Structure.NumOfActiveTasks;
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <bubbleSort+0x8c>)
 80003fc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000400:	607b      	str	r3, [r7, #4]
	Task_strcuture* temp;
	// loop to access each array element
	for (int step = 0; step < size - 1; step++) {
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	e030      	b.n	800046a <bubbleSort+0x76>

		// loop to compare array elements
		for (int i = 0; i < size - step - 1; i++) {
 8000408:	2300      	movs	r3, #0
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	e023      	b.n	8000456 <bubbleSort+0x62>

			// compare two adjacent elements
			if (OS_Structure.OS_Tasks[i]->priority > OS_Structure.OS_Tasks[i+1]->priority) {
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <bubbleSort+0x8c>)
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000416:	791a      	ldrb	r2, [r3, #4]
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	3301      	adds	r3, #1
 800041c:	4918      	ldr	r1, [pc, #96]	; (8000480 <bubbleSort+0x8c>)
 800041e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	429a      	cmp	r2, r3
 8000426:	d913      	bls.n	8000450 <bubbleSort+0x5c>

				// swapping occurs if elements are not in the intended order
				temp = OS_Structure.OS_Tasks[i];
 8000428:	4a15      	ldr	r2, [pc, #84]	; (8000480 <bubbleSort+0x8c>)
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000430:	603b      	str	r3, [r7, #0]
				OS_Structure.OS_Tasks[i] = OS_Structure.OS_Tasks[i+1];
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	3301      	adds	r3, #1
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <bubbleSort+0x8c>)
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	4910      	ldr	r1, [pc, #64]	; (8000480 <bubbleSort+0x8c>)
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Structure.OS_Tasks[i+1] = temp;
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	3301      	adds	r3, #1
 8000448:	490d      	ldr	r1, [pc, #52]	; (8000480 <bubbleSort+0x8c>)
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < size - step - 1; i++) {
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	3301      	adds	r3, #1
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	3b01      	subs	r3, #1
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	429a      	cmp	r2, r3
 8000462:	dbd4      	blt.n	800040e <bubbleSort+0x1a>
	for (int step = 0; step < size - 1; step++) {
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3301      	adds	r3, #1
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3b01      	subs	r3, #1
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbc9      	blt.n	8000408 <bubbleSort+0x14>
			}
		}
	}
}
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	200000c4 	.word	0x200000c4

08000484 <MyRTOS_Update_SchedTable>:

void MyRTOS_Update_SchedTable()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
	Task_strcuture* task = NULL;
 800048a:	2300      	movs	r3, #0
 800048c:	603b      	str	r3, [r7, #0]
	Task_strcuture* Ptask;
	Task_strcuture* PnextTask;
	int i =0;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]

	//BubbleSort ScheduleTable of OS_Tasks based on priority
	bubbleSort();
 8000492:	f7ff ffaf 	bl	80003f4 <bubbleSort>
	//Empty ready queue
	while(FIFO_dequeue(&Ready_QUEUE, &task)!= FIFO_EMPTY);
 8000496:	bf00      	nop
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	482b      	ldr	r0, [pc, #172]	; (800054c <MyRTOS_Update_SchedTable+0xc8>)
 800049e:	f7ff ff6b 	bl	8000378 <FIFO_dequeue>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d1f7      	bne.n	8000498 <MyRTOS_Update_SchedTable+0x14>

	//Update ready queue
	while(i<OS_Structure.NumOfActiveTasks)
 80004a8:	e044      	b.n	8000534 <MyRTOS_Update_SchedTable+0xb0>
	{
		Ptask = OS_Structure.OS_Tasks[i];
 80004aa:	4a29      	ldr	r2, [pc, #164]	; (8000550 <MyRTOS_Update_SchedTable+0xcc>)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Structure.OS_Tasks[i+1];
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	4a25      	ldr	r2, [pc, #148]	; (8000550 <MyRTOS_Update_SchedTable+0xcc>)
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	607b      	str	r3, [r7, #4]
		if(Ptask->TaskState != Suspend )
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d031      	beq.n	800052e <MyRTOS_Update_SchedTable+0xaa>
		{
			if(PnextTask->TaskState == Suspend )
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d108      	bne.n	80004e6 <MyRTOS_Update_SchedTable+0x62>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	481d      	ldr	r0, [pc, #116]	; (800054c <MyRTOS_Update_SchedTable+0xc8>)
 80004d8:	f7ff ff0c 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2203      	movs	r2, #3
 80004e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 80004e4:	e02e      	b.n	8000544 <MyRTOS_Update_SchedTable+0xc0>
			}
			if (PnextTask->priority > Ptask->priority)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791a      	ldrb	r2, [r3, #4]
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d908      	bls.n	8000504 <MyRTOS_Update_SchedTable+0x80>
			{
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	4815      	ldr	r0, [pc, #84]	; (800054c <MyRTOS_Update_SchedTable+0xc8>)
 80004f6:	f7ff fefd 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	2203      	movs	r2, #3
 80004fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000502:	e01f      	b.n	8000544 <MyRTOS_Update_SchedTable+0xc0>
			}
			if (PnextTask->priority == Ptask->priority)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	791a      	ldrb	r2, [r3, #4]
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	d108      	bne.n	8000522 <MyRTOS_Update_SchedTable+0x9e>
			{
				// Both with the same priority then we push Ptask to ready queue and when i is incremented
				// then the next task will be executed in one of the above conditions
				FIFO_enqueue(&Ready_QUEUE, Ptask);
 8000510:	68b9      	ldr	r1, [r7, #8]
 8000512:	480e      	ldr	r0, [pc, #56]	; (800054c <MyRTOS_Update_SchedTable+0xc8>)
 8000514:	f7ff feee 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = Ready;
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	2203      	movs	r2, #3
 800051c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8000520:	e005      	b.n	800052e <MyRTOS_Update_SchedTable+0xaa>
			}

			else if (PnextTask->priority < Ptask->priority)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791a      	ldrb	r2, [r3, #4]
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	429a      	cmp	r2, r3
 800052c:	d309      	bcc.n	8000542 <MyRTOS_Update_SchedTable+0xbe>
			{
				// Error (then bubbleSort function isn't working properly)
				break;
			}
		}
		i++;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
	while(i<OS_Structure.NumOfActiveTasks)
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MyRTOS_Update_SchedTable+0xcc>)
 8000536:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	429a      	cmp	r2, r3
 800053e:	d8b4      	bhi.n	80004aa <MyRTOS_Update_SchedTable+0x26>
	}
}
 8000540:	e000      	b.n	8000544 <MyRTOS_Update_SchedTable+0xc0>
				break;
 8000542:	bf00      	nop
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000270 	.word	0x20000270
 8000550:	200000c4 	.word	0x200000c4

08000554 <OS_Decision>:

void OS_Decision()
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	//If ready queue is empty & CurrentTask != suspend
	if((Ready_QUEUE.counter == 0) && (OS_Structure.CurrentTask->TaskState != Suspend))
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <OS_Decision+0x98>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d11a      	bne.n	8000596 <OS_Decision+0x42>
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <OS_Decision+0x9c>)
 8000562:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000566:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800056a:	2b00      	cmp	r3, #0
 800056c:	d013      	beq.n	8000596 <OS_Decision+0x42>
	{
		//Then keep till task terminates
		OS_Structure.CurrentTask->TaskState = Running;
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <OS_Decision+0x9c>)
 8000570:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000574:	2201      	movs	r2, #1
 8000576:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//Add the current task again (RoundRobin)
		FIFO_enqueue(&Ready_QUEUE, OS_Structure.CurrentTask);
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <OS_Decision+0x9c>)
 800057c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000580:	4619      	mov	r1, r3
 8000582:	481a      	ldr	r0, [pc, #104]	; (80005ec <OS_Decision+0x98>)
 8000584:	f7ff feb6 	bl	80002f4 <FIFO_enqueue>
		OS_Structure.NextTask = OS_Structure.CurrentTask;
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <OS_Decision+0x9c>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <OS_Decision+0x9c>)
 8000590:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_enqueue(&Ready_QUEUE, OS_Structure.CurrentTask);
			OS_Structure.CurrentTask->TaskState = Ready;
		}
	}
}
 8000594:	e027      	b.n	80005e6 <OS_Decision+0x92>
		FIFO_dequeue(&Ready_QUEUE, &OS_Structure.NextTask);
 8000596:	4917      	ldr	r1, [pc, #92]	; (80005f4 <OS_Decision+0xa0>)
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <OS_Decision+0x98>)
 800059a:	f7ff feed 	bl	8000378 <FIFO_dequeue>
		OS_Structure.NextTask->TaskState = Running;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <OS_Decision+0x9c>)
 80005a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005a4:	2201      	movs	r2, #1
 80005a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if ((OS_Structure.CurrentTask->priority == OS_Structure.NextTask->priority)&&(OS_Structure.CurrentTask->TaskState != Suspend))
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <OS_Decision+0x9c>)
 80005ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b0:	791a      	ldrb	r2, [r3, #4]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <OS_Decision+0x9c>)
 80005b4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005b8:	791b      	ldrb	r3, [r3, #4]
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d113      	bne.n	80005e6 <OS_Decision+0x92>
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <OS_Decision+0x9c>)
 80005c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00c      	beq.n	80005e6 <OS_Decision+0x92>
			FIFO_enqueue(&Ready_QUEUE, OS_Structure.CurrentTask);
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <OS_Decision+0x9c>)
 80005ce:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <OS_Decision+0x98>)
 80005d6:	f7ff fe8d 	bl	80002f4 <FIFO_enqueue>
			OS_Structure.CurrentTask->TaskState = Ready;
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <OS_Decision+0x9c>)
 80005dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005e0:	2203      	movs	r2, #3
 80005e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000270 	.word	0x20000270
 80005f0:	200000c4 	.word	0x200000c4
 80005f4:	20000268 	.word	0x20000268

080005f8 <OS_SVC_SET>:


void OS_SVC_SET(SVC_ID id)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	switch(id)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b04      	cmp	r3, #4
 8000606:	d817      	bhi.n	8000638 <OS_SVC_SET+0x40>
 8000608:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <OS_SVC_SET+0x18>)
 800060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060e:	bf00      	nop
 8000610:	08000625 	.word	0x08000625
 8000614:	08000629 	.word	0x08000629
 8000618:	0800062d 	.word	0x0800062d
 800061c:	08000631 	.word	0x08000631
 8000620:	08000635 	.word	0x08000635
	{
	case SVC_ActivateTask: // Activate Task
		__asm("svc #0x00");
 8000624:	df00      	svc	0
		break;
 8000626:	e007      	b.n	8000638 <OS_SVC_SET+0x40>
	case SVC_TerminateTask: // Terminate Task
		__asm("svc #0x01");
 8000628:	df01      	svc	1
		break;
 800062a:	e005      	b.n	8000638 <OS_SVC_SET+0x40>
	case SVC_WaitingTask: // Waiting task
		__asm("svc #0x02");
 800062c:	df02      	svc	2
		break;
 800062e:	e003      	b.n	8000638 <OS_SVC_SET+0x40>
	case SVC_AcquireMutex: // Waiting task
		__asm("svc #0x03");
 8000630:	df03      	svc	3
		break;
 8000632:	e001      	b.n	8000638 <OS_SVC_SET+0x40>
	case SVC_ReleaseMutex: // Waiting task
		__asm("svc #0x04");
 8000634:	df04      	svc	4
		break;
 8000636:	bf00      	nop

	}

}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop

08000644 <OS_SVC>:
//Handler mode
void OS_SVC(int* StackFrame)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

	//r0 r1 r2 r3 r12 LR, return address (PC) and XPSR
	unsigned char SVC_NO;
	SVC_NO = *((unsigned char*)(((unsigned char*)StackFrame[6])-2));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3318      	adds	r3, #24
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3b02      	subs	r3, #2
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	73fb      	strb	r3, [r7, #15]

	switch(SVC_NO)
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d829      	bhi.n	80006b2 <OS_SVC+0x6e>
 800065e:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <OS_SVC+0x20>)
 8000660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000664:	08000679 	.word	0x08000679
 8000668:	08000679 	.word	0x08000679
 800066c:	080006a7 	.word	0x080006a7
 8000670:	080006ad 	.word	0x080006ad
 8000674:	080006ad 	.word	0x080006ad
	{
	case SVC_ActivateTask: // Activate Task
	case SVC_TerminateTask: // Terminate Task
		// Update Scheduler Table & Ready Queue
		MyRTOS_Update_SchedTable();
 8000678:	f7ff ff04 	bl	8000484 <MyRTOS_Update_SchedTable>
		// OS is in running state
		if (OS_Structure.OS_Mode== OS_Running)
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <OS_SVC+0x78>)
 800067e:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000682:	2b01      	cmp	r3, #1
 8000684:	d114      	bne.n	80006b0 <OS_SVC+0x6c>
		{
			if ( strcmp(OS_Structure.CurrentTask->TaskName, "idleTask") != 0)
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <OS_SVC+0x78>)
 8000688:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800068c:	331c      	adds	r3, #28
 800068e:	490c      	ldr	r1, [pc, #48]	; (80006c0 <OS_SVC+0x7c>)
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fd6d 	bl	8000170 <strcmp>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d009      	beq.n	80006b0 <OS_SVC+0x6c>
			{
				// Decide what next
				OS_Decision();
 800069c:	f7ff ff5a 	bl	8000554 <OS_Decision>
				// Trigger OS_PendSV (Switch context/Restore)
				trigger_OS_PendSV();
 80006a0:	f7ff fddc 	bl	800025c <trigger_OS_PendSV>

			}
		}
		break;
 80006a4:	e004      	b.n	80006b0 <OS_SVC+0x6c>
	case SVC_WaitingTask: // Waiting task
		MyRTOS_Update_SchedTable();
 80006a6:	f7ff feed 	bl	8000484 <MyRTOS_Update_SchedTable>
		break;
 80006aa:	e002      	b.n	80006b2 <OS_SVC+0x6e>
	case SVC_AcquireMutex:

		break;
 80006ac:	bf00      	nop
 80006ae:	e000      	b.n	80006b2 <OS_SVC+0x6e>
		break;
 80006b0:	bf00      	nop

		break;


	}
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200000c4 	.word	0x200000c4
 80006c0:	08001344 	.word	0x08001344

080006c4 <Update_WaitingTime>:

void Update_WaitingTime()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	for(int i=0; i< OS_Structure.NumOfActiveTasks; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e029      	b.n	8000724 <Update_WaitingTime+0x60>
	{
		if(OS_Structure.OS_Tasks[i]->TimeWaiting.Blocking == enable)
 80006d0:	4a19      	ldr	r2, [pc, #100]	; (8000738 <Update_WaitingTime+0x74>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d11e      	bne.n	800071e <Update_WaitingTime+0x5a>
		{
			OS_Structure.OS_Tasks[i]->TimeWaiting.TicksCount --;
 80006e0:	4a15      	ldr	r2, [pc, #84]	; (8000738 <Update_WaitingTime+0x74>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ea:	3a01      	subs	r2, #1
 80006ec:	641a      	str	r2, [r3, #64]	; 0x40
			if(OS_Structure.OS_Tasks[i]->TimeWaiting.TicksCount == 0)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <Update_WaitingTime+0x74>)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d110      	bne.n	800071e <Update_WaitingTime+0x5a>
			{
				OS_Structure.OS_Tasks[i]->TimeWaiting.Blocking = disable;
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <Update_WaitingTime+0x74>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000704:	2201      	movs	r2, #1
 8000706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				OS_Structure.OS_Tasks[i]->TaskState = Waiting;
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <Update_WaitingTime+0x74>)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	2202      	movs	r2, #2
 8000714:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				OS_SVC_SET(SVC_WaitingTask);
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff ff6d 	bl	80005f8 <OS_SVC_SET>
	for(int i=0; i< OS_Structure.NumOfActiveTasks; i++)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3301      	adds	r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <Update_WaitingTime+0x74>)
 8000726:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8cf      	bhi.n	80006d0 <Update_WaitingTime+0xc>
			}
		}
	}
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000c4 	.word	0x200000c4

0800073c <PendSV_Handler>:
__attribute ((naked)) void PendSV_Handler()
{
	//Save context of current task
	//Get the current PSP
	OS_GET_PSP(OS_Structure.CurrentTask->CurrentPSP);
 800073c:	4b6f      	ldr	r3, [pc, #444]	; (80008fc <PendSV_Handler+0x1c0>)
 800073e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000742:	f3ef 8009 	mrs	r0, PSP
 8000746:	4602      	mov	r2, r0
 8000748:	619a      	str	r2, [r3, #24]

	OS_Structure.CurrentTask->CurrentPSP--;
 800074a:	4b6c      	ldr	r3, [pc, #432]	; (80008fc <PendSV_Handler+0x1c0>)
 800074c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	3a04      	subs	r2, #4
 8000754:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0, r4" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 8000756:	4b69      	ldr	r3, [pc, #420]	; (80008fc <PendSV_Handler+0x1c0>)
 8000758:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4622      	mov	r2, r4
 8000760:	601a      	str	r2, [r3, #0]
	OS_Structure.CurrentTask->CurrentPSP--;
 8000762:	4b66      	ldr	r3, [pc, #408]	; (80008fc <PendSV_Handler+0x1c0>)
 8000764:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000768:	699a      	ldr	r2, [r3, #24]
 800076a:	3a04      	subs	r2, #4
 800076c:	619a      	str	r2, [r3, #24]


	__asm volatile("mov %0, r5" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 800076e:	4b63      	ldr	r3, [pc, #396]	; (80008fc <PendSV_Handler+0x1c0>)
 8000770:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	462a      	mov	r2, r5
 8000778:	601a      	str	r2, [r3, #0]
	OS_Structure.CurrentTask->CurrentPSP--;
 800077a:	4b60      	ldr	r3, [pc, #384]	; (80008fc <PendSV_Handler+0x1c0>)
 800077c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	3a04      	subs	r2, #4
 8000784:	619a      	str	r2, [r3, #24]

	__asm volatile("mov %0, r6" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 8000786:	4b5d      	ldr	r3, [pc, #372]	; (80008fc <PendSV_Handler+0x1c0>)
 8000788:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800078c:	699b      	ldr	r3, [r3, #24]
 800078e:	4632      	mov	r2, r6
 8000790:	601a      	str	r2, [r3, #0]
	OS_Structure.CurrentTask->CurrentPSP--;
 8000792:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <PendSV_Handler+0x1c0>)
 8000794:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000798:	699a      	ldr	r2, [r3, #24]
 800079a:	3a04      	subs	r2, #4
 800079c:	619a      	str	r2, [r3, #24]

	__asm volatile("mov %0, r7" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 800079e:	4b57      	ldr	r3, [pc, #348]	; (80008fc <PendSV_Handler+0x1c0>)
 80007a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	463a      	mov	r2, r7
 80007a8:	601a      	str	r2, [r3, #0]
	OS_Structure.CurrentTask->CurrentPSP--;
 80007aa:	4b54      	ldr	r3, [pc, #336]	; (80008fc <PendSV_Handler+0x1c0>)
 80007ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	3a04      	subs	r2, #4
 80007b4:	619a      	str	r2, [r3, #24]

	__asm volatile("mov %0, r8" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 80007b6:	4b51      	ldr	r3, [pc, #324]	; (80008fc <PendSV_Handler+0x1c0>)
 80007b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	4642      	mov	r2, r8
 80007c0:	601a      	str	r2, [r3, #0]
	OS_Structure.CurrentTask->CurrentPSP--;
 80007c2:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <PendSV_Handler+0x1c0>)
 80007c4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c8:	699a      	ldr	r2, [r3, #24]
 80007ca:	3a04      	subs	r2, #4
 80007cc:	619a      	str	r2, [r3, #24]

	__asm volatile("mov %0, r9" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 80007ce:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <PendSV_Handler+0x1c0>)
 80007d0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	464a      	mov	r2, r9
 80007d8:	601a      	str	r2, [r3, #0]
	OS_Structure.CurrentTask->CurrentPSP--;
 80007da:	4b48      	ldr	r3, [pc, #288]	; (80008fc <PendSV_Handler+0x1c0>)
 80007dc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e0:	699a      	ldr	r2, [r3, #24]
 80007e2:	3a04      	subs	r2, #4
 80007e4:	619a      	str	r2, [r3, #24]

	__asm volatile("mov %0, r10" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <PendSV_Handler+0x1c0>)
 80007e8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4652      	mov	r2, sl
 80007f0:	601a      	str	r2, [r3, #0]
	OS_Structure.CurrentTask->CurrentPSP--;
 80007f2:	4b42      	ldr	r3, [pc, #264]	; (80008fc <PendSV_Handler+0x1c0>)
 80007f4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	3a04      	subs	r2, #4
 80007fc:	619a      	str	r2, [r3, #24]

	__asm volatile("mov %0, r11" : "=r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 80007fe:	4b3f      	ldr	r3, [pc, #252]	; (80008fc <PendSV_Handler+0x1c0>)
 8000800:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	465a      	mov	r2, fp
 8000808:	601a      	str	r2, [r3, #0]

	//Restore context of next task
	//====================================

	if (OS_Structure.NextTask != NULL)
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <PendSV_Handler+0x1c0>)
 800080c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000810:	2b00      	cmp	r3, #0
 8000812:	d009      	beq.n	8000828 <PendSV_Handler+0xec>
	{
		OS_Structure.CurrentTask = OS_Structure.NextTask;
 8000814:	4b39      	ldr	r3, [pc, #228]	; (80008fc <PendSV_Handler+0x1c0>)
 8000816:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800081a:	4a38      	ldr	r2, [pc, #224]	; (80008fc <PendSV_Handler+0x1c0>)
 800081c:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Structure.NextTask = NULL;
 8000820:	4b36      	ldr	r3, [pc, #216]	; (80008fc <PendSV_Handler+0x1c0>)
 8000822:	2200      	movs	r2, #0
 8000824:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	}

	__asm volatile("mov r11, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <PendSV_Handler+0x1c0>)
 800082a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	469b      	mov	fp, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 8000834:	4b31      	ldr	r3, [pc, #196]	; (80008fc <PendSV_Handler+0x1c0>)
 8000836:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800083a:	699a      	ldr	r2, [r3, #24]
 800083c:	3204      	adds	r2, #4
 800083e:	619a      	str	r2, [r3, #24]

	__asm volatile("mov r10, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 8000840:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <PendSV_Handler+0x1c0>)
 8000842:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	469a      	mov	sl, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <PendSV_Handler+0x1c0>)
 800084e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000852:	699a      	ldr	r2, [r3, #24]
 8000854:	3204      	adds	r2, #4
 8000856:	619a      	str	r2, [r3, #24]

	__asm volatile("mov r9, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <PendSV_Handler+0x1c0>)
 800085a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4699      	mov	r9, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <PendSV_Handler+0x1c0>)
 8000866:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800086a:	699a      	ldr	r2, [r3, #24]
 800086c:	3204      	adds	r2, #4
 800086e:	619a      	str	r2, [r3, #24]

	__asm volatile("mov r8, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <PendSV_Handler+0x1c0>)
 8000872:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4698      	mov	r8, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <PendSV_Handler+0x1c0>)
 800087e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000882:	699a      	ldr	r2, [r3, #24]
 8000884:	3204      	adds	r2, #4
 8000886:	619a      	str	r2, [r3, #24]

	__asm volatile("mov r7, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <PendSV_Handler+0x1c0>)
 800088a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	461f      	mov	r7, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 8000894:	4b19      	ldr	r3, [pc, #100]	; (80008fc <PendSV_Handler+0x1c0>)
 8000896:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800089a:	699a      	ldr	r2, [r3, #24]
 800089c:	3204      	adds	r2, #4
 800089e:	619a      	str	r2, [r3, #24]

	__asm volatile("mov r6, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <PendSV_Handler+0x1c0>)
 80008a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	461e      	mov	r6, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <PendSV_Handler+0x1c0>)
 80008ae:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008b2:	699a      	ldr	r2, [r3, #24]
 80008b4:	3204      	adds	r2, #4
 80008b6:	619a      	str	r2, [r3, #24]

	__asm volatile("mov r5, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <PendSV_Handler+0x1c0>)
 80008ba:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	461d      	mov	r5, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <PendSV_Handler+0x1c0>)
 80008c6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ca:	699a      	ldr	r2, [r3, #24]
 80008cc:	3204      	adds	r2, #4
 80008ce:	619a      	str	r2, [r3, #24]

	__asm volatile("mov r4, %0" : : "r" (*(OS_Structure.CurrentTask->CurrentPSP)) );
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <PendSV_Handler+0x1c0>)
 80008d2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	461c      	mov	r4, r3
	OS_Structure.CurrentTask->CurrentPSP++;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <PendSV_Handler+0x1c0>)
 80008de:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e2:	699a      	ldr	r2, [r3, #24]
 80008e4:	3204      	adds	r2, #4
 80008e6:	619a      	str	r2, [r3, #24]

	//Update PSP and exit
	OS_SET_PSP(OS_Structure.CurrentTask->CurrentPSP);
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <PendSV_Handler+0x1c0>)
 80008ea:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80008f6:	4770      	bx	lr



}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	200000c4 	.word	0x200000c4

08000900 <MyRTOS_CreateTaskStack>:


void MyRTOS_CreateTaskStack(Task_strcuture* TaskRef)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	 *
	 * R11 R10 R9 R8 R7 R6 R5 -> Saved/Restore manually
	 */


	TaskRef->CurrentPSP= TaskRef->_S_PSP_TASK;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	691b      	ldr	r3, [r3, #16]
 800090c:	461a      	mov	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	619a      	str	r2, [r3, #24]

	TaskRef->CurrentPSP --;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	1f1a      	subs	r2, r3, #4
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	619a      	str	r2, [r3, #24]
	*(TaskRef->CurrentPSP)= 0x01000000;		//Dummy XPSR should T = 1 to avoid bus fault
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000924:	601a      	str	r2, [r3, #0]

	TaskRef->CurrentPSP --;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	1f1a      	subs	r2, r3, #4
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	619a      	str	r2, [r3, #24]
	*(TaskRef->CurrentPSP)= (unsigned int)TaskRef->P_TaskEntry;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	601a      	str	r2, [r3, #0]

	TaskRef->CurrentPSP --;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	1f1a      	subs	r2, r3, #4
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	619a      	str	r2, [r3, #24]
	*(TaskRef->CurrentPSP)= 0xFFFFFFFD;		//Dummy LR (EXEC_RETURN to thread with PSP)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f06f 0202 	mvn.w	r2, #2
 800094c:	601a      	str	r2, [r3, #0]

	for (int i =0;i<13;i++)
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e00b      	b.n	800096c <MyRTOS_CreateTaskStack+0x6c>
	{

		TaskRef->CurrentPSP --;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	1f1a      	subs	r2, r3, #4
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	619a      	str	r2, [r3, #24]
		*(TaskRef->CurrentPSP)=0;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
	for (int i =0;i<13;i++)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	3301      	adds	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2b0c      	cmp	r3, #12
 8000970:	ddf0      	ble.n	8000954 <MyRTOS_CreateTaskStack+0x54>
	}
}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <MyRTOS_IdleTask>:

unsigned char Idletask_led;
void MyRTOS_IdleTask()
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
	while(1)
	{
		Idletask_led^=1;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <MyRTOS_IdleTask+0x18>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b02      	ldr	r3, [pc, #8]	; (8000994 <MyRTOS_IdleTask+0x18>)
 800098c:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 800098e:	bf20      	wfe
		Idletask_led^=1;
 8000990:	e7f6      	b.n	8000980 <MyRTOS_IdleTask+0x4>
 8000992:	bf00      	nop
 8000994:	200002c8 	.word	0x200002c8

08000998 <MyRTOS_Create_MainStack>:
	}
}


void MyRTOS_Create_MainStack()
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
	//MAIN STACK
	OS_Structure._S_MSP_TASK = &_estack;
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <MyRTOS_Create_MainStack+0x34>)
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MyRTOS_Create_MainStack+0x38>)
 80009a0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Structure._E_MSP_TASK = OS_Structure._S_MSP_TASK -MainStackSize;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MyRTOS_Create_MainStack+0x38>)
 80009a6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80009aa:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <MyRTOS_Create_MainStack+0x38>)
 80009b0:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194


	OS_Structure.PSP_TaskLocator=(OS_Structure._E_MSP_TASK -8);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MyRTOS_Create_MainStack+0x38>)
 80009b6:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80009ba:	3b08      	subs	r3, #8
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <MyRTOS_Create_MainStack+0x38>)
 80009be:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20002800 	.word	0x20002800
 80009d0:	200000c4 	.word	0x200000c4

080009d4 <MyRTOS_Create_Task>:

//----------------------------------------------------------

Error_StateID MyRTOS_Create_Task(Task_strcuture* task)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	Error_StateID error = NoError;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]

	//Create it's own PSP stack

	task->_S_PSP_TASK = OS_Structure.PSP_TaskLocator;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MyRTOS_Create_Task+0x74>)
 80009e2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	611a      	str	r2, [r3, #16]
	task->_E_PSP_TASK = task->_S_PSP_TASK + task->stack_sz;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	691a      	ldr	r2, [r3, #16]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	441a      	add	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	615a      	str	r2, [r3, #20]

	//Check task size exceeded the PSP stack
	if(task->_E_PSP_TASK < (unsigned int)(&_eheap))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MyRTOS_Create_Task+0x78>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d201      	bcs.n	8000a06 <MyRTOS_Create_Task+0x32>
	{
		return task_Exceeded_StackSize;
 8000a02:	2302      	movs	r3, #2
 8000a04:	e01b      	b.n	8000a3e <MyRTOS_Create_Task+0x6a>

	}

	//Aligned 8 bytes spaces between stack PSP and other
	OS_Structure.PSP_TaskLocator = task->_E_PSP_TASK - 8;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	3b08      	subs	r3, #8
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <MyRTOS_Create_Task+0x74>)
 8000a0e:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task Stack
	MyRTOS_CreateTaskStack(task);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ff74 	bl	8000900 <MyRTOS_CreateTaskStack>

	//update sch Table
	OS_Structure.OS_Tasks[OS_Structure.NumOfActiveTasks]= task ;
 8000a18:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MyRTOS_Create_Task+0x74>)
 8000a1a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000a1e:	490a      	ldr	r1, [pc, #40]	; (8000a48 <MyRTOS_Create_Task+0x74>)
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Structure.NumOfActiveTasks++ ;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MyRTOS_Create_Task+0x74>)
 8000a28:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <MyRTOS_Create_Task+0x74>)
 8000a30:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	task->TaskState = Suspend;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200000c4 	.word	0x200000c4
 8000a4c:	20000780 	.word	0x20000780

08000a50 <MyRTOS_init>:
Error_StateID MyRTOS_init()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	Error_StateID error = NoError;
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode
	OS_Structure.OS_Mode = OS_Suspend;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MyRTOS_init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify Main Stack for the ISR and OS
	MyRTOS_Create_MainStack();
 8000a62:	f7ff ff99 	bl	8000998 <MyRTOS_Create_MainStack>

	//Update anything specific by HW (clock tree)
	//HW_init();

	//Create Ready Queue
	if(FIFO_init(&Ready_QUEUE, Ready_QUEUE_FIFO,100)!= FIFO_NO_ERROR)
 8000a66:	2264      	movs	r2, #100	; 0x64
 8000a68:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <MyRTOS_init+0x68>)
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <MyRTOS_init+0x6c>)
 8000a6c:	f7ff fc20 	bl	80002b0 <FIFO_init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <MyRTOS_init+0x2c>
	{
		error += Ready_Queue_Error;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	71fb      	strb	r3, [r7, #7]
	}
	//Configure Idle task
	strcpy(MyRTOS_idleTask.TaskName,"idleTask");
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MyRTOS_init+0x70>)
 8000a7e:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <MyRTOS_init+0x74>)
 8000a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a82:	c303      	stmia	r3!, {r0, r1}
 8000a84:	701a      	strb	r2, [r3, #0]
	MyRTOS_idleTask.priority = 255;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MyRTOS_init+0x78>)
 8000a88:	22ff      	movs	r2, #255	; 0xff
 8000a8a:	711a      	strb	r2, [r3, #4]
	MyRTOS_idleTask.P_TaskEntry = MyRTOS_IdleTask;
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MyRTOS_init+0x78>)
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <MyRTOS_init+0x7c>)
 8000a90:	609a      	str	r2, [r3, #8]
	MyRTOS_idleTask.stack_sz=300;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MyRTOS_init+0x78>)
 8000a94:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000a98:	601a      	str	r2, [r3, #0]

	error += MyRTOS_Create_Task(&MyRTOS_idleTask);
 8000a9a:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MyRTOS_init+0x78>)
 8000a9c:	f7ff ff9a 	bl	80009d4 <MyRTOS_Create_Task>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	71fb      	strb	r3, [r7, #7]

	return error ;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000c4 	.word	0x200000c4
 8000ab8:	200002cc 	.word	0x200002cc
 8000abc:	20000270 	.word	0x20000270
 8000ac0:	200002a0 	.word	0x200002a0
 8000ac4:	08001344 	.word	0x08001344
 8000ac8:	20000284 	.word	0x20000284
 8000acc:	0800097d 	.word	0x0800097d

08000ad0 <MyRTOS_Activate_Task>:

void MyRTOS_Activate_Task(Task_strcuture* task)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	task->TaskState=Waiting;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2202      	movs	r2, #2
 8000adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_SET(SVC_ActivateTask);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff fd89 	bl	80005f8 <OS_SVC_SET>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <MyRTOS_Terminate_Task>:

void MyRTOS_Terminate_Task(Task_strcuture* task)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	task->TaskState=Suspend;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	OS_SVC_SET(SVC_TerminateTask);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fd7a 	bl	80005f8 <OS_SVC_SET>


}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <MyRTOS_Waiting_Task>:

void MyRTOS_Waiting_Task(unsigned int ticks,Task_strcuture* task)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	task->TaskState=Suspend;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	task->TimeWaiting.Blocking=enable;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	task->TimeWaiting.TicksCount=ticks;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	641a      	str	r2, [r3, #64]	; 0x40

	OS_SVC_SET(SVC_TerminateTask);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff fd63 	bl	80005f8 <OS_SVC_SET>


}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <MyRTOS_Acquire_Mutex>:

Error_StateID MyRTOS_Acquire_Mutex(Mutex* mutex_obj, Task_strcuture* task)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
	if (mutex_obj->TaskWithLock == NULL)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <MyRTOS_Acquire_Mutex+0x1a>
	{
		mutex_obj->TaskWithLock = task;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	e00c      	b.n	8000b6e <MyRTOS_Acquire_Mutex+0x34>

	}
	else
	{
		if (mutex_obj->NextTaskWithLock == NULL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d106      	bne.n	8000b6a <MyRTOS_Acquire_Mutex+0x30>
		{
			mutex_obj->NextTaskWithLock = task;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	605a      	str	r2, [r3, #4]
			MyRTOS_Terminate_Task(task);
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f7ff ffc3 	bl	8000aee <MyRTOS_Terminate_Task>
 8000b68:	e001      	b.n	8000b6e <MyRTOS_Acquire_Mutex+0x34>
		}
		else
			return Mutex_Reached_Max_Users;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e000      	b.n	8000b70 <MyRTOS_Acquire_Mutex+0x36>
	}
	return NoError;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <MyRTOS_Release_Mutex>:
void MyRTOS_Release_Mutex(Mutex* mutex_obj)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	//mutex_obj->TaskWithLock = NULL;
	if (mutex_obj->NextTaskWithLock != NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <MyRTOS_Release_Mutex+0x28>
	{
		mutex_obj->TaskWithLock = mutex_obj->NextTaskWithLock;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
		mutex_obj->NextTaskWithLock = NULL;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
		MyRTOS_Activate_Task(mutex_obj->TaskWithLock);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff98 	bl	8000ad0 <MyRTOS_Activate_Task>

	}
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <MyRTOS_StartOS>:

void MyRTOS_StartOS()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	OS_Structure.OS_Mode = OS_Running;
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MyRTOS_StartOS+0x54>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Set default current task as IdleTask
	OS_Structure.CurrentTask = &MyRTOS_idleTask;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MyRTOS_StartOS+0x54>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MyRTOS_StartOS+0x58>)
 8000bb8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	//Activate IdleTask
	MyRTOS_Activate_Task(&MyRTOS_idleTask);
 8000bbc:	4810      	ldr	r0, [pc, #64]	; (8000c00 <MyRTOS_StartOS+0x58>)
 8000bbe:	f7ff ff87 	bl	8000ad0 <MyRTOS_Activate_Task>

	Start_Ticker(); //1 Ms
 8000bc2:	f7ff fb59 	bl	8000278 <Start_Ticker>
	OS_SET_PSP(OS_Structure.CurrentTask->CurrentPSP);
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <MyRTOS_StartOS+0x54>)
 8000bc8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f380 8809 	msr	PSP, r0

	//Switch SP from MSP to PSP
	OS_SWITCH_SP_TO_PSP;
 8000bd4:	f3ef 8014 	mrs	r0, CONTROL
 8000bd8:	f04f 0102 	mov.w	r1, #2
 8000bdc:	ea40 0001 	orr.w	r0, r0, r1
 8000be0:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_TO_UNPRIVILEGED;
 8000be4:	f3ef 8314 	mrs	r3, CONTROL
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	f383 8814 	msr	CONTROL, r3
	MyRTOS_idleTask.P_TaskEntry();
 8000bf0:	4b03      	ldr	r3, [pc, #12]	; (8000c00 <MyRTOS_StartOS+0x58>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	4798      	blx	r3

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000c4 	.word	0x200000c4
 8000c00:	20000284 	.word	0x20000284

08000c04 <EXTI0_IRQHandler>:
//0: No trigger request occurred
//1: selected trigger request occurred
//This bit is set when the selected edge event arrives on the external interrupt line. This bit is cleared by writing a ‘1’ into the bit.

void EXTI0_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<0;
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <EXTI0_IRQHandler+0x1c>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <EXTI0_IRQHandler+0x1c>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[0]();
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <EXTI0_IRQHandler+0x20>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4798      	blx	r3
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010400 	.word	0x40010400
 8000c24:	2000001c 	.word	0x2000001c

08000c28 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <EXTI1_IRQHandler+0x1c>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <EXTI1_IRQHandler+0x1c>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[1]();
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <EXTI1_IRQHandler+0x20>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	4798      	blx	r3
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40010400 	.word	0x40010400
 8000c48:	2000001c 	.word	0x2000001c

08000c4c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <EXTI2_IRQHandler+0x1c>)
 8000c52:	695b      	ldr	r3, [r3, #20]
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <EXTI2_IRQHandler+0x1c>)
 8000c56:	f043 0304 	orr.w	r3, r3, #4
 8000c5a:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[2]();
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <EXTI2_IRQHandler+0x20>)
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	4798      	blx	r3
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010400 	.word	0x40010400
 8000c6c:	2000001c 	.word	0x2000001c

08000c70 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <EXTI3_IRQHandler+0x1c>)
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <EXTI3_IRQHandler+0x1c>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[3]();
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <EXTI3_IRQHandler+0x20>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	4798      	blx	r3
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40010400 	.word	0x40010400
 8000c90:	2000001c 	.word	0x2000001c

08000c94 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <EXTI4_IRQHandler+0x1c>)
 8000c9a:	695b      	ldr	r3, [r3, #20]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <EXTI4_IRQHandler+0x1c>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6153      	str	r3, [r2, #20]
	///Call IRQ_CALLBACK
	GP_IRQ_CALLBACK[4]();
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <EXTI4_IRQHandler+0x20>)
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	4798      	blx	r3
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40010400 	.word	0x40010400
 8000cb4:	2000001c 	.word	0x2000001c

08000cb8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5)
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d008      	beq.n	8000cda <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<5;
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000cce:	f043 0320 	orr.w	r3, r3, #32
 8000cd2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[5]();
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <EXTI9_5_IRQHandler+0xa4>)
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<6)
 8000cda:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d008      	beq.n	8000cf8 <EXTI9_5_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<6;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a1b      	ldr	r2, [pc, #108]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf0:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[6]();
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <EXTI9_5_IRQHandler+0xa4>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<7)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d008      	beq.n	8000d16 <EXTI9_5_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<7;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d0e:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[7]();
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <EXTI9_5_IRQHandler+0xa4>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<8)
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d008      	beq.n	8000d34 <EXTI9_5_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<8;
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[8]();
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <EXTI9_5_IRQHandler+0xa4>)
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<9)
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d008      	beq.n	8000d52 <EXTI9_5_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<9;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <EXTI9_5_IRQHandler+0xa0>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[9]();
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <EXTI9_5_IRQHandler+0xa4>)
 8000d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d50:	4798      	blx	r3
		//EXTI_Config->P_IRQ_CALLBACK;
	}
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40010400 	.word	0x40010400
 8000d5c:	2000001c 	.word	0x2000001c

08000d60 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10)
 8000d64:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d008      	beq.n	8000d82 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= 1<<10;
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7a:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[10]();
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <EXTI15_10_IRQHandler+0xc0>)
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<11)
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d008      	beq.n	8000da0 <EXTI15_10_IRQHandler+0x40>
	{
		EXTI->PR |= 1<<11;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000d94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d98:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[11]();
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <EXTI15_10_IRQHandler+0xc0>)
 8000d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9e:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<12)
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d008      	beq.n	8000dbe <EXTI15_10_IRQHandler+0x5e>
	{
		EXTI->PR |= 1<<12;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000db2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db6:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[12]();
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <EXTI15_10_IRQHandler+0xc0>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<13)
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d008      	beq.n	8000ddc <EXTI15_10_IRQHandler+0x7c>
	{
		EXTI->PR |= 1<<13;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd4:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[13]();
 8000dd6:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <EXTI15_10_IRQHandler+0xc0>)
 8000dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dda:	4798      	blx	r3
	}

	if(EXTI->PR & 1<<14)
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d008      	beq.n	8000dfa <EXTI15_10_IRQHandler+0x9a>
	{
		EXTI->PR |= 1<<14;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df2:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[14]();
 8000df4:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <EXTI15_10_IRQHandler+0xc0>)
 8000df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df8:	4798      	blx	r3
	}
	if(EXTI->PR & 1<<15)
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <EXTI15_10_IRQHandler+0xb8>
	{
		EXTI->PR |= 1<<15;
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <EXTI15_10_IRQHandler+0xbc>)
 8000e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e10:	6153      	str	r3, [r2, #20]
		GP_IRQ_CALLBACK[15]();
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <EXTI15_10_IRQHandler+0xc0>)
 8000e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e16:	4798      	blx	r3
	}
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40010400 	.word	0x40010400
 8000e20:	2000001c 	.word	0x2000001c

08000e24 <I2C1_EV_IRQHandler>:
// IRQ Function Definitions
//-------------------------------------------------


void I2C1_EV_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
    // vuint32_t Dummy_Read = 0; // Volatile for compiler optimization

    /* Interrupt handling for both master and slave mode of the device */
    uint32_t Temp_1, Temp_2, Temp_3;

    Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN)); // Event interrupt enable
 8000e2a:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e32:	60fb      	str	r3, [r7, #12]
    Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN)); // Buffer interrupt enable
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3c:	60bb      	str	r3, [r7, #8]
    Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));   // Stop detection (slave mode)
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	607b      	str	r3, [r7, #4]

    /* Handle Stop Condition Event */
    if (Temp_1 && Temp_3)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00a      	beq.n	8000e64 <I2C1_EV_IRQHandler+0x40>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d007      	beq.n	8000e64 <I2C1_EV_IRQHandler+0x40>
    {
        /* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
         * i have already read SR1 in Temp_3
         * then next statement i write to CR1
         */
        I2C1->CR1 |= 0x0000;
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e56:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6013      	str	r3, [r2, #0]
        G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_STOP);
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <I2C1_EV_IRQHandler+0xf0>)
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	2000      	movs	r0, #0
 8000e62:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle Received address matched. */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR)); // ADDR
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_3)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <I2C1_EV_IRQHandler+0x6a>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <I2C1_EV_IRQHandler+0x6a>
         */
        // Dummy_Read  = I2C1->SR1;
        // Dummy_Read  = I2C1->SR2;

        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000e7a:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <I2C1_EV_IRQHandler+0x6a>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_ADD_MATCHED);
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <I2C1_EV_IRQHandler+0xf0>)
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE)); // TXE
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_2 && Temp_3)       // In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d015      	beq.n	8000eca <I2C1_EV_IRQHandler+0xa6>
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d012      	beq.n	8000eca <I2C1_EV_IRQHandler+0xa6>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00f      	beq.n	8000eca <I2C1_EV_IRQHandler+0xa6>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d109      	bne.n	8000eca <I2C1_EV_IRQHandler+0xa6>
        }
        else
        {
            /* Slave mode */
            /* Check if slave in transmit mode */
            if (I2C1->SR2 & (I2C_SR2_TRA)) // TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <I2C1_EV_IRQHandler+0xa6>
            {
                G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_REQ);
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <I2C1_EV_IRQHandler+0xf0>)
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	4798      	blx	r3
    }

    /* =============================================================================== */

    /* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
    Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE)); // RXNE
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	607b      	str	r3, [r7, #4]
    if (Temp_1 && Temp_2 && Temp_3)        // In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d015      	beq.n	8000f06 <I2C1_EV_IRQHandler+0xe2>
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d012      	beq.n	8000f06 <I2C1_EV_IRQHandler+0xe2>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00f      	beq.n	8000f06 <I2C1_EV_IRQHandler+0xe2>
    {
        /* Check master mode or slave mode */
        if (I2C1->SR2 & (I2C_SR2_MSL))
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <I2C1_EV_IRQHandler+0xe2>
            /* Master mode (Using polling mechanism not interrupt) */
        }
        else
        {
            /* Slave mode */
            if (!(I2C1->SR2 & (I2C_SR2_TRA))) // TRA: Transmitter/receiver: 0: Data bytes received
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <I2C1_EV_IRQHandler+0xec>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d103      	bne.n	8000f06 <I2C1_EV_IRQHandler+0xe2>
            {
                G_I2C_Config[I2C1_Index].P_Slave_CallBack(I2C_EV_DATA_RCV);
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <I2C1_EV_IRQHandler+0xf0>)
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	2003      	movs	r0, #3
 8000f04:	4798      	blx	r3
            }
        }
    }
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40005400 	.word	0x40005400
 8000f14:	20000058 	.word	0x20000058

08000f18 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <I2C2_ER_IRQHandler>:

void I2C2_ER_IRQHandler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <SPI1_IRQHandler>:
//-------------------------------------------------
// IRQ
//-------------------------------------------------

void SPI1_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;

	irq_src.TXE =  (SPI1->SR & (1<<1) >> 1 );
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <SPI1_IRQHandler+0x50>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	f362 0300 	bfi	r3, r2, #0, #1
 8000f52:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE =  (SPI1->SR & (1<<0) >> 0 );
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <SPI1_IRQHandler+0x50>)
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	f362 0341 	bfi	r3, r2, #1, #1
 8000f64:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI =  (SPI1->SR & (1<<4) >> 4 );
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <SPI1_IRQHandler+0x50>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	793b      	ldrb	r3, [r7, #4]
 8000f72:	f362 0382 	bfi	r3, r2, #2, #1
 8000f76:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_SPI_IRQ_CALLBACK(irq_src);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SPI1_IRQHandler+0x54>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	7938      	ldrb	r0, [r7, #4]
 8000f80:	4798      	blx	r3
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40013000 	.word	0x40013000
 8000f90:	200000a8 	.word	0x200000a8

08000f94 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	S_IRQ_SRC irq_src;

	irq_src.TXE = (SPI2->SR & (1<<1) >> 1 );
 8000f9a:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <SPI2_IRQHandler+0x50>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	793b      	ldrb	r3, [r7, #4]
 8000fa6:	f362 0300 	bfi	r3, r2, #0, #1
 8000faa:	713b      	strb	r3, [r7, #4]
 	irq_src.RXNE = (SPI2->SR & (1<<0) >> 0 );
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <SPI2_IRQHandler+0x50>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	793b      	ldrb	r3, [r7, #4]
 8000fb8:	f362 0341 	bfi	r3, r2, #1, #1
 8000fbc:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = (SPI2->SR & (1<<4) >> 4 );
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <SPI2_IRQHandler+0x50>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	793b      	ldrb	r3, [r7, #4]
 8000fca:	f362 0382 	bfi	r3, r2, #2, #1
 8000fce:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_SPI_IRQ_CALLBACK(irq_src);
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SPI2_IRQHandler+0x54>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	7938      	ldrb	r0, [r7, #4]
 8000fd8:	4798      	blx	r3
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40003800 	.word	0x40003800
 8000fe8:	200000a8 	.word	0x200000a8

08000fec <USART1_IRQHandler>:
	while( !(USARTx->SR & 1<< 6));
}

//ISR
void USART1_IRQHandler (void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <USART1_IRQHandler+0x10>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	4798      	blx	r3
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200000b0 	.word	0x200000b0

08001000 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <USART2_IRQHandler+0x10>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	4798      	blx	r3

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000b0 	.word	0x200000b0

08001014 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CALLBACK();
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <USART3_IRQHandler+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	4798      	blx	r3

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000b0 	.word	0x200000b0

08001028 <task1>:
Task_strcuture Task1, Task2, Task3, Task4;
unsigned char task1_led,task2_led, task3_led, task4_led ;
Mutex lock;

void task1()
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)
	{
		task1_led^=1;
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <task1+0x34>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	f083 0301 	eor.w	r3, r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <task1+0x34>)
 8001038:	701a      	strb	r2, [r3, #0]
		count++;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <task1+0x38>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <task1+0x38>)
 8001042:	6013      	str	r3, [r2, #0]
		if(count==500)
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <task1+0x38>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800104c:	d1ee      	bne.n	800102c <task1+0x4>
		{
			MyRTOS_Activate_Task(&Task2);
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <task1+0x3c>)
 8001050:	f7ff fd3e 	bl	8000ad0 <MyRTOS_Activate_Task>
			count=0;
 8001054:	4b02      	ldr	r3, [pc, #8]	; (8001060 <task1+0x38>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
		task1_led^=1;
 800105a:	e7e7      	b.n	800102c <task1+0x4>
 800105c:	2000057c 	.word	0x2000057c
 8001060:	200000b4 	.word	0x200000b4
 8001064:	20000538 	.word	0x20000538

08001068 <task2>:
	}
}


void task2()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	static int count=0;
	while(1)
	{
		task2_led^=1;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <task2+0x4c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	f083 0301 	eor.w	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <task2+0x4c>)
 8001078:	701a      	strb	r2, [r3, #0]
		//Task2 Code
		count++;
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <task2+0x50>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <task2+0x50>)
 8001082:	6013      	str	r3, [r2, #0]
		if(count==500)
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <task2+0x50>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800108c:	d106      	bne.n	800109c <task2+0x34>
		{
			MyRTOS_Acquire_Mutex(&lock, &Task2);
 800108e:	490b      	ldr	r1, [pc, #44]	; (80010bc <task2+0x54>)
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <task2+0x58>)
 8001092:	f7ff fd52 	bl	8000b3a <MyRTOS_Acquire_Mutex>
			MyRTOS_Activate_Task(&Task4);
 8001096:	480b      	ldr	r0, [pc, #44]	; (80010c4 <task2+0x5c>)
 8001098:	f7ff fd1a 	bl	8000ad0 <MyRTOS_Activate_Task>
		}
		if(count==1000)
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <task2+0x50>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a4:	d1e2      	bne.n	800106c <task2+0x4>
		{
			MyRTOS_Release_Mutex(&lock);
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <task2+0x58>)
 80010a8:	f7ff fd66 	bl	8000b78 <MyRTOS_Release_Mutex>
			count =0;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <task2+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
		task2_led^=1;
 80010b2:	e7db      	b.n	800106c <task2+0x4>
 80010b4:	2000057d 	.word	0x2000057d
 80010b8:	200000b8 	.word	0x200000b8
 80010bc:	20000538 	.word	0x20000538
 80010c0:	200004a4 	.word	0x200004a4
 80010c4:	20000460 	.word	0x20000460

080010c8 <task3>:
		}
	}
}

void task3()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

	while(1)
	{
		task3_led^=1;
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <task3+0x1c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <task3+0x1c>)
 80010d8:	701a      	strb	r2, [r3, #0]
		//Task3 Code
		MyRTOS_Waiting_Task(10,&Task3);
 80010da:	4903      	ldr	r1, [pc, #12]	; (80010e8 <task3+0x20>)
 80010dc:	200a      	movs	r0, #10
 80010de:	f7ff fd15 	bl	8000b0c <MyRTOS_Waiting_Task>
		task3_led^=1;
 80010e2:	e7f3      	b.n	80010cc <task3+0x4>
 80010e4:	2000045c 	.word	0x2000045c
 80010e8:	200004f4 	.word	0x200004f4

080010ec <task4>:

	}
}

void task4()
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	static int count =0;
	while(1)
	{
		//Task4 Code
		task4_led^=1;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <task4+0x4c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	f083 0301 	eor.w	r3, r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <task4+0x4c>)
 80010fc:	701a      	strb	r2, [r3, #0]
		count++;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <task4+0x50>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <task4+0x50>)
 8001106:	6013      	str	r3, [r2, #0]
		if(count==300)
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <task4+0x50>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001110:	d106      	bne.n	8001120 <task4+0x34>
		{
			MyRTOS_Acquire_Mutex(&lock, &Task4);
 8001112:	490b      	ldr	r1, [pc, #44]	; (8001140 <task4+0x54>)
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <task4+0x58>)
 8001116:	f7ff fd10 	bl	8000b3a <MyRTOS_Acquire_Mutex>
			MyRTOS_Activate_Task(&Task3);
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <task4+0x5c>)
 800111c:	f7ff fcd8 	bl	8000ad0 <MyRTOS_Activate_Task>
		}
		if(count==1000)
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <task4+0x50>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001128:	d1e2      	bne.n	80010f0 <task4+0x4>
		{
			MyRTOS_Release_Mutex(&lock);
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <task4+0x58>)
 800112c:	f7ff fd24 	bl	8000b78 <MyRTOS_Release_Mutex>
			MyRTOS_Terminate_Task(&Task4);
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <task4+0x54>)
 8001132:	f7ff fcdc 	bl	8000aee <MyRTOS_Terminate_Task>
		task4_led^=1;
 8001136:	e7db      	b.n	80010f0 <task4+0x4>
 8001138:	200004f0 	.word	0x200004f0
 800113c:	200000bc 	.word	0x200000bc
 8001140:	20000460 	.word	0x20000460
 8001144:	200004a4 	.word	0x200004a4
 8001148:	200004f4 	.word	0x200004f4

0800114c <main>:
		}
	}
}

int main(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	Error_StateID error;

	HW_init();
 8001152:	f7ff f879 	bl	8000248 <HW_init>

	if (MyRTOS_init() != NoError)
 8001156:	f7ff fc7b 	bl	8000a50 <MyRTOS_init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d000      	beq.n	8001162 <main+0x16>
		while (1);
 8001160:	e7fe      	b.n	8001160 <main+0x14>

	Task1.priority = 4;
 8001162:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <main+0x104>)
 8001164:	2204      	movs	r2, #4
 8001166:	711a      	strb	r2, [r3, #4]
	Task1.P_TaskEntry = task1;
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <main+0x104>)
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <main+0x108>)
 800116c:	609a      	str	r2, [r3, #8]
	Task1.stack_sz=1024;
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <main+0x104>)
 8001170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001174:	601a      	str	r2, [r3, #0]
	strcpy(Task1.TaskName,"Task_1");
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <main+0x10c>)
 8001178:	4a38      	ldr	r2, [pc, #224]	; (800125c <main+0x110>)
 800117a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117e:	6018      	str	r0, [r3, #0]
 8001180:	3304      	adds	r3, #4
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	0c0a      	lsrs	r2, r1, #16
 8001188:	701a      	strb	r2, [r3, #0]

	strcpy(Task2.TaskName,"Task_2");
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <main+0x114>)
 800118c:	4a35      	ldr	r2, [pc, #212]	; (8001264 <main+0x118>)
 800118e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001192:	6018      	str	r0, [r3, #0]
 8001194:	3304      	adds	r3, #4
 8001196:	8019      	strh	r1, [r3, #0]
 8001198:	3302      	adds	r3, #2
 800119a:	0c0a      	lsrs	r2, r1, #16
 800119c:	701a      	strb	r2, [r3, #0]
	Task2.priority = 3;
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <main+0x11c>)
 80011a0:	2203      	movs	r2, #3
 80011a2:	711a      	strb	r2, [r3, #4]
	Task2.P_TaskEntry = task2;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <main+0x11c>)
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <main+0x120>)
 80011a8:	609a      	str	r2, [r3, #8]
	Task2.stack_sz=1024;
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <main+0x11c>)
 80011ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b0:	601a      	str	r2, [r3, #0]

	strcpy(Task3.TaskName,"Task_3");
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <main+0x124>)
 80011b4:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <main+0x128>)
 80011b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ba:	6018      	str	r0, [r3, #0]
 80011bc:	3304      	adds	r3, #4
 80011be:	8019      	strh	r1, [r3, #0]
 80011c0:	3302      	adds	r3, #2
 80011c2:	0c0a      	lsrs	r2, r1, #16
 80011c4:	701a      	strb	r2, [r3, #0]
	Task3.priority = 2;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <main+0x12c>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	711a      	strb	r2, [r3, #4]
	Task3.P_TaskEntry = task3;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <main+0x12c>)
 80011ce:	4a2b      	ldr	r2, [pc, #172]	; (800127c <main+0x130>)
 80011d0:	609a      	str	r2, [r3, #8]
	Task3.stack_sz=1024;
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <main+0x12c>)
 80011d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d8:	601a      	str	r2, [r3, #0]

	strcpy(Task4.TaskName,"Task_4");
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <main+0x134>)
 80011dc:	4a29      	ldr	r2, [pc, #164]	; (8001284 <main+0x138>)
 80011de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e2:	6018      	str	r0, [r3, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	8019      	strh	r1, [r3, #0]
 80011e8:	3302      	adds	r3, #2
 80011ea:	0c0a      	lsrs	r2, r1, #16
 80011ec:	701a      	strb	r2, [r3, #0]
	Task4.priority = 1;
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <main+0x13c>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	711a      	strb	r2, [r3, #4]
	Task4.P_TaskEntry = task4;
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <main+0x13c>)
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <main+0x140>)
 80011f8:	609a      	str	r2, [r3, #8]
	Task4.stack_sz=1024;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <main+0x13c>)
 80011fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001200:	601a      	str	r2, [r3, #0]

	error += MyRTOS_Create_Task(&Task1);
 8001202:	4813      	ldr	r0, [pc, #76]	; (8001250 <main+0x104>)
 8001204:	f7ff fbe6 	bl	80009d4 <MyRTOS_Create_Task>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4413      	add	r3, r2
 8001210:	71fb      	strb	r3, [r7, #7]
	error += MyRTOS_Create_Task(&Task2);
 8001212:	4815      	ldr	r0, [pc, #84]	; (8001268 <main+0x11c>)
 8001214:	f7ff fbde 	bl	80009d4 <MyRTOS_Create_Task>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	4413      	add	r3, r2
 8001220:	71fb      	strb	r3, [r7, #7]
	error += MyRTOS_Create_Task(&Task3);
 8001222:	4815      	ldr	r0, [pc, #84]	; (8001278 <main+0x12c>)
 8001224:	f7ff fbd6 	bl	80009d4 <MyRTOS_Create_Task>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4413      	add	r3, r2
 8001230:	71fb      	strb	r3, [r7, #7]
	error += MyRTOS_Create_Task(&Task4);
 8001232:	4815      	ldr	r0, [pc, #84]	; (8001288 <main+0x13c>)
 8001234:	f7ff fbce 	bl	80009d4 <MyRTOS_Create_Task>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4413      	add	r3, r2
 8001240:	71fb      	strb	r3, [r7, #7]

	MyRTOS_Activate_Task(&Task1);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <main+0x104>)
 8001244:	f7ff fc44 	bl	8000ad0 <MyRTOS_Activate_Task>
	//MyRTOS_Activate_Task(&Task2);
	//MyRTOS_Activate_Task(&Task3);
	//MyRTOS_Activate_Task(&Task4);

	MyRTOS_StartOS();
 8001248:	f7ff fcae 	bl	8000ba8 <MyRTOS_StartOS>
	while (1)
 800124c:	e7fe      	b.n	800124c <main+0x100>
 800124e:	bf00      	nop
 8001250:	200004ac 	.word	0x200004ac
 8001254:	08001029 	.word	0x08001029
 8001258:	200004c8 	.word	0x200004c8
 800125c:	08001350 	.word	0x08001350
 8001260:	20000554 	.word	0x20000554
 8001264:	08001358 	.word	0x08001358
 8001268:	20000538 	.word	0x20000538
 800126c:	08001069 	.word	0x08001069
 8001270:	20000510 	.word	0x20000510
 8001274:	08001360 	.word	0x08001360
 8001278:	200004f4 	.word	0x200004f4
 800127c:	080010c9 	.word	0x080010c9
 8001280:	2000047c 	.word	0x2000047c
 8001284:	08001368 	.word	0x08001368
 8001288:	20000460 	.word	0x20000460
 800128c:	080010ed 	.word	0x080010ed

08001290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <LoopForever+0x6>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <LoopForever+0xe>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <LoopForever+0x16>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012be:	f000 f811 	bl	80012e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7ff ff43 	bl	800114c <main>

080012c6 <LoopForever>:

LoopForever:
    b LoopForever
 80012c6:	e7fe      	b.n	80012c6 <LoopForever>
  ldr   r0, =_estack
 80012c8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80012d4:	08001378 	.word	0x08001378
  ldr r2, =_sbss
 80012d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80012dc:	20000580 	.word	0x20000580

080012e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_2_IRQHandler>
	...

080012e4 <__libc_init_array>:
 80012e4:	b570      	push	{r4, r5, r6, lr}
 80012e6:	2500      	movs	r5, #0
 80012e8:	4e0c      	ldr	r6, [pc, #48]	; (800131c <__libc_init_array+0x38>)
 80012ea:	4c0d      	ldr	r4, [pc, #52]	; (8001320 <__libc_init_array+0x3c>)
 80012ec:	1ba4      	subs	r4, r4, r6
 80012ee:	10a4      	asrs	r4, r4, #2
 80012f0:	42a5      	cmp	r5, r4
 80012f2:	d109      	bne.n	8001308 <__libc_init_array+0x24>
 80012f4:	f000 f81a 	bl	800132c <_init>
 80012f8:	2500      	movs	r5, #0
 80012fa:	4e0a      	ldr	r6, [pc, #40]	; (8001324 <__libc_init_array+0x40>)
 80012fc:	4c0a      	ldr	r4, [pc, #40]	; (8001328 <__libc_init_array+0x44>)
 80012fe:	1ba4      	subs	r4, r4, r6
 8001300:	10a4      	asrs	r4, r4, #2
 8001302:	42a5      	cmp	r5, r4
 8001304:	d105      	bne.n	8001312 <__libc_init_array+0x2e>
 8001306:	bd70      	pop	{r4, r5, r6, pc}
 8001308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800130c:	4798      	blx	r3
 800130e:	3501      	adds	r5, #1
 8001310:	e7ee      	b.n	80012f0 <__libc_init_array+0xc>
 8001312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001316:	4798      	blx	r3
 8001318:	3501      	adds	r5, #1
 800131a:	e7f2      	b.n	8001302 <__libc_init_array+0x1e>
 800131c:	08001370 	.word	0x08001370
 8001320:	08001370 	.word	0x08001370
 8001324:	08001370 	.word	0x08001370
 8001328:	08001374 	.word	0x08001374

0800132c <_init>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr

08001338 <_fini>:
 8001338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800133a:	bf00      	nop
 800133c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800133e:	bc08      	pop	{r3}
 8001340:	469e      	mov	lr, r3
 8001342:	4770      	bx	lr
